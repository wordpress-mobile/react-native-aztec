//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch

import UIKit



class GridiconsGenerated: NSObject {
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawGridiconsvisible(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 12), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 12)
        context.translateBy(x: -1266, y: -545)
        
        /// gridicons-visible
        do {
            context.saveGState()
            context.translateBy(x: 1266, y: 545)
            
            /// visible
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 4.19, y: 0), controlPoint2: CGPoint(x: 0, y: 6))
                shape.addCurve(to: CGPoint(x: 11, y: 12), controlPoint1: CGPoint(x: 0, y: 6), controlPoint2: CGPoint(x: 4.19, y: 12))
                shape.addCurve(to: CGPoint(x: 22, y: 6), controlPoint1: CGPoint(x: 17.81, y: 12), controlPoint2: CGPoint(x: 22, y: 6))
                shape.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 22, y: 6), controlPoint2: CGPoint(x: 17.81, y: 0))
                shape.addLine(to: CGPoint(x: 11, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 10))
                shape.addCurve(to: CGPoint(x: 2.62, y: 6), controlPoint1: CGPoint(x: 7.06, y: 10), controlPoint2: CGPoint(x: 4.07, y: 7.52))
                shape.addCurve(to: CGPoint(x: 7.88, y: 2.53), controlPoint1: CGPoint(x: 3.66, y: 4.92), controlPoint2: CGPoint(x: 5.48, y: 3.34))
                shape.addCurve(to: CGPoint(x: 7, y: 5), controlPoint1: CGPoint(x: 7.34, y: 3.21), controlPoint2: CGPoint(x: 7, y: 4.06))
                shape.addCurve(to: CGPoint(x: 11, y: 9), controlPoint1: CGPoint(x: 7, y: 7.21), controlPoint2: CGPoint(x: 8.79, y: 9))
                shape.addCurve(to: CGPoint(x: 15, y: 5), controlPoint1: CGPoint(x: 13.21, y: 9), controlPoint2: CGPoint(x: 15, y: 7.21))
                shape.addCurve(to: CGPoint(x: 14.13, y: 2.53), controlPoint1: CGPoint(x: 15, y: 4.06), controlPoint2: CGPoint(x: 14.66, y: 3.21))
                shape.addCurve(to: CGPoint(x: 19.38, y: 6), controlPoint1: CGPoint(x: 16.52, y: 3.34), controlPoint2: CGPoint(x: 18.34, y: 4.92))
                shape.addCurve(to: CGPoint(x: 11, y: 10), controlPoint1: CGPoint(x: 17.92, y: 7.52), controlPoint2: CGPoint(x: 14.94, y: 10))
                shape.addLine(to: CGPoint(x: 11, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 10))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsvideo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 16)
        context.translateBy(x: -1236, y: -545)
        
        /// gridicons-video
        do {
            context.saveGState()
            context.translateBy(x: 1236, y: 545)
            
            /// video
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addCurve(to: CGPoint(x: 2, y: 16), controlPoint1: CGPoint(x: 0, y: 15.11), controlPoint2: CGPoint(x: 0.9, y: 16))
                shape.addLine(to: CGPoint(x: 2, y: 14))
                shape.addLine(to: CGPoint(x: 4, y: 14))
                shape.addLine(to: CGPoint(x: 4, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 19.11, y: 16), controlPoint2: CGPoint(x: 20, y: 15.11))
                shape.addLine(to: CGPoint(x: 20, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 20, y: 0.9), controlPoint2: CGPoint(x: 19.11, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 4, y: 12))
                shape.addLine(to: CGPoint(x: 2, y: 12))
                shape.addLine(to: CGPoint(x: 2, y: 9))
                shape.addLine(to: CGPoint(x: 4, y: 9))
                shape.addLine(to: CGPoint(x: 4, y: 12))
                shape.addLine(to: CGPoint(x: 4, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 4, y: 7))
                shape.addLine(to: CGPoint(x: 2, y: 7))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 4, y: 4))
                shape.addLine(to: CGPoint(x: 4, y: 7))
                shape.addLine(to: CGPoint(x: 4, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 11))
                shape.addLine(to: CGPoint(x: 8, y: 5))
                shape.addLine(to: CGPoint(x: 12.5, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 11))
                shape.addLine(to: CGPoint(x: 8, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 12))
                shape.addLine(to: CGPoint(x: 16, y: 12))
                shape.addLine(to: CGPoint(x: 16, y: 9))
                shape.addLine(to: CGPoint(x: 18, y: 9))
                shape.addLine(to: CGPoint(x: 18, y: 12))
                shape.addLine(to: CGPoint(x: 18, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 7))
                shape.addLine(to: CGPoint(x: 16, y: 7))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 18, y: 7))
                shape.addLine(to: CGPoint(x: 18, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 7))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsvideocamera(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 14)
        context.translateBy(x: -1206, y: -545)
        
        /// gridicons-video-camera
        do {
            context.saveGState()
            context.translateBy(x: 1206, y: 545)
            
            /// video-camera
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 15, y: 4))
                shape.addLine(to: CGPoint(x: 15, y: 2))
                shape.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 15, y: 0.9), controlPoint2: CGPoint(x: 14.11, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addCurve(to: CGPoint(x: 2, y: 14), controlPoint1: CGPoint(x: 0, y: 13.11), controlPoint2: CGPoint(x: 0.9, y: 14))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.addCurve(to: CGPoint(x: 15, y: 12), controlPoint1: CGPoint(x: 14.11, y: 14), controlPoint2: CGPoint(x: 15, y: 13.11))
                shape.addLine(to: CGPoint(x: 15, y: 10))
                shape.addLine(to: CGPoint(x: 20, y: 14))
                shape.addLine(to: CGPoint(x: 20, y: 0))
                shape.addLine(to: CGPoint(x: 15, y: 4))
                shape.addLine(to: CGPoint(x: 15, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 4))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsuser(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -1180, y: -545)
        
        /// gridicons-user
        do {
            context.saveGState()
            context.translateBy(x: 1180, y: 545)
            
            /// user
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 8, y: 0))
                shape.addCurve(to: CGPoint(x: 12, y: 4), controlPoint1: CGPoint(x: 10.21, y: 0), controlPoint2: CGPoint(x: 12, y: 1.79))
                shape.addCurve(to: CGPoint(x: 8, y: 8), controlPoint1: CGPoint(x: 12, y: 6.21), controlPoint2: CGPoint(x: 10.21, y: 8))
                shape.addCurve(to: CGPoint(x: 4, y: 4), controlPoint1: CGPoint(x: 5.79, y: 8), controlPoint2: CGPoint(x: 4, y: 6.21))
                shape.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 4, y: 1.79), controlPoint2: CGPoint(x: 5.79, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 16))
                shape.addCurve(to: CGPoint(x: 16, y: 14), controlPoint1: CGPoint(x: 8, y: 16), controlPoint2: CGPoint(x: 16, y: 16))
                shape.addCurve(to: CGPoint(x: 8, y: 9), controlPoint1: CGPoint(x: 16, y: 11.6), controlPoint2: CGPoint(x: 12.1, y: 9))
                shape.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 3.9, y: 9), controlPoint2: CGPoint(x: 0, y: 11.6))
                shape.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 0, y: 16), controlPoint2: CGPoint(x: 8, y: 16))
                shape.addLine(to: CGPoint(x: 8, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 16))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsusercircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1150, y: -545)
        
        /// gridicons-user-circle
        do {
            context.saveGState()
            context.translateBy(x: 1150, y: 545)
            
            /// user-circle
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 18.5))
                shape.addCurve(to: CGPoint(x: 1.5, y: 10), controlPoint1: CGPoint(x: 5.31, y: 18.5), controlPoint2: CGPoint(x: 1.5, y: 14.69))
                shape.addCurve(to: CGPoint(x: 10, y: 1.5), controlPoint1: CGPoint(x: 1.5, y: 5.31), controlPoint2: CGPoint(x: 5.31, y: 1.5))
                shape.addCurve(to: CGPoint(x: 18.5, y: 10), controlPoint1: CGPoint(x: 14.69, y: 1.5), controlPoint2: CGPoint(x: 18.5, y: 5.31))
                shape.addCurve(to: CGPoint(x: 10, y: 18.5), controlPoint1: CGPoint(x: 18.5, y: 14.69), controlPoint2: CGPoint(x: 14.69, y: 18.5))
                shape.addLine(to: CGPoint(x: 10, y: 18.5))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 10.5))
                shape.addCurve(to: CGPoint(x: 4.5, y: 14), controlPoint1: CGPoint(x: 6.96, y: 10.5), controlPoint2: CGPoint(x: 4.5, y: 12.23))
                shape.addCurve(to: CGPoint(x: 10, y: 17.5), controlPoint1: CGPoint(x: 4.5, y: 15.77), controlPoint2: CGPoint(x: 6.96, y: 17.5))
                shape.addCurve(to: CGPoint(x: 15.5, y: 14), controlPoint1: CGPoint(x: 13.04, y: 17.5), controlPoint2: CGPoint(x: 15.5, y: 15.77))
                shape.addCurve(to: CGPoint(x: 10, y: 10.5), controlPoint1: CGPoint(x: 15.5, y: 12.23), controlPoint2: CGPoint(x: 13.04, y: 10.5))
                shape.addLine(to: CGPoint(x: 10, y: 10.5))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 10))
                shape.addCurve(to: CGPoint(x: 13, y: 7), controlPoint1: CGPoint(x: 11.66, y: 10), controlPoint2: CGPoint(x: 13, y: 8.66))
                shape.addCurve(to: CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 13, y: 5.34), controlPoint2: CGPoint(x: 11.66, y: 4))
                shape.addCurve(to: CGPoint(x: 7, y: 7), controlPoint1: CGPoint(x: 8.34, y: 4), controlPoint2: CGPoint(x: 7, y: 5.34))
                shape.addCurve(to: CGPoint(x: 10, y: 10), controlPoint1: CGPoint(x: 7, y: 8.66), controlPoint2: CGPoint(x: 8.34, y: 10))
                shape.addLine(to: CGPoint(x: 10, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 10))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsuseradd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 16)
        context.translateBy(x: -1118, y: -545)
        
        /// gridicons-user-add
        do {
            context.saveGState()
            context.translateBy(x: 1118, y: 545)
            
            /// gridicons-user-add
            do {
                context.saveGState()
                
                /// Artwork
                do {
                    context.saveGState()
                    
                    /// Artwork-2
                    do {
                        context.saveGState()
                        
                        /// Artwork-3
                        do {
                            context.saveGState()
                            context.translateBy(x: 6, y: 0)
                            
                            /// Oval
                            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8, height: 8))
                            context.saveGState()
                            context.translateBy(x: 4, y: 0)
                            UIColor.black.setFill()
                            oval.fill()
                            context.restoreGState()
                            
                            /// Shape
                            let shape = UIBezierPath()
                            shape.move(to: CGPoint(x: 8, y: 7))
                            shape.addCurve(to: CGPoint(x: 16, y: 5), controlPoint1: CGPoint(x: 8, y: 7), controlPoint2: CGPoint(x: 16, y: 7))
                            shape.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 16, y: 2.6), controlPoint2: CGPoint(x: 12.1, y: 0))
                            shape.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 3.9, y: 0), controlPoint2: CGPoint(x: 0, y: 2.6))
                            shape.addCurve(to: CGPoint(x: 8, y: 7), controlPoint1: CGPoint(x: 0, y: 7), controlPoint2: CGPoint(x: 8, y: 7))
                            shape.addLine(to: CGPoint(x: 8, y: 7))
                            shape.close()
                            shape.move(to: CGPoint(x: 8, y: 7))
                            context.saveGState()
                            context.translateBy(x: 0, y: 9)
                            shape.usesEvenOddFillRule = true
                            UIColor.black.setFill()
                            shape.fill()
                            context.restoreGState()
                            
                            context.restoreGState()
                        }
                        
                        /// Shape
                        let shape2 = UIBezierPath()
                        shape2.move(to: CGPoint(x: 5, y: 3))
                        shape2.addLine(to: CGPoint(x: 5, y: 0))
                        shape2.addLine(to: CGPoint(x: 3, y: 0))
                        shape2.addLine(to: CGPoint(x: 3, y: 3))
                        shape2.addLine(to: CGPoint(x: 0, y: 3))
                        shape2.addLine(to: CGPoint(x: 0, y: 5))
                        shape2.addLine(to: CGPoint(x: 3, y: 5))
                        shape2.addLine(to: CGPoint(x: 3, y: 8))
                        shape2.addLine(to: CGPoint(x: 5, y: 8))
                        shape2.addLine(to: CGPoint(x: 5, y: 5))
                        shape2.addLine(to: CGPoint(x: 8, y: 5))
                        shape2.addLine(to: CGPoint(x: 8, y: 3))
                        shape2.addLine(to: CGPoint(x: 5, y: 3))
                        shape2.close()
                        shape2.move(to: CGPoint(x: 5, y: 3))
                        context.saveGState()
                        context.translateBy(x: 0, y: 3)
                        shape2.usesEvenOddFillRule = true
                        UIColor.black.setFill()
                        shape2.fill()
                        context.restoreGState()
                        
                        context.restoreGState()
                    }
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsundo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -1092, y: -545)
        
        /// gridicons-undo
        do {
            context.saveGState()
            context.translateBy(x: 1092, y: 545)
            
            /// undo
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 14.14, y: 1.76))
                shape.addCurve(to: CGPoint(x: 9.9, y: 0), controlPoint1: CGPoint(x: 12.97, y: 0.58), controlPoint2: CGPoint(x: 11.44, y: 0))
                shape.addCurve(to: CGPoint(x: 5.66, y: 1.76), controlPoint1: CGPoint(x: 8.36, y: 0), controlPoint2: CGPoint(x: 6.83, y: 0.59))
                shape.addLine(to: CGPoint(x: 2, y: 5.41))
                shape.addLine(to: CGPoint(x: 2, y: 1.83))
                shape.addLine(to: CGPoint(x: 0, y: 1.83))
                shape.addLine(to: CGPoint(x: 0, y: 8.83))
                shape.addLine(to: CGPoint(x: 7, y: 8.83))
                shape.addLine(to: CGPoint(x: 7, y: 6.83))
                shape.addLine(to: CGPoint(x: 3.41, y: 6.83))
                shape.addLine(to: CGPoint(x: 7.07, y: 3.17))
                shape.addCurve(to: CGPoint(x: 9.9, y: 2), controlPoint1: CGPoint(x: 7.83, y: 2.42), controlPoint2: CGPoint(x: 8.83, y: 2))
                shape.addCurve(to: CGPoint(x: 12.73, y: 3.17), controlPoint1: CGPoint(x: 10.97, y: 2), controlPoint2: CGPoint(x: 11.97, y: 2.42))
                shape.addCurve(to: CGPoint(x: 12.73, y: 8.83), controlPoint1: CGPoint(x: 14.29, y: 4.73), controlPoint2: CGPoint(x: 14.29, y: 7.27))
                shape.addLine(to: CGPoint(x: 7.36, y: 14.19))
                shape.addLine(to: CGPoint(x: 8.78, y: 15.61))
                shape.addLine(to: CGPoint(x: 14.14, y: 10.24))
                shape.addCurve(to: CGPoint(x: 14.14, y: 1.76), controlPoint1: CGPoint(x: 16.49, y: 7.9), controlPoint2: CGPoint(x: 16.49, y: 4.1))
                shape.addLine(to: CGPoint(x: 14.14, y: 1.76))
                shape.close()
                shape.move(to: CGPoint(x: 14.14, y: 1.76))
                context.saveGState()
                context.translateBy(x: 0, y: 0.17)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsunderline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 18)
        context.translateBy(x: -1066, y: -545)
        
        /// gridicons-underline
        do {
            context.saveGState()
            context.translateBy(x: 1066, y: 545)
            
            /// underline
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 0, y: 16))
                shape.addLine(to: CGPoint(x: 0, y: 18))
                shape.addLine(to: CGPoint(x: 16, y: 18))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 0, y: 16))
                shape.addLine(to: CGPoint(x: 0, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 0))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.addCurve(to: CGPoint(x: 8, y: 14), controlPoint1: CGPoint(x: 14, y: 11.31), controlPoint2: CGPoint(x: 11.31, y: 14))
                shape.addCurve(to: CGPoint(x: 2, y: 8), controlPoint1: CGPoint(x: 4.69, y: 14), controlPoint2: CGPoint(x: 2, y: 11.31))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addLine(to: CGPoint(x: 5, y: 0))
                shape.addLine(to: CGPoint(x: 5, y: 8))
                shape.addCurve(to: CGPoint(x: 8, y: 11), controlPoint1: CGPoint(x: 5, y: 9.65), controlPoint2: CGPoint(x: 6.35, y: 11))
                shape.addCurve(to: CGPoint(x: 11, y: 8), controlPoint1: CGPoint(x: 9.65, y: 11), controlPoint2: CGPoint(x: 11, y: 9.65))
                shape.addLine(to: CGPoint(x: 11, y: 0))
                shape.addLine(to: CGPoint(x: 14, y: 0))
                shape.addLine(to: CGPoint(x: 14, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconstypes(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        context.translateBy(x: -1035, y: -545)
        
        /// gridicons-types
        do {
            context.saveGState()
            context.translateBy(x: 1035, y: 545)
            
            /// types
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 21, y: 16))
                shape.addCurve(to: CGPoint(x: 16, y: 21), controlPoint1: CGPoint(x: 21, y: 18.76), controlPoint2: CGPoint(x: 18.76, y: 21))
                shape.addCurve(to: CGPoint(x: 11, y: 16), controlPoint1: CGPoint(x: 13.24, y: 21), controlPoint2: CGPoint(x: 11, y: 18.76))
                shape.addCurve(to: CGPoint(x: 16, y: 11), controlPoint1: CGPoint(x: 11, y: 13.24), controlPoint2: CGPoint(x: 13.24, y: 11))
                shape.addCurve(to: CGPoint(x: 21, y: 16), controlPoint1: CGPoint(x: 18.76, y: 11), controlPoint2: CGPoint(x: 21, y: 13.24))
                shape.addLine(to: CGPoint(x: 21, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 5.5))
                shape.addLine(to: CGPoint(x: 9.3, y: 5.5))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 5.5, y: 10))
                shape.addLine(to: CGPoint(x: 5.5, y: 5.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 5.5))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 9.58))
                shape.addLine(to: CGPoint(x: 15, y: 7))
                shape.addLine(to: CGPoint(x: 7, y: 7))
                shape.addLine(to: CGPoint(x: 7, y: 15))
                shape.addLine(to: CGPoint(x: 9.58, y: 15))
                shape.addCurve(to: CGPoint(x: 15, y: 9.58), controlPoint1: CGPoint(x: 10.02, y: 12.22), controlPoint2: CGPoint(x: 12.22, y: 10.02))
                shape.addLine(to: CGPoint(x: 15, y: 9.58))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 9.58))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconstrophy(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -1005, y: -545)
        
        /// gridicons-trophy
        do {
            context.saveGState()
            context.translateBy(x: 1005, y: 545)
            
            /// trophy
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 16, y: 2.06))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 2.06))
                shape.addLine(to: CGPoint(x: 0, y: 2.06))
                shape.addLine(to: CGPoint(x: 0, y: 5))
                shape.addCurve(to: CGPoint(x: 4.32, y: 9.93), controlPoint1: CGPoint(x: 0, y: 7.52), controlPoint2: CGPoint(x: 1.89, y: 9.6))
                shape.addCurve(to: CGPoint(x: 9, y: 13.91), controlPoint1: CGPoint(x: 5.02, y: 11.99), controlPoint2: CGPoint(x: 6.81, y: 13.54))
                shape.addLine(to: CGPoint(x: 9, y: 15))
                shape.addCurve(to: CGPoint(x: 7, y: 17), controlPoint1: CGPoint(x: 9, y: 16.11), controlPoint2: CGPoint(x: 8.11, y: 17))
                shape.addLine(to: CGPoint(x: 6, y: 17))
                shape.addLine(to: CGPoint(x: 6, y: 19))
                shape.addLine(to: CGPoint(x: 7, y: 19))
                shape.addLine(to: CGPoint(x: 9, y: 19))
                shape.addLine(to: CGPoint(x: 11, y: 19))
                shape.addLine(to: CGPoint(x: 13, y: 19))
                shape.addLine(to: CGPoint(x: 14, y: 19))
                shape.addLine(to: CGPoint(x: 14, y: 17))
                shape.addLine(to: CGPoint(x: 13, y: 17))
                shape.addCurve(to: CGPoint(x: 11, y: 15), controlPoint1: CGPoint(x: 11.9, y: 17), controlPoint2: CGPoint(x: 11, y: 16.11))
                shape.addLine(to: CGPoint(x: 11, y: 13.91))
                shape.addCurve(to: CGPoint(x: 15.68, y: 9.93), controlPoint1: CGPoint(x: 13.19, y: 13.54), controlPoint2: CGPoint(x: 14.98, y: 11.99))
                shape.addCurve(to: CGPoint(x: 20, y: 5), controlPoint1: CGPoint(x: 18.11, y: 9.6), controlPoint2: CGPoint(x: 20, y: 7.52))
                shape.addLine(to: CGPoint(x: 20, y: 2.06))
                shape.addLine(to: CGPoint(x: 16, y: 2.06))
                shape.addLine(to: CGPoint(x: 16, y: 2.06))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 5))
                shape.addLine(to: CGPoint(x: 2, y: 4.06))
                shape.addLine(to: CGPoint(x: 4, y: 4.06))
                shape.addLine(to: CGPoint(x: 4, y: 7.83))
                shape.addCurve(to: CGPoint(x: 2, y: 5), controlPoint1: CGPoint(x: 2.84, y: 7.42), controlPoint2: CGPoint(x: 2, y: 6.3))
                shape.addLine(to: CGPoint(x: 2, y: 5))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 5))
                shape.addCurve(to: CGPoint(x: 16, y: 7.83), controlPoint1: CGPoint(x: 18, y: 6.3), controlPoint2: CGPoint(x: 17.16, y: 7.42))
                shape.addLine(to: CGPoint(x: 16, y: 4.06))
                shape.addLine(to: CGPoint(x: 18, y: 4.06))
                shape.addLine(to: CGPoint(x: 18, y: 5))
                shape.addLine(to: CGPoint(x: 18, y: 5))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconstrash(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 19)
        context.translateBy(x: -981, y: -545)
        
        /// gridicons-trash
        do {
            context.saveGState()
            context.translateBy(x: 981, y: 545)
            
            /// trash
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 1.19, y: 6))
                shape.addLine(to: CGPoint(x: 12.81, y: 6))
                shape.addLine(to: CGPoint(x: 12.12, y: 17.13))
                shape.addCurve(to: CGPoint(x: 10.12, y: 19), controlPoint1: CGPoint(x: 12.05, y: 18.18), controlPoint2: CGPoint(x: 11.18, y: 19))
                shape.addLine(to: CGPoint(x: 3.88, y: 19))
                shape.addCurve(to: CGPoint(x: 1.88, y: 17.13), controlPoint1: CGPoint(x: 2.82, y: 19), controlPoint2: CGPoint(x: 1.95, y: 18.18))
                shape.addLine(to: CGPoint(x: 1.19, y: 6))
                shape.addLine(to: CGPoint(x: 1.19, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 5))
                shape.addLine(to: CGPoint(x: 0, y: 5))
                shape.addLine(to: CGPoint(x: 0, y: 3))
                shape.addLine(to: CGPoint(x: 3, y: 3))
                shape.addLine(to: CGPoint(x: 3, y: 2))
                shape.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 3, y: 0.9), controlPoint2: CGPoint(x: 3.9, y: 0))
                shape.addLine(to: CGPoint(x: 9, y: 0))
                shape.addCurve(to: CGPoint(x: 11, y: 2), controlPoint1: CGPoint(x: 10.11, y: 0), controlPoint2: CGPoint(x: 11, y: 0.9))
                shape.addLine(to: CGPoint(x: 11, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 3))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 3))
                shape.addLine(to: CGPoint(x: 9, y: 3))
                shape.addLine(to: CGPoint(x: 9, y: 2))
                shape.addLine(to: CGPoint(x: 5, y: 2))
                shape.addLine(to: CGPoint(x: 5, y: 3))
                shape.addLine(to: CGPoint(x: 5, y: 3))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 3))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconstime(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -951, y: -545)
        
        /// gridicons-time
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 545)
            
            /// time
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.41, y: 2), controlPoint2: CGPoint(x: 18, y: 5.59))
                shape.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.41), controlPoint2: CGPoint(x: 14.41, y: 18))
                shape.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.59, y: 18), controlPoint2: CGPoint(x: 2, y: 14.41))
                shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.59), controlPoint2: CGPoint(x: 5.59, y: 2))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 13.8, y: 13.4))
                shape.addLine(to: CGPoint(x: 11, y: 9.67))
                shape.addLine(to: CGPoint(x: 11, y: 5))
                shape.addLine(to: CGPoint(x: 9, y: 5))
                shape.addLine(to: CGPoint(x: 9, y: 10.33))
                shape.addLine(to: CGPoint(x: 12.2, y: 14.6))
                shape.addLine(to: CGPoint(x: 13.8, y: 13.4))
                shape.addLine(to: CGPoint(x: 13.8, y: 13.4))
                shape.close()
                shape.move(to: CGPoint(x: 13.8, y: 13.4))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsthumbsup(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1300, y: -515)
        
        /// gridicons-thumbs-up
        do {
            context.saveGState()
            context.translateBy(x: 1300, y: 515)
            
            /// thumbs-up
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 4.7, y: 20))
                shape.addLine(to: CGPoint(x: 0, y: 20))
                shape.addLine(to: CGPoint(x: 0, y: 11))
                shape.addLine(to: CGPoint(x: 2, y: 11))
                shape.addLine(to: CGPoint(x: 4.7, y: 20))
                shape.addLine(to: CGPoint(x: 4.7, y: 20))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 7))
                shape.addLine(to: CGPoint(x: 12, y: 7))
                shape.addLine(to: CGPoint(x: 12, y: 3))
                shape.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 12, y: 1.34), controlPoint2: CGPoint(x: 10.66, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 4))
                shape.addLine(to: CGPoint(x: 5.1, y: 7.63))
                shape.addCurve(to: CGPoint(x: 4, y: 10.76), controlPoint1: CGPoint(x: 4.39, y: 8.52), controlPoint2: CGPoint(x: 4, y: 9.62))
                shape.addLine(to: CGPoint(x: 4, y: 12))
                shape.addLine(to: CGPoint(x: 6.1, y: 19))
                shape.addLine(to: CGPoint(x: 14.44, y: 19))
                shape.addCurve(to: CGPoint(x: 18.32, y: 15.97), controlPoint1: CGPoint(x: 16.27, y: 19), controlPoint2: CGPoint(x: 17.87, y: 17.75))
                shape.addLine(to: CGPoint(x: 19.94, y: 9.48))
                shape.addCurve(to: CGPoint(x: 18, y: 7), controlPoint1: CGPoint(x: 20.25, y: 8.22), controlPoint2: CGPoint(x: 19.3, y: 7))
                shape.addLine(to: CGPoint(x: 18, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 7))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsthemes(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1270, y: -515)
        
        /// gridicons-themes
        do {
            context.saveGState()
            context.translateBy(x: 1270, y: 515)
            
            /// themes
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 4.89))
                shape.addLine(to: CGPoint(x: 0, y: 18))
                shape.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.1), controlPoint2: CGPoint(x: 0.9, y: 20))
                shape.addLine(to: CGPoint(x: 14, y: 20))
                shape.addCurve(to: CGPoint(x: 16, y: 18), controlPoint1: CGPoint(x: 15.11, y: 20), controlPoint2: CGPoint(x: 16, y: 19.11))
                shape.addLine(to: CGPoint(x: 16, y: 18))
                shape.addLine(to: CGPoint(x: 2, y: 18))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addCurve(to: CGPoint(x: 4, y: 2), controlPoint1: CGPoint(x: 4.89, y: 0), controlPoint2: CGPoint(x: 4, y: 0.9))
                shape.addLine(to: CGPoint(x: 4, y: 14))
                shape.addCurve(to: CGPoint(x: 6, y: 16), controlPoint1: CGPoint(x: 4, y: 15.11), controlPoint2: CGPoint(x: 4.89, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 19.11, y: 16), controlPoint2: CGPoint(x: 20, y: 15.11))
                shape.addLine(to: CGPoint(x: 20, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 20, y: 0.9), controlPoint2: CGPoint(x: 19.11, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 6, y: 14))
                shape.addLine(to: CGPoint(x: 6, y: 7))
                shape.addLine(to: CGPoint(x: 13, y: 7))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 15, y: 14))
                shape.addLine(to: CGPoint(x: 15, y: 7))
                shape.addLine(to: CGPoint(x: 18, y: 7))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 5))
                shape.addLine(to: CGPoint(x: 6, y: 5))
                shape.addLine(to: CGPoint(x: 6, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 5))
                shape.addLine(to: CGPoint(x: 18, y: 5))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconstextcolor(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 19)
        context.translateBy(x: -1242, y: -515)
        
        /// gridicons-text-color
        do {
            context.saveGState()
            context.translateBy(x: 1242, y: 515)
            
            /// text-color
            do {
                context.saveGState()
                
                /// Group
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint.zero)
                    shape.addLine(to: CGPoint(x: 18, y: 0))
                    shape.addLine(to: CGPoint(x: 18, y: 3))
                    shape.addLine(to: CGPoint(x: 0, y: 3))
                    shape.addLine(to: CGPoint.zero)
                    shape.addLine(to: CGPoint.zero)
                    shape.close()
                    shape.move(to: CGPoint.zero)
                    context.saveGState()
                    context.translateBy(x: 0, y: 16)
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    /// Shape
                    let shape2 = UIBezierPath()
                    shape2.move(to: CGPoint(x: 11.06, y: 14))
                    shape2.addLine(to: CGPoint(x: 14.49, y: 14))
                    shape2.addLine(to: CGPoint(x: 9.24, y: 0))
                    shape2.addLine(to: CGPoint(x: 5.24, y: 0))
                    shape2.addLine(to: CGPoint(x: 0, y: 14))
                    shape2.addLine(to: CGPoint(x: 3.43, y: 14))
                    shape2.addLine(to: CGPoint(x: 4.49, y: 10.5))
                    shape2.addLine(to: CGPoint(x: 10, y: 10.5))
                    shape2.addLine(to: CGPoint(x: 11.06, y: 14))
                    shape2.addLine(to: CGPoint(x: 11.06, y: 14))
                    shape2.close()
                    shape2.move(to: CGPoint(x: 9.11, y: 8))
                    shape2.addLine(to: CGPoint(x: 5.38, y: 8))
                    shape2.addLine(to: CGPoint(x: 7.25, y: 2.28))
                    shape2.addLine(to: CGPoint(x: 9.11, y: 8))
                    shape2.addLine(to: CGPoint(x: 9.11, y: 8))
                    shape2.close()
                    shape2.move(to: CGPoint(x: 9.11, y: 8))
                    context.saveGState()
                    context.translateBy(x: 1.76, y: 0)
                    shape2.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape2.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconstag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1211, y: -515)
        
        /// gridicons-tag
        do {
            context.saveGState()
            context.translateBy(x: 1211, y: 515)
            
            /// tag
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 17.99, y: 0))
                shape.addLine(to: CGPoint(x: 10.91, y: 0))
                shape.addCurve(to: CGPoint(x: 9.49, y: 0.59), controlPoint1: CGPoint(x: 10.38, y: 0), controlPoint2: CGPoint(x: 9.87, y: 0.21))
                shape.addLine(to: CGPoint(x: 0.59, y: 9.49))
                shape.addCurve(to: CGPoint(x: 0.59, y: 12.32), controlPoint1: CGPoint(x: -0.2, y: 10.27), controlPoint2: CGPoint(x: -0.2, y: 11.54))
                shape.addLine(to: CGPoint(x: 7.67, y: 19.41))
                shape.addCurve(to: CGPoint(x: 10.5, y: 19.41), controlPoint1: CGPoint(x: 8.45, y: 20.19), controlPoint2: CGPoint(x: 9.72, y: 20.19))
                shape.addLine(to: CGPoint(x: 19.41, y: 10.5))
                shape.addCurve(to: CGPoint(x: 19.99, y: 9.09), controlPoint1: CGPoint(x: 19.78, y: 10.13), controlPoint2: CGPoint(x: 19.99, y: 9.62))
                shape.addLine(to: CGPoint(x: 19.99, y: 2))
                shape.addCurve(to: CGPoint(x: 17.99, y: 0), controlPoint1: CGPoint(x: 19.99, y: 0.9), controlPoint2: CGPoint(x: 19.1, y: 0))
                shape.addLine(to: CGPoint(x: 17.99, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 6.99))
                shape.addCurve(to: CGPoint(x: 13, y: 4.99), controlPoint1: CGPoint(x: 13.89, y: 6.99), controlPoint2: CGPoint(x: 13, y: 6.1))
                shape.addCurve(to: CGPoint(x: 15, y: 2.99), controlPoint1: CGPoint(x: 13, y: 3.89), controlPoint2: CGPoint(x: 13.89, y: 2.99))
                shape.addCurve(to: CGPoint(x: 17, y: 4.99), controlPoint1: CGPoint(x: 16.1, y: 2.99), controlPoint2: CGPoint(x: 17, y: 3.89))
                shape.addCurve(to: CGPoint(x: 15, y: 6.99), controlPoint1: CGPoint(x: 17, y: 6.1), controlPoint2: CGPoint(x: 16.1, y: 6.99))
                shape.addLine(to: CGPoint(x: 15, y: 6.99))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 6.99))
                context.saveGState()
                context.translateBy(x: 0.01, y: 0.01)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconstablet(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 20)
        context.translateBy(x: -1185, y: -515)
        
        /// gridicons-tablet
        do {
            context.saveGState()
            context.translateBy(x: 1185, y: 515)
            
            /// tablet
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 14, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 18))
                shape.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.1), controlPoint2: CGPoint(x: 0.9, y: 20))
                shape.addLine(to: CGPoint(x: 14, y: 20))
                shape.addCurve(to: CGPoint(x: 16, y: 18), controlPoint1: CGPoint(x: 15.1, y: 20), controlPoint2: CGPoint(x: 16, y: 19.1))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 16, y: 0.9), controlPoint2: CGPoint(x: 15.1, y: 0))
                shape.addLine(to: CGPoint(x: 14, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 19))
                shape.addLine(to: CGPoint(x: 7, y: 19))
                shape.addLine(to: CGPoint(x: 7, y: 18))
                shape.addLine(to: CGPoint(x: 9, y: 18))
                shape.addLine(to: CGPoint(x: 9, y: 19))
                shape.addLine(to: CGPoint(x: 9, y: 19))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 17))
                shape.addLine(to: CGPoint(x: 14, y: 17))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 17))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconssync(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 16)
        context.translateBy(x: -1151, y: -515)
        
        /// gridicons-sync
        do {
            context.saveGState()
            context.translateBy(x: 1151, y: 515)
            
            /// sync
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 23, y: 9.5))
                shape.addLine(to: CGPoint(x: 19.91, y: 12.59))
                shape.addLine(to: CGPoint(x: 18.5, y: 14))
                shape.addLine(to: CGPoint(x: 14, y: 9.5))
                shape.addLine(to: CGPoint(x: 15.41, y: 8.09))
                shape.addLine(to: CGPoint(x: 17.5, y: 10.17))
                shape.addLine(to: CGPoint(x: 17.5, y: 8))
                shape.addCurve(to: CGPoint(x: 11.5, y: 2), controlPoint1: CGPoint(x: 17.5, y: 4.69), controlPoint2: CGPoint(x: 14.81, y: 2))
                shape.addLine(to: CGPoint(x: 11.5, y: 0))
                shape.addCurve(to: CGPoint(x: 19.5, y: 8), controlPoint1: CGPoint(x: 15.92, y: 0), controlPoint2: CGPoint(x: 19.5, y: 3.58))
                shape.addLine(to: CGPoint(x: 19.5, y: 10.17))
                shape.addLine(to: CGPoint(x: 21.59, y: 8.09))
                shape.addLine(to: CGPoint(x: 23, y: 9.5))
                shape.addLine(to: CGPoint(x: 23, y: 9.5))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 8))
                shape.addLine(to: CGPoint(x: 5.5, y: 5.83))
                shape.addLine(to: CGPoint(x: 7.59, y: 7.91))
                shape.addLine(to: CGPoint(x: 9, y: 6.5))
                shape.addLine(to: CGPoint(x: 4.5, y: 2))
                shape.addLine(to: CGPoint(x: 3.09, y: 3.41))
                shape.addLine(to: CGPoint(x: 0, y: 6.5))
                shape.addLine(to: CGPoint(x: 1.41, y: 7.91))
                shape.addLine(to: CGPoint(x: 3.5, y: 5.83))
                shape.addLine(to: CGPoint(x: 3.5, y: 8))
                shape.addCurve(to: CGPoint(x: 11.5, y: 16), controlPoint1: CGPoint(x: 3.5, y: 12.42), controlPoint2: CGPoint(x: 7.08, y: 16))
                shape.addLine(to: CGPoint(x: 11.5, y: 14))
                shape.addCurve(to: CGPoint(x: 5.5, y: 8), controlPoint1: CGPoint(x: 8.19, y: 14), controlPoint2: CGPoint(x: 5.5, y: 11.31))
                shape.addLine(to: CGPoint(x: 5.5, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 8))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsstrikethrough(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 15)
        context.translateBy(x: -1123, y: -515)
        
        /// gridicons-strikethrough
        do {
            context.saveGState()
            context.translateBy(x: 1123, y: 515)
            
            /// strikethrough
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11.35, y: 7))
                shape.addLine(to: CGPoint(x: 18, y: 7))
                shape.addLine(to: CGPoint(x: 18, y: 9))
                shape.addLine(to: CGPoint(x: 13.39, y: 9))
                shape.addCurve(to: CGPoint(x: 13.75, y: 10.75), controlPoint1: CGPoint(x: 13.63, y: 9.52), controlPoint2: CGPoint(x: 13.75, y: 10.09))
                shape.addCurve(to: CGPoint(x: 12.33, y: 13.86), controlPoint1: CGPoint(x: 13.75, y: 12.07), controlPoint2: CGPoint(x: 13.28, y: 13.1))
                shape.addCurve(to: CGPoint(x: 8.38, y: 15), controlPoint1: CGPoint(x: 11.39, y: 14.62), controlPoint2: CGPoint(x: 10.07, y: 15))
                shape.addCurve(to: CGPoint(x: 4.24, y: 14.12), controlPoint1: CGPoint(x: 6.82, y: 15), controlPoint2: CGPoint(x: 5.44, y: 14.71))
                shape.addLine(to: CGPoint(x: 4.24, y: 11.25))
                shape.addCurve(to: CGPoint(x: 6.74, y: 12.18), controlPoint1: CGPoint(x: 5.23, y: 11.69), controlPoint2: CGPoint(x: 6.06, y: 12))
                shape.addCurve(to: CGPoint(x: 8.62, y: 12.45), controlPoint1: CGPoint(x: 7.43, y: 12.36), controlPoint2: CGPoint(x: 8.05, y: 12.45))
                shape.addCurve(to: CGPoint(x: 10.18, y: 12.06), controlPoint1: CGPoint(x: 9.3, y: 12.45), controlPoint2: CGPoint(x: 9.82, y: 12.32))
                shape.addCurve(to: CGPoint(x: 10.72, y: 10.9), controlPoint1: CGPoint(x: 10.54, y: 11.8), controlPoint2: CGPoint(x: 10.72, y: 11.41))
                shape.addCurve(to: CGPoint(x: 10.48, y: 10.14), controlPoint1: CGPoint(x: 10.72, y: 10.61), controlPoint2: CGPoint(x: 10.64, y: 10.36))
                shape.addCurve(to: CGPoint(x: 9.78, y: 9.49), controlPoint1: CGPoint(x: 10.32, y: 9.91), controlPoint2: CGPoint(x: 10.09, y: 9.7))
                shape.addCurve(to: CGPoint(x: 8.9, y: 9), controlPoint1: CGPoint(x: 9.6, y: 9.37), controlPoint2: CGPoint(x: 9.3, y: 9.21))
                shape.addLine(to: CGPoint(x: 0, y: 9))
                shape.addLine(to: CGPoint(x: 0, y: 7))
                shape.addLine(to: CGPoint(x: 5.6, y: 7))
                shape.addLine(to: CGPoint(x: 11.35, y: 7))
                shape.addLine(to: CGPoint(x: 11.35, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 7.82, y: 5))
                shape.addCurve(to: CGPoint(x: 7.63, y: 4.76), controlPoint1: CGPoint(x: 7.75, y: 4.92), controlPoint2: CGPoint(x: 7.68, y: 4.84))
                shape.addCurve(to: CGPoint(x: 7.44, y: 4.05), controlPoint1: CGPoint(x: 7.5, y: 4.56), controlPoint2: CGPoint(x: 7.44, y: 4.32))
                shape.addCurve(to: CGPoint(x: 7.91, y: 2.98), controlPoint1: CGPoint(x: 7.44, y: 3.61), controlPoint2: CGPoint(x: 7.59, y: 3.26))
                shape.addCurve(to: CGPoint(x: 9.25, y: 2.57), controlPoint1: CGPoint(x: 8.22, y: 2.71), controlPoint2: CGPoint(x: 8.67, y: 2.57))
                shape.addCurve(to: CGPoint(x: 10.76, y: 2.77), controlPoint1: CGPoint(x: 9.75, y: 2.57), controlPoint2: CGPoint(x: 10.25, y: 2.64))
                shape.addCurve(to: CGPoint(x: 12.69, y: 3.43), controlPoint1: CGPoint(x: 11.27, y: 2.89), controlPoint2: CGPoint(x: 11.91, y: 3.11))
                shape.addLine(to: CGPoint(x: 13.69, y: 1.03))
                shape.addCurve(to: CGPoint(x: 11.53, y: 0.27), controlPoint1: CGPoint(x: 12.93, y: 0.7), controlPoint2: CGPoint(x: 12.21, y: 0.45))
                shape.addCurve(to: CGPoint(x: 9.35, y: 0), controlPoint1: CGPoint(x: 10.84, y: 0.09), controlPoint2: CGPoint(x: 10.11, y: 0))
                shape.addCurve(to: CGPoint(x: 5.73, y: 1.11), controlPoint1: CGPoint(x: 7.81, y: 0), controlPoint2: CGPoint(x: 6.6, y: 0.37))
                shape.addCurve(to: CGPoint(x: 4.41, y: 4.15), controlPoint1: CGPoint(x: 4.85, y: 1.85), controlPoint2: CGPoint(x: 4.41, y: 2.86))
                shape.addCurve(to: CGPoint(x: 4.5, y: 5), controlPoint1: CGPoint(x: 4.41, y: 4.45), controlPoint2: CGPoint(x: 4.45, y: 4.73))
                shape.addLine(to: CGPoint(x: 7.82, y: 5))
                shape.addLine(to: CGPoint(x: 7.82, y: 5))
                shape.close()
                shape.move(to: CGPoint(x: 7.82, y: 5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsstatus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1093, y: -515)
        
        /// gridicons-status
        do {
            context.saveGState()
            context.translateBy(x: 1093, y: 515)
            
            /// status
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.41, y: 2), controlPoint2: CGPoint(x: 18, y: 5.59))
                shape.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.41), controlPoint2: CGPoint(x: 14.41, y: 18))
                shape.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.59, y: 18), controlPoint2: CGPoint(x: 2, y: 14.41))
                shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.59), controlPoint2: CGPoint(x: 5.59, y: 2))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 5.55, y: 11))
                shape.addCurve(to: CGPoint(x: 5.5, y: 11.5), controlPoint1: CGPoint(x: 5.53, y: 11.17), controlPoint2: CGPoint(x: 5.5, y: 11.33))
                shape.addCurve(to: CGPoint(x: 10, y: 16), controlPoint1: CGPoint(x: 5.5, y: 13.99), controlPoint2: CGPoint(x: 7.52, y: 16))
                shape.addCurve(to: CGPoint(x: 14.5, y: 11.5), controlPoint1: CGPoint(x: 12.49, y: 16), controlPoint2: CGPoint(x: 14.5, y: 13.99))
                shape.addCurve(to: CGPoint(x: 14.45, y: 11), controlPoint1: CGPoint(x: 14.5, y: 11.33), controlPoint2: CGPoint(x: 14.47, y: 11.17))
                shape.addLine(to: CGPoint(x: 5.55, y: 11))
                shape.addLine(to: CGPoint(x: 5.55, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 6))
                shape.addCurve(to: CGPoint(x: 7, y: 5), controlPoint1: CGPoint(x: 8, y: 5.45), controlPoint2: CGPoint(x: 7.55, y: 5))
                shape.addLine(to: CGPoint(x: 7, y: 5))
                shape.addCurve(to: CGPoint(x: 6, y: 6), controlPoint1: CGPoint(x: 6.45, y: 5), controlPoint2: CGPoint(x: 6, y: 5.45))
                shape.addLine(to: CGPoint(x: 6, y: 8))
                shape.addCurve(to: CGPoint(x: 7, y: 9), controlPoint1: CGPoint(x: 6, y: 8.55), controlPoint2: CGPoint(x: 6.45, y: 9))
                shape.addLine(to: CGPoint(x: 7, y: 9))
                shape.addCurve(to: CGPoint(x: 8, y: 8), controlPoint1: CGPoint(x: 7.55, y: 9), controlPoint2: CGPoint(x: 8, y: 8.55))
                shape.addLine(to: CGPoint(x: 8, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 8))
                shape.addLine(to: CGPoint(x: 14, y: 6))
                shape.addCurve(to: CGPoint(x: 13, y: 5), controlPoint1: CGPoint(x: 14, y: 5.45), controlPoint2: CGPoint(x: 13.55, y: 5))
                shape.addLine(to: CGPoint(x: 13, y: 5))
                shape.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 12.45, y: 5), controlPoint2: CGPoint(x: 12, y: 5.45))
                shape.addLine(to: CGPoint(x: 12, y: 8))
                shape.addCurve(to: CGPoint(x: 13, y: 9), controlPoint1: CGPoint(x: 12, y: 8.55), controlPoint2: CGPoint(x: 12.45, y: 9))
                shape.addLine(to: CGPoint(x: 13, y: 9))
                shape.addCurve(to: CGPoint(x: 14, y: 8), controlPoint1: CGPoint(x: 13.55, y: 9), controlPoint2: CGPoint(x: 14, y: 8.55))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 8))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsstats(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -1065, y: -515)
        
        /// gridicons-stats
        do {
            context.saveGState()
            context.translateBy(x: 1065, y: 515)
            
            /// stats
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 16))
                shape.addCurve(to: CGPoint(x: 2, y: 18), controlPoint1: CGPoint(x: 0, y: 17.11), controlPoint2: CGPoint(x: 0.9, y: 18))
                shape.addLine(to: CGPoint(x: 16, y: 18))
                shape.addCurve(to: CGPoint(x: 18, y: 16), controlPoint1: CGPoint(x: 17.11, y: 18), controlPoint2: CGPoint(x: 18, y: 17.11))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 18, y: 0.9), controlPoint2: CGPoint(x: 17.11, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 2, y: 16))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 14))
                shape.addLine(to: CGPoint(x: 4, y: 14))
                shape.addLine(to: CGPoint(x: 4, y: 9))
                shape.addLine(to: CGPoint(x: 6, y: 9))
                shape.addLine(to: CGPoint(x: 6, y: 14))
                shape.addLine(to: CGPoint(x: 6, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 14))
                shape.addLine(to: CGPoint(x: 8, y: 14))
                shape.addLine(to: CGPoint(x: 8, y: 4))
                shape.addLine(to: CGPoint(x: 10, y: 4))
                shape.addLine(to: CGPoint(x: 10, y: 14))
                shape.addLine(to: CGPoint(x: 10, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 14))
                shape.addLine(to: CGPoint(x: 12, y: 14))
                shape.addLine(to: CGPoint(x: 12, y: 7))
                shape.addLine(to: CGPoint(x: 14, y: 7))
                shape.addLine(to: CGPoint(x: 14, y: 14))
                shape.addLine(to: CGPoint(x: 14, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 14))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsstatsalt(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -1037, y: -515)
        
        /// gridicons-stats-alt
        do {
            context.saveGState()
            context.translateBy(x: 1037, y: 515)
            
            /// stats-alt
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 18))
                shape.addLine(to: CGPoint(x: 0, y: 18))
                shape.addLine(to: CGPoint(x: 0, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 18))
                shape.addLine(to: CGPoint(x: 18, y: 18))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 7))
                shape.addLine(to: CGPoint(x: 1, y: 7))
                shape.addLine(to: CGPoint(x: 1, y: 14))
                shape.addLine(to: CGPoint(x: 5, y: 14))
                shape.addLine(to: CGPoint(x: 5, y: 7))
                shape.addLine(to: CGPoint(x: 5, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 0))
                shape.addLine(to: CGPoint(x: 7, y: 0))
                shape.addLine(to: CGPoint(x: 7, y: 14))
                shape.addLine(to: CGPoint(x: 11, y: 14))
                shape.addLine(to: CGPoint(x: 11, y: 0))
                shape.addLine(to: CGPoint(x: 11, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 17, y: 3))
                shape.addLine(to: CGPoint(x: 13, y: 3))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 17, y: 14))
                shape.addLine(to: CGPoint(x: 17, y: 3))
                shape.addLine(to: CGPoint(x: 17, y: 3))
                shape.close()
                shape.move(to: CGPoint(x: 17, y: 3))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsstar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -1007, y: -515)
        
        /// gridicons-star
        do {
            context.saveGState()
            context.translateBy(x: 1007, y: 515)
            
            /// star
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 12.58, y: 6.95))
                shape.addLine(to: CGPoint(x: 20, y: 7.26))
                shape.addLine(to: CGPoint(x: 14.18, y: 11.86))
                shape.addLine(to: CGPoint(x: 16.18, y: 19))
                shape.addLine(to: CGPoint(x: 10, y: 14.89))
                shape.addLine(to: CGPoint(x: 3.82, y: 19))
                shape.addLine(to: CGPoint(x: 5.82, y: 11.86))
                shape.addLine(to: CGPoint(x: 0, y: 7.26))
                shape.addLine(to: CGPoint(x: 7.42, y: 6.95))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsstaroutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -977, y: -515)
        
        /// gridicons-star-outline
        do {
            context.saveGState()
            context.translateBy(x: 977, y: 515)
            
            /// star-outline
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 4.31))
                shape.addLine(to: CGPoint(x: 11.18, y: 7.48))
                shape.addLine(to: CGPoint(x: 11.52, y: 8.41))
                shape.addLine(to: CGPoint(x: 12.52, y: 8.45))
                shape.addLine(to: CGPoint(x: 15.89, y: 8.59))
                shape.addLine(to: CGPoint(x: 13.25, y: 10.68))
                shape.addLine(to: CGPoint(x: 12.46, y: 11.3))
                shape.addLine(to: CGPoint(x: 12.73, y: 12.27))
                shape.addLine(to: CGPoint(x: 13.64, y: 15.51))
                shape.addLine(to: CGPoint(x: 10.83, y: 13.64))
                shape.addLine(to: CGPoint(x: 10, y: 13.09))
                shape.addLine(to: CGPoint(x: 9.17, y: 13.64))
                shape.addLine(to: CGPoint(x: 6.36, y: 15.51))
                shape.addLine(to: CGPoint(x: 7.27, y: 12.26))
                shape.addLine(to: CGPoint(x: 7.54, y: 11.3))
                shape.addLine(to: CGPoint(x: 6.75, y: 10.68))
                shape.addLine(to: CGPoint(x: 4.1, y: 8.59))
                shape.addLine(to: CGPoint(x: 7.48, y: 8.45))
                shape.addLine(to: CGPoint(x: 8.48, y: 8.41))
                shape.addLine(to: CGPoint(x: 8.82, y: 7.47))
                shape.addLine(to: CGPoint(x: 10, y: 4.31))
                shape.addLine(to: CGPoint(x: 10, y: 4.31))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 7.42, y: 6.95))
                shape.addLine(to: CGPoint(x: 0, y: 7.26))
                shape.addLine(to: CGPoint(x: 5.82, y: 11.86))
                shape.addLine(to: CGPoint(x: 3.82, y: 19))
                shape.addLine(to: CGPoint(x: 10, y: 14.89))
                shape.addLine(to: CGPoint(x: 16.18, y: 19))
                shape.addLine(to: CGPoint(x: 14.18, y: 11.86))
                shape.addLine(to: CGPoint(x: 20, y: 7.26))
                shape.addLine(to: CGPoint(x: 12.58, y: 6.95))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsspecialcharacter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -951, y: -515)
        
        /// gridicons-special-character
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 515)
            
            /// special-character
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 7.14, y: 2.65))
                shape.addCurve(to: CGPoint(x: 4.28, y: 3.77), controlPoint1: CGPoint(x: 5.9, y: 2.65), controlPoint2: CGPoint(x: 4.95, y: 3.02))
                shape.addCurve(to: CGPoint(x: 3.27, y: 6.95), controlPoint1: CGPoint(x: 3.61, y: 4.52), controlPoint2: CGPoint(x: 3.27, y: 5.59))
                shape.addCurve(to: CGPoint(x: 3.95, y: 10.33), controlPoint1: CGPoint(x: 3.27, y: 8.34), controlPoint2: CGPoint(x: 3.5, y: 9.47))
                shape.addCurve(to: CGPoint(x: 6, y: 12.37), controlPoint1: CGPoint(x: 4.4, y: 11.2), controlPoint2: CGPoint(x: 5.08, y: 11.87))
                shape.addLine(to: CGPoint(x: 6, y: 15.23))
                shape.addLine(to: CGPoint(x: 0.13, y: 15.23))
                shape.addLine(to: CGPoint(x: 0.13, y: 12.56))
                shape.addLine(to: CGPoint(x: 3.25, y: 12.56))
                shape.addCurve(to: CGPoint(x: 0.85, y: 9.96), controlPoint1: CGPoint(x: 2.21, y: 11.92), controlPoint2: CGPoint(x: 1.41, y: 11.06))
                shape.addCurve(to: CGPoint(x: 0, y: 6.29), controlPoint1: CGPoint(x: 0.28, y: 8.86), controlPoint2: CGPoint(x: 0, y: 7.64))
                shape.addCurve(to: CGPoint(x: 0.88, y: 2.97), controlPoint1: CGPoint(x: 0, y: 5.03), controlPoint2: CGPoint(x: 0.29, y: 3.92))
                shape.addCurve(to: CGPoint(x: 3.37, y: 0.77), controlPoint1: CGPoint(x: 1.46, y: 2.02), controlPoint2: CGPoint(x: 2.29, y: 1.28))
                shape.addCurve(to: CGPoint(x: 7.14, y: 0), controlPoint1: CGPoint(x: 4.45, y: 0.26), controlPoint2: CGPoint(x: 5.71, y: 0))
                shape.addCurve(to: CGPoint(x: 12.34, y: 1.71), controlPoint1: CGPoint(x: 9.32, y: 0), controlPoint2: CGPoint(x: 11.05, y: 0.57))
                shape.addCurve(to: CGPoint(x: 14.27, y: 6.31), controlPoint1: CGPoint(x: 13.63, y: 2.85), controlPoint2: CGPoint(x: 14.27, y: 4.38))
                shape.addCurve(to: CGPoint(x: 13.42, y: 9.96), controlPoint1: CGPoint(x: 14.27, y: 7.66), controlPoint2: CGPoint(x: 13.99, y: 8.88))
                shape.addCurve(to: CGPoint(x: 10.98, y: 12.56), controlPoint1: CGPoint(x: 12.85, y: 11.04), controlPoint2: CGPoint(x: 12.04, y: 11.9))
                shape.addLine(to: CGPoint(x: 14.13, y: 12.56))
                shape.addLine(to: CGPoint(x: 14.13, y: 15.23))
                shape.addLine(to: CGPoint(x: 8.22, y: 15.23))
                shape.addLine(to: CGPoint(x: 8.22, y: 12.37))
                shape.addCurve(to: CGPoint(x: 10.33, y: 10.31), controlPoint1: CGPoint(x: 9.17, y: 11.87), controlPoint2: CGPoint(x: 9.87, y: 11.19))
                shape.addCurve(to: CGPoint(x: 11, y: 6.93), controlPoint1: CGPoint(x: 10.78, y: 9.42), controlPoint2: CGPoint(x: 11, y: 8.3))
                shape.addCurve(to: CGPoint(x: 9.99, y: 3.77), controlPoint1: CGPoint(x: 11, y: 5.57), controlPoint2: CGPoint(x: 10.67, y: 4.52))
                shape.addCurve(to: CGPoint(x: 7.14, y: 2.65), controlPoint1: CGPoint(x: 9.32, y: 3.02), controlPoint2: CGPoint(x: 8.37, y: 2.65))
                shape.addLine(to: CGPoint(x: 7.14, y: 2.65))
                shape.close()
                shape.move(to: CGPoint(x: 7.14, y: 2.65))
                context.saveGState()
                context.translateBy(x: 0.87, y: 0.77)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsspeaker(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 17), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 17)
        context.translateBy(x: -1291, y: -484)
        
        /// gridicons-speaker
        do {
            context.saveGState()
            context.translateBy(x: 1291, y: 484)
            
            /// speaker
            do {
                context.saveGState()
                
                /// Group
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint.zero)
                    shape.addLine(to: CGPoint(x: 0, y: 3))
                    shape.addLine(to: CGPoint(x: 0, y: 6))
                    shape.addCurve(to: CGPoint(x: 3, y: 3), controlPoint1: CGPoint(x: 1.7, y: 6), controlPoint2: CGPoint(x: 3, y: 4.7))
                    shape.addCurve(to: CGPoint.zero, controlPoint1: CGPoint(x: 3, y: 1.3), controlPoint2: CGPoint(x: 1.7, y: 0))
                    shape.addLine(to: CGPoint.zero)
                    shape.close()
                    shape.move(to: CGPoint.zero)
                    context.saveGState()
                    context.translateBy(x: 17, y: 5)
                    shape.usesEvenOddFillRule = true
                    UIColor(hue: 0.958, saturation: 0.114, brightness: 0.137, alpha: 1).setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    /// Shape
                    let shape2 = UIBezierPath()
                    shape2.move(to: CGPoint(x: 9, y: 4))
                    shape2.addLine(to: CGPoint(x: 2, y: 4))
                    shape2.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 4.9))
                    shape2.addLine(to: CGPoint(x: 0, y: 10))
                    shape2.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 0, y: 11.1), controlPoint2: CGPoint(x: 0.9, y: 12))
                    shape2.addLine(to: CGPoint(x: 3, y: 12))
                    shape2.addLine(to: CGPoint(x: 3, y: 15))
                    shape2.addCurve(to: CGPoint(x: 5, y: 17), controlPoint1: CGPoint(x: 3, y: 16.1), controlPoint2: CGPoint(x: 3.9, y: 17))
                    shape2.addLine(to: CGPoint(x: 7, y: 17))
                    shape2.addLine(to: CGPoint(x: 7, y: 14))
                    shape2.addLine(to: CGPoint(x: 7, y: 12))
                    shape2.addLine(to: CGPoint(x: 9, y: 12))
                    shape2.addLine(to: CGPoint(x: 13, y: 16))
                    shape2.addLine(to: CGPoint(x: 15, y: 16))
                    shape2.addLine(to: CGPoint(x: 15, y: 0))
                    shape2.addLine(to: CGPoint(x: 13, y: 0))
                    shape2.addLine(to: CGPoint(x: 9, y: 4))
                    shape2.addLine(to: CGPoint(x: 9, y: 4))
                    shape2.close()
                    shape2.move(to: CGPoint(x: 9, y: 4))
                    context.saveGState()
                    shape2.usesEvenOddFillRule = true
                    UIColor(hue: 0.958, saturation: 0.114, brightness: 0.137, alpha: 1).setFill()
                    shape2.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsspam(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1261, y: -484)
        
        /// gridicons-spam
        do {
            context.saveGState()
            context.translateBy(x: 1261, y: 484)
            
            /// spam
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 15, y: 0))
                shape.addLine(to: CGPoint(x: 5, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 5))
                shape.addLine(to: CGPoint(x: 0, y: 15))
                shape.addLine(to: CGPoint(x: 5, y: 20))
                shape.addLine(to: CGPoint(x: 15, y: 20))
                shape.addLine(to: CGPoint(x: 20, y: 15))
                shape.addLine(to: CGPoint(x: 20, y: 5))
                shape.addLine(to: CGPoint(x: 15, y: 0))
                shape.addLine(to: CGPoint(x: 15, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 15))
                shape.addLine(to: CGPoint(x: 9, y: 15))
                shape.addLine(to: CGPoint(x: 9, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 15))
                shape.addLine(to: CGPoint(x: 11, y: 15))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 11))
                shape.addLine(to: CGPoint(x: 9, y: 11))
                shape.addLine(to: CGPoint(x: 8.5, y: 5))
                shape.addLine(to: CGPoint(x: 11.5, y: 5))
                shape.addLine(to: CGPoint(x: 11, y: 11))
                shape.addLine(to: CGPoint(x: 11, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 11))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconssignout(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 18)
        context.translateBy(x: -1230, y: -484)
        
        /// gridicons-sign-out
        do {
            context.saveGState()
            context.translateBy(x: 1230, y: 484)
            
            /// sign-out
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 13, y: 16))
                shape.addCurve(to: CGPoint(x: 11, y: 18), controlPoint1: CGPoint(x: 13, y: 17.11), controlPoint2: CGPoint(x: 12.11, y: 18))
                shape.addLine(to: CGPoint(x: 2, y: 18))
                shape.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 0.9, y: 18), controlPoint2: CGPoint(x: 0, y: 17.11))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                shape.addLine(to: CGPoint(x: 11, y: 0))
                shape.addCurve(to: CGPoint(x: 13, y: 2), controlPoint1: CGPoint(x: 12.11, y: 0), controlPoint2: CGPoint(x: 13, y: 0.9))
                shape.addLine(to: CGPoint(x: 13, y: 4))
                shape.addLine(to: CGPoint(x: 11, y: 4))
                shape.addLine(to: CGPoint(x: 11, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 16))
                shape.addLine(to: CGPoint(x: 11, y: 16))
                shape.addLine(to: CGPoint(x: 11, y: 14))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 15.5, y: 3.5))
                shape.addLine(to: CGPoint(x: 14.09, y: 4.91))
                shape.addLine(to: CGPoint(x: 17.17, y: 8))
                shape.addLine(to: CGPoint(x: 7, y: 8))
                shape.addLine(to: CGPoint(x: 7, y: 10))
                shape.addLine(to: CGPoint(x: 17.17, y: 10))
                shape.addLine(to: CGPoint(x: 14.09, y: 13.09))
                shape.addLine(to: CGPoint(x: 15.5, y: 14.5))
                shape.addLine(to: CGPoint(x: 21, y: 9))
                shape.addLine(to: CGPoint(x: 15.5, y: 3.5))
                shape.addLine(to: CGPoint(x: 15.5, y: 3.5))
                shape.close()
                shape.move(to: CGPoint(x: 15.5, y: 3.5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsshipping(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 15)
        context.translateBy(x: -1200, y: -484)
        
        /// gridicons-shipping
        do {
            context.saveGState()
            context.translateBy(x: 1200, y: 484)
            
            /// shipping
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 16, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 2))
                shape.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 14, y: 0.9), controlPoint2: CGPoint(x: 13.11, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 2, y: 12))
                shape.addCurve(to: CGPoint(x: 5, y: 15), controlPoint1: CGPoint(x: 2, y: 13.66), controlPoint2: CGPoint(x: 3.34, y: 15))
                shape.addCurve(to: CGPoint(x: 8, y: 12), controlPoint1: CGPoint(x: 6.66, y: 15), controlPoint2: CGPoint(x: 8, y: 13.66))
                shape.addLine(to: CGPoint(x: 12, y: 12))
                shape.addCurve(to: CGPoint(x: 15, y: 15), controlPoint1: CGPoint(x: 12, y: 13.66), controlPoint2: CGPoint(x: 13.34, y: 15))
                shape.addCurve(to: CGPoint(x: 18, y: 12), controlPoint1: CGPoint(x: 16.66, y: 15), controlPoint2: CGPoint(x: 18, y: 13.66))
                shape.addLine(to: CGPoint(x: 20, y: 12))
                shape.addLine(to: CGPoint(x: 20, y: 7))
                shape.addLine(to: CGPoint(x: 16, y: 3))
                shape.addLine(to: CGPoint(x: 16, y: 3))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 13.5))
                shape.addCurve(to: CGPoint(x: 3.5, y: 12), controlPoint1: CGPoint(x: 4.17, y: 13.5), controlPoint2: CGPoint(x: 3.5, y: 12.83))
                shape.addCurve(to: CGPoint(x: 5, y: 10.5), controlPoint1: CGPoint(x: 3.5, y: 11.17), controlPoint2: CGPoint(x: 4.17, y: 10.5))
                shape.addCurve(to: CGPoint(x: 6.5, y: 12), controlPoint1: CGPoint(x: 5.83, y: 10.5), controlPoint2: CGPoint(x: 6.5, y: 11.17))
                shape.addCurve(to: CGPoint(x: 5, y: 13.5), controlPoint1: CGPoint(x: 6.5, y: 12.83), controlPoint2: CGPoint(x: 5.83, y: 13.5))
                shape.addLine(to: CGPoint(x: 5, y: 13.5))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 9))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 12, y: 2))
                shape.addLine(to: CGPoint(x: 12, y: 9))
                shape.addLine(to: CGPoint(x: 2, y: 9))
                shape.addLine(to: CGPoint(x: 2, y: 9))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 13.5))
                shape.addCurve(to: CGPoint(x: 13.5, y: 12), controlPoint1: CGPoint(x: 14.17, y: 13.5), controlPoint2: CGPoint(x: 13.5, y: 12.83))
                shape.addCurve(to: CGPoint(x: 15, y: 10.5), controlPoint1: CGPoint(x: 13.5, y: 11.17), controlPoint2: CGPoint(x: 14.17, y: 10.5))
                shape.addCurve(to: CGPoint(x: 16.5, y: 12), controlPoint1: CGPoint(x: 15.83, y: 10.5), controlPoint2: CGPoint(x: 16.5, y: 11.17))
                shape.addCurve(to: CGPoint(x: 15, y: 13.5), controlPoint1: CGPoint(x: 16.5, y: 12.83), controlPoint2: CGPoint(x: 15.83, y: 13.5))
                shape.addLine(to: CGPoint(x: 15, y: 13.5))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 13.5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsshare(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 20)
        context.translateBy(x: -1172, y: -484)
        
        /// gridicons-share
        do {
            context.saveGState()
            context.translateBy(x: 1172, y: 484)
            
            /// share
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 15, y: 14))
                shape.addCurve(to: CGPoint(x: 12.97, y: 14.81), controlPoint1: CGPoint(x: 14.21, y: 14), controlPoint2: CGPoint(x: 13.5, y: 14.31))
                shape.addLine(to: CGPoint(x: 5.91, y: 10.7))
                shape.addCurve(to: CGPoint(x: 6, y: 10), controlPoint1: CGPoint(x: 5.96, y: 10.47), controlPoint2: CGPoint(x: 6, y: 10.24))
                shape.addCurve(to: CGPoint(x: 5.91, y: 9.3), controlPoint1: CGPoint(x: 6, y: 9.76), controlPoint2: CGPoint(x: 5.96, y: 9.53))
                shape.addLine(to: CGPoint(x: 12.96, y: 5.19))
                shape.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 13.5, y: 5.69), controlPoint2: CGPoint(x: 14.21, y: 6))
                shape.addCurve(to: CGPoint(x: 18, y: 3), controlPoint1: CGPoint(x: 16.66, y: 6), controlPoint2: CGPoint(x: 18, y: 4.66))
                shape.addCurve(to: CGPoint(x: 15, y: 0), controlPoint1: CGPoint(x: 18, y: 1.34), controlPoint2: CGPoint(x: 16.66, y: 0))
                shape.addCurve(to: CGPoint(x: 12, y: 3), controlPoint1: CGPoint(x: 13.34, y: 0), controlPoint2: CGPoint(x: 12, y: 1.34))
                shape.addCurve(to: CGPoint(x: 12.09, y: 3.7), controlPoint1: CGPoint(x: 12, y: 3.24), controlPoint2: CGPoint(x: 12.04, y: 3.47))
                shape.addLine(to: CGPoint(x: 5.04, y: 7.81))
                shape.addCurve(to: CGPoint(x: 3, y: 7), controlPoint1: CGPoint(x: 4.5, y: 7.31), controlPoint2: CGPoint(x: 3.79, y: 7))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 1.34, y: 7), controlPoint2: CGPoint(x: 0, y: 8.34))
                shape.addCurve(to: CGPoint(x: 3, y: 13), controlPoint1: CGPoint(x: 0, y: 11.66), controlPoint2: CGPoint(x: 1.34, y: 13))
                shape.addCurve(to: CGPoint(x: 5.04, y: 12.19), controlPoint1: CGPoint(x: 3.79, y: 13), controlPoint2: CGPoint(x: 4.5, y: 12.69))
                shape.addLine(to: CGPoint(x: 12.09, y: 16.31))
                shape.addCurve(to: CGPoint(x: 12, y: 17), controlPoint1: CGPoint(x: 12.04, y: 16.53), controlPoint2: CGPoint(x: 12, y: 16.76))
                shape.addCurve(to: CGPoint(x: 15, y: 20), controlPoint1: CGPoint(x: 12, y: 18.66), controlPoint2: CGPoint(x: 13.34, y: 20))
                shape.addCurve(to: CGPoint(x: 18, y: 17), controlPoint1: CGPoint(x: 16.66, y: 20), controlPoint2: CGPoint(x: 18, y: 18.66))
                shape.addCurve(to: CGPoint(x: 15, y: 14), controlPoint1: CGPoint(x: 18, y: 15.34), controlPoint2: CGPoint(x: 16.66, y: 14))
                shape.addLine(to: CGPoint(x: 15, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 14))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsshareios(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 21)
        context.translateBy(x: -1144, y: -484)
        
        /// gridicons-share-ios
        do {
            context.saveGState()
            context.translateBy(x: 1144, y: 484)
            
            /// share-ios
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 14, y: 8))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 17.11, y: 8), controlPoint2: CGPoint(x: 18, y: 8.89))
                shape.addLine(to: CGPoint(x: 18, y: 19))
                shape.addCurve(to: CGPoint(x: 16, y: 21), controlPoint1: CGPoint(x: 18, y: 20.11), controlPoint2: CGPoint(x: 17.11, y: 21))
                shape.addLine(to: CGPoint(x: 2, y: 21))
                shape.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 0.9, y: 21), controlPoint2: CGPoint(x: 0, y: 20.11))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addCurve(to: CGPoint(x: 2, y: 8), controlPoint1: CGPoint(x: 0, y: 8.89), controlPoint2: CGPoint(x: 0.9, y: 8))
                shape.addLine(to: CGPoint(x: 4, y: 8))
                shape.addLine(to: CGPoint(x: 4, y: 10))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 2, y: 19))
                shape.addLine(to: CGPoint(x: 16, y: 19))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.addLine(to: CGPoint(x: 14, y: 10))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 3.5, y: 5.5))
                shape.addLine(to: CGPoint(x: 4.91, y: 6.91))
                shape.addLine(to: CGPoint(x: 8, y: 3.83))
                shape.addLine(to: CGPoint(x: 8, y: 14))
                shape.addLine(to: CGPoint(x: 10, y: 14))
                shape.addLine(to: CGPoint(x: 10, y: 3.83))
                shape.addLine(to: CGPoint(x: 13.09, y: 6.91))
                shape.addLine(to: CGPoint(x: 14.5, y: 5.5))
                shape.addLine(to: CGPoint(x: 9, y: 0))
                shape.addLine(to: CGPoint(x: 3.5, y: 5.5))
                shape.addLine(to: CGPoint(x: 3.5, y: 5.5))
                shape.close()
                shape.move(to: CGPoint(x: 3.5, y: 5.5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconssearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -1116, y: -484)
        
        /// gridicons-search
        do {
            context.saveGState()
            context.translateBy(x: 1116, y: 484)
            
            /// search
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 16))
                shape.addLine(to: CGPoint(x: 12.85, y: 10.85))
                shape.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 13.57, y: 9.74), controlPoint2: CGPoint(x: 14, y: 8.42))
                shape.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 14, y: 3.13), controlPoint2: CGPoint(x: 10.87, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 7), controlPoint1: CGPoint(x: 3.13, y: 0), controlPoint2: CGPoint(x: 0, y: 3.13))
                shape.addCurve(to: CGPoint(x: 7, y: 14), controlPoint1: CGPoint(x: 0, y: 10.87), controlPoint2: CGPoint(x: 3.13, y: 14))
                shape.addCurve(to: CGPoint(x: 10.85, y: 12.85), controlPoint1: CGPoint(x: 8.42, y: 14), controlPoint2: CGPoint(x: 9.74, y: 13.57))
                shape.addLine(to: CGPoint(x: 16, y: 18))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 7))
                shape.addCurve(to: CGPoint(x: 7, y: 2), controlPoint1: CGPoint(x: 2, y: 4.24), controlPoint2: CGPoint(x: 4.24, y: 2))
                shape.addCurve(to: CGPoint(x: 12, y: 7), controlPoint1: CGPoint(x: 9.76, y: 2), controlPoint2: CGPoint(x: 12, y: 4.24))
                shape.addCurve(to: CGPoint(x: 7, y: 12), controlPoint1: CGPoint(x: 12, y: 9.76), controlPoint2: CGPoint(x: 9.76, y: 12))
                shape.addCurve(to: CGPoint(x: 2, y: 7), controlPoint1: CGPoint(x: 4.24, y: 12), controlPoint2: CGPoint(x: 2, y: 9.76))
                shape.addLine(to: CGPoint(x: 2, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 7))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsscheduled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 19)
        context.translateBy(x: -1088, y: -484)
        
        /// gridicons-scheduled
        do {
            context.saveGState()
            context.translateBy(x: 1088, y: 484)
            
            /// scheduled
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 7.5, y: 16))
                shape.addLine(to: CGPoint(x: 3.79, y: 12.3))
                shape.addLine(to: CGPoint(x: 5.21, y: 10.88))
                shape.addLine(to: CGPoint(x: 7.5, y: 13.17))
                shape.addLine(to: CGPoint(x: 12.8, y: 7.88))
                shape.addLine(to: CGPoint(x: 14.21, y: 9.3))
                shape.addLine(to: CGPoint(x: 7.5, y: 16))
                shape.addLine(to: CGPoint(x: 7.5, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 18, y: 17))
                shape.addCurve(to: CGPoint(x: 16, y: 19), controlPoint1: CGPoint(x: 18, y: 18.1), controlPoint2: CGPoint(x: 17.1, y: 19))
                shape.addLine(to: CGPoint(x: 2, y: 19))
                shape.addCurve(to: CGPoint(x: 0, y: 17), controlPoint1: CGPoint(x: 0.9, y: 19), controlPoint2: CGPoint(x: 0, y: 18.1))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addCurve(to: CGPoint(x: 2, y: 2), controlPoint1: CGPoint(x: 0, y: 2.9), controlPoint2: CGPoint(x: 0.9, y: 2))
                shape.addLine(to: CGPoint(x: 3, y: 2))
                shape.addLine(to: CGPoint(x: 3, y: 0))
                shape.addLine(to: CGPoint(x: 5, y: 0))
                shape.addLine(to: CGPoint(x: 5, y: 2))
                shape.addLine(to: CGPoint(x: 13, y: 2))
                shape.addLine(to: CGPoint(x: 13, y: 0))
                shape.addLine(to: CGPoint(x: 15, y: 0))
                shape.addLine(to: CGPoint(x: 15, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 4), controlPoint1: CGPoint(x: 17.1, y: 2), controlPoint2: CGPoint(x: 18, y: 2.9))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 17))
                shape.addLine(to: CGPoint(x: 16, y: 17))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 6))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsrotate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 21)
        context.translateBy(x: -1060, y: -484)
        
        /// gridicons-rotate
        do {
            context.saveGState()
            context.translateBy(x: 1060, y: 484)
            
            /// rotate
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 14, y: 12.5))
                shape.addLine(to: CGPoint(x: 14, y: 18.5))
                shape.addCurve(to: CGPoint(x: 12, y: 20.5), controlPoint1: CGPoint(x: 14, y: 19.61), controlPoint2: CGPoint(x: 13.11, y: 20.5))
                shape.addLine(to: CGPoint(x: 2, y: 20.5))
                shape.addCurve(to: CGPoint(x: 0, y: 18.5), controlPoint1: CGPoint(x: 0.9, y: 20.5), controlPoint2: CGPoint(x: 0, y: 19.61))
                shape.addLine(to: CGPoint(x: 0, y: 12.5))
                shape.addCurve(to: CGPoint(x: 2, y: 10.5), controlPoint1: CGPoint(x: 0, y: 11.4), controlPoint2: CGPoint(x: 0.9, y: 10.5))
                shape.addLine(to: CGPoint(x: 12, y: 10.5))
                shape.addCurve(to: CGPoint(x: 14, y: 12.5), controlPoint1: CGPoint(x: 13.11, y: 10.5), controlPoint2: CGPoint(x: 14, y: 11.4))
                shape.addLine(to: CGPoint(x: 14, y: 12.5))
                shape.close()
                shape.move(to: CGPoint(x: 9.91, y: 1.41))
                shape.addLine(to: CGPoint(x: 7.83, y: 3.5))
                shape.addLine(to: CGPoint(x: 10, y: 3.5))
                shape.addCurve(to: CGPoint(x: 18, y: 11.5), controlPoint1: CGPoint(x: 14.42, y: 3.5), controlPoint2: CGPoint(x: 18, y: 7.08))
                shape.addLine(to: CGPoint(x: 16, y: 11.5))
                shape.addCurve(to: CGPoint(x: 10, y: 5.5), controlPoint1: CGPoint(x: 16, y: 8.19), controlPoint2: CGPoint(x: 13.31, y: 5.5))
                shape.addLine(to: CGPoint(x: 7.83, y: 5.5))
                shape.addLine(to: CGPoint(x: 9.91, y: 7.59))
                shape.addLine(to: CGPoint(x: 8.5, y: 9))
                shape.addLine(to: CGPoint(x: 4, y: 4.5))
                shape.addLine(to: CGPoint(x: 5.41, y: 3.09))
                shape.addLine(to: CGPoint(x: 8.5, y: 0))
                shape.addLine(to: CGPoint(x: 9.91, y: 1.41))
                shape.addLine(to: CGPoint(x: 9.91, y: 1.41))
                shape.close()
                shape.move(to: CGPoint(x: 9.91, y: 1.41))
                context.saveGState()
                context.translateBy(x: 0, y: 0.5)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsresize(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -1034, y: -484)
        
        /// gridicons-resize
        do {
            context.saveGState()
            context.translateBy(x: 1034, y: 484)
            
            /// gridicons-resize
            do {
                context.saveGState()
                
                /// Artwork
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 9, y: 0))
                    shape.addLine(to: CGPoint(x: 9, y: 2))
                    shape.addLine(to: CGPoint(x: 12.59, y: 2))
                    shape.addLine(to: CGPoint(x: 2, y: 12.59))
                    shape.addLine(to: CGPoint(x: 2, y: 9))
                    shape.addLine(to: CGPoint(x: 0, y: 9))
                    shape.addLine(to: CGPoint(x: 0, y: 16))
                    shape.addLine(to: CGPoint(x: 7, y: 16))
                    shape.addLine(to: CGPoint(x: 7, y: 14))
                    shape.addLine(to: CGPoint(x: 3.41, y: 14))
                    shape.addLine(to: CGPoint(x: 14, y: 3.41))
                    shape.addLine(to: CGPoint(x: 14, y: 7))
                    shape.addLine(to: CGPoint(x: 16, y: 7))
                    shape.addLine(to: CGPoint(x: 16, y: 0))
                    shape.addLine(to: CGPoint(x: 9, y: 0))
                    shape.addLine(to: CGPoint(x: 9, y: 0))
                    shape.close()
                    shape.move(to: CGPoint(x: 9, y: 0))
                    context.saveGState()
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsreply(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 17, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 17, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 17, y: resizedFrame.height / 16)
        context.translateBy(x: -1007, y: -484)
        
        /// gridicons-reply
        do {
            context.saveGState()
            context.translateBy(x: 1007, y: 484)
            
            /// reply
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11, y: 4))
                shape.addLine(to: CGPoint(x: 3.83, y: 4))
                shape.addLine(to: CGPoint(x: 6.41, y: 1.41))
                shape.addLine(to: CGPoint(x: 5, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 5))
                shape.addLine(to: CGPoint(x: 5, y: 10))
                shape.addLine(to: CGPoint(x: 6.41, y: 8.59))
                shape.addLine(to: CGPoint(x: 3.83, y: 6))
                shape.addLine(to: CGPoint(x: 11, y: 6))
                shape.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 13.21, y: 6), controlPoint2: CGPoint(x: 15, y: 7.79))
                shape.addCurve(to: CGPoint(x: 11, y: 14), controlPoint1: CGPoint(x: 15, y: 12.21), controlPoint2: CGPoint(x: 13.21, y: 14))
                shape.addLine(to: CGPoint(x: 9, y: 14))
                shape.addLine(to: CGPoint(x: 9, y: 16))
                shape.addLine(to: CGPoint(x: 11, y: 16))
                shape.addCurve(to: CGPoint(x: 17, y: 10), controlPoint1: CGPoint(x: 14.31, y: 16), controlPoint2: CGPoint(x: 17, y: 13.31))
                shape.addCurve(to: CGPoint(x: 11, y: 4), controlPoint1: CGPoint(x: 17, y: 6.69), controlPoint2: CGPoint(x: 14.31, y: 4))
                shape.addLine(to: CGPoint(x: 11, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 4))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsrefund(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 21)
        context.translateBy(x: -977, y: -484)
        
        /// gridicons-refund
        do {
            context.saveGState()
            context.translateBy(x: 977, y: 484)
            
            /// refund
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11.91, y: 1.41))
                shape.addLine(to: CGPoint(x: 9.83, y: 3.5))
                shape.addLine(to: CGPoint(x: 12, y: 3.5))
                shape.addCurve(to: CGPoint(x: 20, y: 11.5), controlPoint1: CGPoint(x: 16.42, y: 3.5), controlPoint2: CGPoint(x: 20, y: 7.08))
                shape.addLine(to: CGPoint(x: 18, y: 11.5))
                shape.addCurve(to: CGPoint(x: 12, y: 5.5), controlPoint1: CGPoint(x: 18, y: 8.19), controlPoint2: CGPoint(x: 15.31, y: 5.5))
                shape.addLine(to: CGPoint(x: 9.83, y: 5.5))
                shape.addLine(to: CGPoint(x: 11.92, y: 7.59))
                shape.addLine(to: CGPoint(x: 10.5, y: 9))
                shape.addLine(to: CGPoint(x: 6, y: 4.5))
                shape.addLine(to: CGPoint(x: 7.41, y: 3.09))
                shape.addLine(to: CGPoint(x: 10.5, y: 0))
                shape.addLine(to: CGPoint(x: 11.91, y: 1.41))
                shape.addLine(to: CGPoint(x: 11.91, y: 1.41))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 10.5))
                shape.addLine(to: CGPoint(x: 0, y: 20.5))
                shape.addLine(to: CGPoint(x: 16, y: 20.5))
                shape.addLine(to: CGPoint(x: 16, y: 10.5))
                shape.addLine(to: CGPoint(x: 0, y: 10.5))
                shape.addLine(to: CGPoint(x: 0, y: 10.5))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 17.06))
                shape.addLine(to: CGPoint(x: 2, y: 13.95))
                shape.addCurve(to: CGPoint(x: 3.45, y: 12.5), controlPoint1: CGPoint(x: 2.6, y: 13.6), controlPoint2: CGPoint(x: 3.1, y: 13.1))
                shape.addLine(to: CGPoint(x: 12.55, y: 12.5))
                shape.addCurve(to: CGPoint(x: 14, y: 13.95), controlPoint1: CGPoint(x: 12.9, y: 13.1), controlPoint2: CGPoint(x: 13.4, y: 13.6))
                shape.addLine(to: CGPoint(x: 14, y: 17.06))
                shape.addCurve(to: CGPoint(x: 12.57, y: 18.5), controlPoint1: CGPoint(x: 13.41, y: 17.41), controlPoint2: CGPoint(x: 12.92, y: 17.91))
                shape.addLine(to: CGPoint(x: 3.45, y: 18.5))
                shape.addCurve(to: CGPoint(x: 2, y: 17.06), controlPoint1: CGPoint(x: 3.1, y: 17.9), controlPoint2: CGPoint(x: 2.6, y: 17.41))
                shape.addLine(to: CGPoint(x: 2, y: 17.06))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 17.5))
                shape.addCurve(to: CGPoint(x: 9.5, y: 15.5), controlPoint1: CGPoint(x: 8.83, y: 17.5), controlPoint2: CGPoint(x: 9.5, y: 16.61))
                shape.addCurve(to: CGPoint(x: 8, y: 13.5), controlPoint1: CGPoint(x: 9.5, y: 14.4), controlPoint2: CGPoint(x: 8.83, y: 13.5))
                shape.addCurve(to: CGPoint(x: 6.5, y: 15.5), controlPoint1: CGPoint(x: 7.17, y: 13.5), controlPoint2: CGPoint(x: 6.5, y: 14.4))
                shape.addCurve(to: CGPoint(x: 8, y: 17.5), controlPoint1: CGPoint(x: 6.5, y: 16.61), controlPoint2: CGPoint(x: 7.17, y: 17.5))
                shape.addLine(to: CGPoint(x: 8, y: 17.5))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 17.5))
                context.saveGState()
                context.translateBy(x: 0, y: 0.5)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsrefresh(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 20)
        context.translateBy(x: -951, y: -484)
        
        /// gridicons-refresh
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 484)
            
            /// refresh
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 13.91, y: 12.5))
                shape.addCurve(to: CGPoint(x: 8, y: 17.5), controlPoint1: CGPoint(x: 13.43, y: 15.33), controlPoint2: CGPoint(x: 10.97, y: 17.5))
                shape.addCurve(to: CGPoint(x: 2, y: 11.5), controlPoint1: CGPoint(x: 4.69, y: 17.5), controlPoint2: CGPoint(x: 2, y: 14.81))
                shape.addCurve(to: CGPoint(x: 8, y: 5.5), controlPoint1: CGPoint(x: 2, y: 8.19), controlPoint2: CGPoint(x: 4.69, y: 5.5))
                shape.addLine(to: CGPoint(x: 10.17, y: 5.5))
                shape.addLine(to: CGPoint(x: 8.09, y: 7.59))
                shape.addLine(to: CGPoint(x: 9.5, y: 9))
                shape.addLine(to: CGPoint(x: 14, y: 4.5))
                shape.addLine(to: CGPoint(x: 9.5, y: 0))
                shape.addLine(to: CGPoint(x: 8.09, y: 1.41))
                shape.addLine(to: CGPoint(x: 10.17, y: 3.5))
                shape.addLine(to: CGPoint(x: 8, y: 3.5))
                shape.addCurve(to: CGPoint(x: 0, y: 11.5), controlPoint1: CGPoint(x: 3.58, y: 3.5), controlPoint2: CGPoint(x: 0, y: 7.08))
                shape.addCurve(to: CGPoint(x: 8, y: 19.5), controlPoint1: CGPoint(x: 0, y: 15.92), controlPoint2: CGPoint(x: 3.58, y: 19.5))
                shape.addCurve(to: CGPoint(x: 15.93, y: 12.5), controlPoint1: CGPoint(x: 12.08, y: 19.5), controlPoint2: CGPoint(x: 15.44, y: 16.45))
                shape.addLine(to: CGPoint(x: 13.91, y: 12.5))
                shape.addLine(to: CGPoint(x: 13.91, y: 12.5))
                shape.close()
                shape.move(to: CGPoint(x: 13.91, y: 12.5))
                context.saveGState()
                context.translateBy(x: 0, y: 0.5)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsredo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -1309, y: -455)
        
        /// gridicons-redo
        do {
            context.saveGState()
            context.translateBy(x: 1309, y: 455)
            
            /// redo
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 13.9, y: 1.83))
                shape.addLine(to: CGPoint(x: 13.9, y: 5.41))
                shape.addLine(to: CGPoint(x: 10.24, y: 1.76))
                shape.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 9.07, y: 0.58), controlPoint2: CGPoint(x: 7.54, y: 0))
                shape.addCurve(to: CGPoint(x: 1.76, y: 1.76), controlPoint1: CGPoint(x: 4.46, y: 0), controlPoint2: CGPoint(x: 2.93, y: 0.58))
                shape.addCurve(to: CGPoint(x: 1.76, y: 10.24), controlPoint1: CGPoint(x: -0.59, y: 4.1), controlPoint2: CGPoint(x: -0.59, y: 7.9))
                shape.addLine(to: CGPoint(x: 7.12, y: 15.61))
                shape.addLine(to: CGPoint(x: 8.54, y: 14.19))
                shape.addLine(to: CGPoint(x: 3.17, y: 8.83))
                shape.addCurve(to: CGPoint(x: 3.17, y: 3.17), controlPoint1: CGPoint(x: 1.61, y: 7.27), controlPoint2: CGPoint(x: 1.61, y: 4.73))
                shape.addCurve(to: CGPoint(x: 6, y: 2), controlPoint1: CGPoint(x: 3.93, y: 2.42), controlPoint2: CGPoint(x: 4.93, y: 2))
                shape.addCurve(to: CGPoint(x: 8.83, y: 3.17), controlPoint1: CGPoint(x: 7.07, y: 2), controlPoint2: CGPoint(x: 8.07, y: 2.42))
                shape.addLine(to: CGPoint(x: 12.49, y: 6.83))
                shape.addLine(to: CGPoint(x: 8.9, y: 6.83))
                shape.addLine(to: CGPoint(x: 8.9, y: 8.83))
                shape.addLine(to: CGPoint(x: 15.9, y: 8.83))
                shape.addLine(to: CGPoint(x: 15.9, y: 1.83))
                shape.addLine(to: CGPoint(x: 13.9, y: 1.83))
                shape.addLine(to: CGPoint(x: 13.9, y: 1.83))
                shape.close()
                shape.move(to: CGPoint(x: 13.9, y: 1.83))
                context.saveGState()
                context.translateBy(x: 0.1, y: 0.17)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsreblog(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 16)
        context.translateBy(x: -1275, y: -455)
        
        /// gridicons-reblog
        do {
            context.saveGState()
            context.translateBy(x: 1275, y: 455)
            
            /// reblog
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 21.59, y: 5.91))
                shape.addLine(to: CGPoint(x: 19.5, y: 3.83))
                shape.addLine(to: CGPoint(x: 19.5, y: 14))
                shape.addCurve(to: CGPoint(x: 17.5, y: 16), controlPoint1: CGPoint(x: 19.5, y: 15.11), controlPoint2: CGPoint(x: 18.61, y: 16))
                shape.addLine(to: CGPoint(x: 10.5, y: 16))
                shape.addLine(to: CGPoint(x: 10.5, y: 14))
                shape.addLine(to: CGPoint(x: 17.5, y: 14))
                shape.addLine(to: CGPoint(x: 17.5, y: 3.83))
                shape.addLine(to: CGPoint(x: 15.41, y: 5.91))
                shape.addLine(to: CGPoint(x: 14, y: 4.5))
                shape.addLine(to: CGPoint(x: 18.5, y: 0))
                shape.addLine(to: CGPoint(x: 23, y: 4.5))
                shape.addLine(to: CGPoint(x: 21.59, y: 5.91))
                shape.addLine(to: CGPoint(x: 21.59, y: 5.91))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 12.17))
                shape.addLine(to: CGPoint(x: 5.5, y: 2))
                shape.addLine(to: CGPoint(x: 12.5, y: 2))
                shape.addLine(to: CGPoint(x: 12.5, y: 0))
                shape.addLine(to: CGPoint(x: 5.5, y: 0))
                shape.addCurve(to: CGPoint(x: 3.5, y: 2), controlPoint1: CGPoint(x: 4.39, y: 0), controlPoint2: CGPoint(x: 3.5, y: 0.9))
                shape.addLine(to: CGPoint(x: 3.5, y: 12.17))
                shape.addLine(to: CGPoint(x: 1.41, y: 10.09))
                shape.addLine(to: CGPoint(x: 0, y: 11.5))
                shape.addLine(to: CGPoint(x: 4.5, y: 16))
                shape.addLine(to: CGPoint(x: 9, y: 11.5))
                shape.addLine(to: CGPoint(x: 7.59, y: 10.09))
                shape.addLine(to: CGPoint(x: 5.5, y: 12.17))
                shape.addLine(to: CGPoint(x: 5.5, y: 12.17))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 12.17))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsreader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 16)
        context.translateBy(x: -1247, y: -455)
        
        /// gridicons-reader
        do {
            context.saveGState()
            context.translateBy(x: 1247, y: 455)
            
            /// reader
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addCurve(to: CGPoint(x: 2, y: 16), controlPoint1: CGPoint(x: 0, y: 15.1), controlPoint2: CGPoint(x: 0.9, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addCurve(to: CGPoint(x: 18, y: 14), controlPoint1: CGPoint(x: 17.1, y: 16), controlPoint2: CGPoint(x: 18, y: 15.1))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint.zero)
                shape.close()
                shape.move(to: CGPoint(x: 7, y: 11))
                shape.addLine(to: CGPoint(x: 2, y: 11))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 7, y: 10))
                shape.addLine(to: CGPoint(x: 7, y: 11))
                shape.addLine(to: CGPoint(x: 7, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 9))
                shape.addLine(to: CGPoint(x: 2, y: 9))
                shape.addLine(to: CGPoint(x: 2, y: 8))
                shape.addLine(to: CGPoint(x: 9, y: 8))
                shape.addLine(to: CGPoint(x: 9, y: 9))
                shape.addLine(to: CGPoint(x: 9, y: 9))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 7))
                shape.addLine(to: CGPoint(x: 2, y: 7))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 9, y: 6))
                shape.addLine(to: CGPoint(x: 9, y: 7))
                shape.addLine(to: CGPoint(x: 9, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 11))
                shape.addLine(to: CGPoint(x: 11, y: 11))
                shape.addLine(to: CGPoint(x: 11, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 11))
                shape.addLine(to: CGPoint(x: 16, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 4))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsreaderfollowing(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 19)
        context.translateBy(x: -1216, y: -455)
        
        /// gridicons-reader-following
        do {
            context.saveGState()
            context.translateBy(x: 1216, y: 455)
            
            /// reader-following
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 21, y: 11.48))
                shape.addLine(to: CGPoint(x: 13.51, y: 19))
                shape.addLine(to: CGPoint(x: 10, y: 15.4))
                shape.addLine(to: CGPoint(x: 11.41, y: 14.01))
                shape.addLine(to: CGPoint(x: 13.52, y: 16.2))
                shape.addLine(to: CGPoint(x: 19.61, y: 10.11))
                shape.addLine(to: CGPoint(x: 21, y: 11.48))
                shape.addLine(to: CGPoint(x: 21, y: 11.48))
                shape.close()
                shape.move(to: CGPoint(x: 13.55, y: 13.34))
                shape.addLine(to: CGPoint(x: 18, y: 8.89))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addCurve(to: CGPoint(x: 2, y: 16), controlPoint1: CGPoint(x: 0, y: 15.1), controlPoint2: CGPoint(x: 0.9, y: 16))
                shape.addLine(to: CGPoint(x: 6.54, y: 16))
                shape.addLine(to: CGPoint(x: 11.45, y: 11.17))
                shape.addLine(to: CGPoint(x: 13.55, y: 13.34))
                shape.addLine(to: CGPoint(x: 13.55, y: 13.34))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 11))
                shape.addLine(to: CGPoint(x: 2, y: 11))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 11))
                shape.addLine(to: CGPoint(x: 6, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 9))
                shape.addLine(to: CGPoint(x: 2, y: 9))
                shape.addLine(to: CGPoint(x: 2, y: 8))
                shape.addLine(to: CGPoint(x: 9, y: 8))
                shape.addLine(to: CGPoint(x: 9, y: 9))
                shape.addLine(to: CGPoint(x: 9, y: 9))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 7))
                shape.addLine(to: CGPoint(x: 2, y: 7))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 9, y: 6))
                shape.addLine(to: CGPoint(x: 9, y: 7))
                shape.addLine(to: CGPoint(x: 9, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 4))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsreaderfollow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 19)
        context.translateBy(x: -1185, y: -455)
        
        /// gridicons-reader-follow
        do {
            context.saveGState()
            context.translateBy(x: 1185, y: 455)
            
            /// reader-follow
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 21, y: 14))
                shape.addLine(to: CGPoint(x: 21, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 19))
                shape.addLine(to: CGPoint(x: 16, y: 19))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 13, y: 16))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 11))
                shape.addLine(to: CGPoint(x: 18, y: 11))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 21, y: 14))
                shape.addLine(to: CGPoint(x: 21, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 9))
                shape.addLine(to: CGPoint(x: 14, y: 9))
                shape.addLine(to: CGPoint(x: 14, y: 12))
                shape.addLine(to: CGPoint(x: 11, y: 12))
                shape.addLine(to: CGPoint(x: 11, y: 16))
                shape.addLine(to: CGPoint(x: 2, y: 16))
                shape.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 0.9, y: 16), controlPoint2: CGPoint(x: 0, y: 15.1))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 11))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 2, y: 11))
                shape.addLine(to: CGPoint(x: 6, y: 11))
                shape.addLine(to: CGPoint(x: 6, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 8))
                shape.addLine(to: CGPoint(x: 2, y: 8))
                shape.addLine(to: CGPoint(x: 2, y: 9))
                shape.addLine(to: CGPoint(x: 9, y: 9))
                shape.addLine(to: CGPoint(x: 9, y: 8))
                shape.addLine(to: CGPoint(x: 9, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 7))
                shape.addLine(to: CGPoint(x: 9, y: 7))
                shape.addLine(to: CGPoint(x: 9, y: 6))
                shape.addLine(to: CGPoint(x: 9, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 2))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsreadmore(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 14)
        context.translateBy(x: -1157, y: -455)
        
        /// gridicons-read-more
        do {
            context.saveGState()
            context.translateBy(x: 1157, y: 455)
            
            /// Layer_1
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint.zero)
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 8))
                shape.addLine(to: CGPoint(x: 12, y: 8))
                shape.addLine(to: CGPoint(x: 12, y: 6))
                shape.addLine(to: CGPoint(x: 6, y: 6))
                shape.addLine(to: CGPoint(x: 6, y: 8))
                shape.addLine(to: CGPoint(x: 6, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 4, y: 8))
                shape.addLine(to: CGPoint(x: 4, y: 6))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 8))
                shape.addLine(to: CGPoint(x: 18, y: 8))
                shape.addLine(to: CGPoint(x: 18, y: 6))
                shape.addLine(to: CGPoint(x: 14, y: 6))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 8))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsquote(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 14)
        context.translateBy(x: -1129, y: -455)
        
        /// gridicons-quote
        do {
            context.saveGState()
            context.translateBy(x: 1129, y: 455)
            
            /// quote
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 7.51, y: 10.76))
                shape.addCurve(to: CGPoint(x: 6.82, y: 8.54), controlPoint1: CGPoint(x: 7.51, y: 9.88), controlPoint2: CGPoint(x: 7.28, y: 9.14))
                shape.addCurve(to: CGPoint(x: 5.49, y: 7.73), controlPoint1: CGPoint(x: 6.49, y: 8.13), controlPoint2: CGPoint(x: 6.05, y: 7.86))
                shape.addCurve(to: CGPoint(x: 3.95, y: 7.7), controlPoint1: CGPoint(x: 4.94, y: 7.6), controlPoint2: CGPoint(x: 4.42, y: 7.59))
                shape.addCurve(to: CGPoint(x: 4.71, y: 4.68), controlPoint1: CGPoint(x: 3.79, y: 6.75), controlPoint2: CGPoint(x: 4.05, y: 5.74))
                shape.addCurve(to: CGPoint(x: 7.27, y: 2.28), controlPoint1: CGPoint(x: 5.37, y: 3.61), controlPoint2: CGPoint(x: 6.23, y: 2.81))
                shape.addLine(to: CGPoint(x: 5.69, y: 0))
                shape.addCurve(to: CGPoint(x: 3.43, y: 1.51), controlPoint1: CGPoint(x: 4.89, y: 0.4), controlPoint2: CGPoint(x: 4.13, y: 0.9))
                shape.addCurve(to: CGPoint(x: 1.53, y: 3.6), controlPoint1: CGPoint(x: 2.72, y: 2.11), controlPoint2: CGPoint(x: 2.09, y: 2.81))
                shape.addCurve(to: CGPoint(x: 0.28, y: 6.29), controlPoint1: CGPoint(x: 0.97, y: 4.39), controlPoint2: CGPoint(x: 0.55, y: 5.28))
                shape.addCurve(to: CGPoint(x: 0.06, y: 9.39), controlPoint1: CGPoint(x: 0.01, y: 7.3), controlPoint2: CGPoint(x: -0.07, y: 8.33))
                shape.addCurve(to: CGPoint(x: 1.42, y: 12.74), controlPoint1: CGPoint(x: 0.23, y: 10.79), controlPoint2: CGPoint(x: 0.68, y: 11.91))
                shape.addCurve(to: CGPoint(x: 4.17, y: 14), controlPoint1: CGPoint(x: 2.15, y: 13.58), controlPoint2: CGPoint(x: 3.07, y: 14))
                shape.addCurve(to: CGPoint(x: 6.57, y: 13.12), controlPoint1: CGPoint(x: 5.13, y: 14), controlPoint2: CGPoint(x: 5.93, y: 13.71))
                shape.addCurve(to: CGPoint(x: 7.51, y: 10.75), controlPoint1: CGPoint(x: 7.19, y: 12.55), controlPoint2: CGPoint(x: 7.51, y: 11.76))
                shape.addLine(to: CGPoint(x: 7.51, y: 10.76))
                shape.addLine(to: CGPoint(x: 7.51, y: 10.76))
                shape.close()
                shape.move(to: CGPoint(x: 16.63, y: 10.76))
                shape.addCurve(to: CGPoint(x: 15.94, y: 8.54), controlPoint1: CGPoint(x: 16.63, y: 9.88), controlPoint2: CGPoint(x: 16.4, y: 9.14))
                shape.addCurve(to: CGPoint(x: 14.61, y: 7.72), controlPoint1: CGPoint(x: 15.62, y: 8.12), controlPoint2: CGPoint(x: 15.17, y: 7.85))
                shape.addCurve(to: CGPoint(x: 13.07, y: 7.7), controlPoint1: CGPoint(x: 14.05, y: 7.6), controlPoint2: CGPoint(x: 13.54, y: 7.59))
                shape.addCurve(to: CGPoint(x: 13.83, y: 4.68), controlPoint1: CGPoint(x: 12.91, y: 6.76), controlPoint2: CGPoint(x: 13.16, y: 5.75))
                shape.addCurve(to: CGPoint(x: 16.38, y: 2.28), controlPoint1: CGPoint(x: 14.49, y: 3.62), controlPoint2: CGPoint(x: 15.34, y: 2.82))
                shape.addLine(to: CGPoint(x: 14.81, y: 0))
                shape.addCurve(to: CGPoint(x: 12.55, y: 1.51), controlPoint1: CGPoint(x: 14.01, y: 0.4), controlPoint2: CGPoint(x: 13.25, y: 0.9))
                shape.addCurve(to: CGPoint(x: 10.65, y: 3.6), controlPoint1: CGPoint(x: 11.84, y: 2.11), controlPoint2: CGPoint(x: 11.21, y: 2.81))
                shape.addCurve(to: CGPoint(x: 9.41, y: 6.29), controlPoint1: CGPoint(x: 10.1, y: 4.39), controlPoint2: CGPoint(x: 9.68, y: 5.28))
                shape.addCurve(to: CGPoint(x: 9.19, y: 9.39), controlPoint1: CGPoint(x: 9.14, y: 7.29), controlPoint2: CGPoint(x: 9.07, y: 8.33))
                shape.addCurve(to: CGPoint(x: 10.54, y: 12.74), controlPoint1: CGPoint(x: 9.36, y: 10.79), controlPoint2: CGPoint(x: 9.81, y: 11.91))
                shape.addCurve(to: CGPoint(x: 13.29, y: 13.99), controlPoint1: CGPoint(x: 11.28, y: 13.57), controlPoint2: CGPoint(x: 12.19, y: 13.99))
                shape.addCurve(to: CGPoint(x: 15.69, y: 13.11), controlPoint1: CGPoint(x: 14.25, y: 13.99), controlPoint2: CGPoint(x: 15.06, y: 13.7))
                shape.addCurve(to: CGPoint(x: 16.63, y: 10.75), controlPoint1: CGPoint(x: 16.32, y: 12.54), controlPoint2: CGPoint(x: 16.63, y: 11.75))
                shape.addLine(to: CGPoint(x: 16.63, y: 10.76))
                shape.addLine(to: CGPoint(x: 16.63, y: 10.76))
                shape.close()
                shape.move(to: CGPoint(x: 16.63, y: 10.76))
                context.saveGState()
                context.translateBy(x: 0.68, y: 0)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsproduct(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -1099, y: -455)
        
        /// gridicons-product
        do {
            context.saveGState()
            context.translateBy(x: 1099, y: 455)
            
            /// product
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 20, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 1, y: 6))
                shape.addLine(to: CGPoint(x: 1, y: 17))
                shape.addCurve(to: CGPoint(x: 3, y: 19), controlPoint1: CGPoint(x: 1, y: 18.11), controlPoint2: CGPoint(x: 1.9, y: 19))
                shape.addLine(to: CGPoint(x: 17, y: 19))
                shape.addCurve(to: CGPoint(x: 19, y: 17), controlPoint1: CGPoint(x: 18.11, y: 19), controlPoint2: CGPoint(x: 19, y: 18.11))
                shape.addLine(to: CGPoint(x: 19, y: 6))
                shape.addLine(to: CGPoint(x: 20, y: 6))
                shape.addLine(to: CGPoint(x: 20, y: 0))
                shape.addLine(to: CGPoint(x: 20, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 17, y: 17))
                shape.addLine(to: CGPoint(x: 3, y: 17))
                shape.addLine(to: CGPoint(x: 3, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 17))
                shape.addLine(to: CGPoint(x: 17, y: 17))
                shape.close()
                shape.move(to: CGPoint(x: 7, y: 8))
                shape.addLine(to: CGPoint(x: 13, y: 8))
                shape.addCurve(to: CGPoint(x: 11, y: 10), controlPoint1: CGPoint(x: 13, y: 9.11), controlPoint2: CGPoint(x: 12.11, y: 10))
                shape.addLine(to: CGPoint(x: 9, y: 10))
                shape.addCurve(to: CGPoint(x: 7, y: 8), controlPoint1: CGPoint(x: 7.89, y: 10), controlPoint2: CGPoint(x: 7, y: 9.11))
                shape.addLine(to: CGPoint(x: 7, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 7, y: 8))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsproductvirtual(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -1069, y: -455)
        
        /// gridicons-product-virtual
        do {
            context.saveGState()
            context.translateBy(x: 1069, y: 455)
            
            /// product-virtual
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 20, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 1, y: 6))
                shape.addLine(to: CGPoint(x: 1, y: 17))
                shape.addCurve(to: CGPoint(x: 3, y: 19), controlPoint1: CGPoint(x: 1, y: 18.11), controlPoint2: CGPoint(x: 1.9, y: 19))
                shape.addLine(to: CGPoint(x: 17, y: 19))
                shape.addCurve(to: CGPoint(x: 19, y: 17), controlPoint1: CGPoint(x: 18.11, y: 19), controlPoint2: CGPoint(x: 19, y: 18.11))
                shape.addLine(to: CGPoint(x: 19, y: 6))
                shape.addLine(to: CGPoint(x: 20, y: 6))
                shape.addLine(to: CGPoint(x: 20, y: 0))
                shape.addLine(to: CGPoint(x: 20, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 17, y: 17))
                shape.addLine(to: CGPoint(x: 3, y: 17))
                shape.addLine(to: CGPoint(x: 3, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 17))
                shape.addLine(to: CGPoint(x: 17, y: 17))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 13.45))
                shape.addCurve(to: CGPoint(x: 6.82, y: 11.63), controlPoint1: CGPoint(x: 5, y: 12.45), controlPoint2: CGPoint(x: 5.81, y: 11.63))
                shape.addLine(to: CGPoint(x: 6.91, y: 11.63))
                shape.addCurve(to: CGPoint(x: 9.18, y: 8.15), controlPoint1: CGPoint(x: 6.58, y: 10.04), controlPoint2: CGPoint(x: 7.59, y: 8.48))
                shape.addCurve(to: CGPoint(x: 12.66, y: 10.42), controlPoint1: CGPoint(x: 10.77, y: 7.81), controlPoint2: CGPoint(x: 12.33, y: 8.83))
                shape.addCurve(to: CGPoint(x: 12.71, y: 10.71), controlPoint1: CGPoint(x: 12.68, y: 10.51), controlPoint2: CGPoint(x: 12.7, y: 10.61))
                shape.addLine(to: CGPoint(x: 12.71, y: 10.71))
                shape.addCurve(to: CGPoint(x: 15.02, y: 12.93), controlPoint1: CGPoint(x: 13.96, y: 10.69), controlPoint2: CGPoint(x: 15, y: 11.68))
                shape.addCurve(to: CGPoint(x: 13.79, y: 15), controlPoint1: CGPoint(x: 15.04, y: 13.8), controlPoint2: CGPoint(x: 14.56, y: 14.6))
                shape.addLine(to: CGPoint(x: 5.87, y: 15))
                shape.addCurve(to: CGPoint(x: 5, y: 13.45), controlPoint1: CGPoint(x: 5.33, y: 14.67), controlPoint2: CGPoint(x: 5, y: 14.08))
                shape.addLine(to: CGPoint(x: 5, y: 13.45))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 13.45))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsproductexternal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -1039, y: -455)
        
        /// gridicons-product-external
        do {
            context.saveGState()
            context.translateBy(x: 1039, y: 455)
            
            /// product-external
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 20, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 1, y: 6))
                shape.addLine(to: CGPoint(x: 1, y: 17))
                shape.addCurve(to: CGPoint(x: 3, y: 19), controlPoint1: CGPoint(x: 1, y: 18.11), controlPoint2: CGPoint(x: 1.9, y: 19))
                shape.addLine(to: CGPoint(x: 17, y: 19))
                shape.addCurve(to: CGPoint(x: 19, y: 17), controlPoint1: CGPoint(x: 18.11, y: 19), controlPoint2: CGPoint(x: 19, y: 18.11))
                shape.addLine(to: CGPoint(x: 19, y: 6))
                shape.addLine(to: CGPoint(x: 20, y: 6))
                shape.addLine(to: CGPoint(x: 20, y: 0))
                shape.addLine(to: CGPoint(x: 20, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 17, y: 17))
                shape.addLine(to: CGPoint(x: 3, y: 17))
                shape.addLine(to: CGPoint(x: 3, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 17))
                shape.addLine(to: CGPoint(x: 17, y: 17))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 8))
                shape.addLine(to: CGPoint(x: 15, y: 14))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 13, y: 11.41))
                shape.addLine(to: CGPoint(x: 9.71, y: 14.7))
                shape.addLine(to: CGPoint(x: 8.3, y: 13.29))
                shape.addLine(to: CGPoint(x: 11.59, y: 10))
                shape.addLine(to: CGPoint(x: 9, y: 10))
                shape.addLine(to: CGPoint(x: 9, y: 8))
                shape.addLine(to: CGPoint(x: 15, y: 8))
                shape.addLine(to: CGPoint(x: 15, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 8))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsproductdownloadable(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -1009, y: -455)
        
        /// gridicons-product-downloadable
        do {
            context.saveGState()
            context.translateBy(x: 1009, y: 455)
            
            /// product-downloadable
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 20, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 1, y: 6))
                shape.addLine(to: CGPoint(x: 1, y: 17))
                shape.addCurve(to: CGPoint(x: 3, y: 19), controlPoint1: CGPoint(x: 1, y: 18.11), controlPoint2: CGPoint(x: 1.9, y: 19))
                shape.addLine(to: CGPoint(x: 17, y: 19))
                shape.addCurve(to: CGPoint(x: 19, y: 17), controlPoint1: CGPoint(x: 18.11, y: 19), controlPoint2: CGPoint(x: 19, y: 18.11))
                shape.addLine(to: CGPoint(x: 19, y: 6))
                shape.addLine(to: CGPoint(x: 20, y: 6))
                shape.addLine(to: CGPoint(x: 20, y: 0))
                shape.addLine(to: CGPoint(x: 20, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 17, y: 17))
                shape.addLine(to: CGPoint(x: 3, y: 17))
                shape.addLine(to: CGPoint(x: 3, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 17))
                shape.addLine(to: CGPoint(x: 17, y: 17))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 7))
                shape.addLine(to: CGPoint(x: 11, y: 12.17))
                shape.addLine(to: CGPoint(x: 13.59, y: 9.59))
                shape.addLine(to: CGPoint(x: 15, y: 11))
                shape.addLine(to: CGPoint(x: 10, y: 16))
                shape.addLine(to: CGPoint(x: 5, y: 11))
                shape.addLine(to: CGPoint(x: 6.41, y: 9.58))
                shape.addLine(to: CGPoint(x: 9, y: 12.17))
                shape.addLine(to: CGPoint(x: 9, y: 7))
                shape.addLine(to: CGPoint(x: 11, y: 7))
                shape.addLine(to: CGPoint(x: 11, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 7))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsprint(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -979, y: -455)
        
        /// gridicons-print
        do {
            context.saveGState()
            context.translateBy(x: 979, y: 455)
            
            /// print
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 7, y: 13))
                shape.addLine(to: CGPoint(x: 13, y: 13))
                shape.addLine(to: CGPoint(x: 13, y: 15))
                shape.addLine(to: CGPoint(x: 7, y: 15))
                shape.addLine(to: CGPoint(x: 7, y: 13))
                shape.addLine(to: CGPoint(x: 7, y: 13))
                shape.close()
                shape.move(to: CGPoint(x: 20, y: 14))
                shape.addLine(to: CGPoint(x: 17, y: 14))
                shape.addLine(to: CGPoint(x: 17, y: 17))
                shape.addCurve(to: CGPoint(x: 15, y: 19), controlPoint1: CGPoint(x: 17, y: 18.11), controlPoint2: CGPoint(x: 16.11, y: 19))
                shape.addLine(to: CGPoint(x: 5, y: 19))
                shape.addCurve(to: CGPoint(x: 3, y: 17), controlPoint1: CGPoint(x: 3.9, y: 19), controlPoint2: CGPoint(x: 3, y: 18.11))
                shape.addLine(to: CGPoint(x: 3, y: 14))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addCurve(to: CGPoint(x: 2, y: 4), controlPoint1: CGPoint(x: 0, y: 4.89), controlPoint2: CGPoint(x: 0.9, y: 4))
                shape.addLine(to: CGPoint(x: 3, y: 4))
                shape.addLine(to: CGPoint(x: 3, y: 2))
                shape.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 3, y: 0.9), controlPoint2: CGPoint(x: 3.9, y: 0))
                shape.addLine(to: CGPoint(x: 15, y: 0))
                shape.addCurve(to: CGPoint(x: 17, y: 2), controlPoint1: CGPoint(x: 16.11, y: 0), controlPoint2: CGPoint(x: 17, y: 0.9))
                shape.addLine(to: CGPoint(x: 17, y: 4))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addCurve(to: CGPoint(x: 20, y: 6), controlPoint1: CGPoint(x: 19.11, y: 4), controlPoint2: CGPoint(x: 20, y: 4.89))
                shape.addLine(to: CGPoint(x: 20, y: 14))
                shape.addLine(to: CGPoint(x: 20, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 4))
                shape.addLine(to: CGPoint(x: 15, y: 4))
                shape.addLine(to: CGPoint(x: 15, y: 2))
                shape.addLine(to: CGPoint(x: 5, y: 2))
                shape.addLine(to: CGPoint(x: 5, y: 4))
                shape.addLine(to: CGPoint(x: 5, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 11))
                shape.addLine(to: CGPoint(x: 5, y: 11))
                shape.addLine(to: CGPoint(x: 5, y: 17))
                shape.addLine(to: CGPoint(x: 15, y: 17))
                shape.addLine(to: CGPoint(x: 15, y: 11))
                shape.addLine(to: CGPoint(x: 15, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 7.5))
                shape.addCurve(to: CGPoint(x: 16.5, y: 6), controlPoint1: CGPoint(x: 18, y: 6.67), controlPoint2: CGPoint(x: 17.33, y: 6))
                shape.addCurve(to: CGPoint(x: 15, y: 7.5), controlPoint1: CGPoint(x: 15.67, y: 6), controlPoint2: CGPoint(x: 15, y: 6.67))
                shape.addCurve(to: CGPoint(x: 16.5, y: 9), controlPoint1: CGPoint(x: 15, y: 8.33), controlPoint2: CGPoint(x: 15.67, y: 9))
                shape.addCurve(to: CGPoint(x: 18, y: 7.5), controlPoint1: CGPoint(x: 17.33, y: 9), controlPoint2: CGPoint(x: 18, y: 8.33))
                shape.addLine(to: CGPoint(x: 18, y: 7.5))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 7.5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsposts(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 14)
        context.translateBy(x: -951, y: -455)
        
        /// gridicons-posts
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 455)
            
            /// posts
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 13, y: 12))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 18, y: 6))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.close()
                shape.move(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addLine(to: CGPoint(x: 11, y: 2))
                shape.addLine(to: CGPoint(x: 11, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint.zero)
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 0))
                shape.addLine(to: CGPoint(x: 14, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 14, y: 0))
                shape.addLine(to: CGPoint(x: 14, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 10))
                shape.addLine(to: CGPoint(x: 18, y: 10))
                shape.addLine(to: CGPoint(x: 18, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 5, y: 10))
                shape.addLine(to: CGPoint(x: 5, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 8))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconspopout(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -1276, y: -425)
        
        /// gridicons-popout
        do {
            context.saveGState()
            context.translateBy(x: 1276, y: 425)
            
            /// Layer_1
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 3, y: 4))
                shape.addLine(to: CGPoint(x: 3, y: 2))
                shape.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 3, y: 0.9), controlPoint2: CGPoint(x: 3.9, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.addCurve(to: CGPoint(x: 18, y: 2), controlPoint1: CGPoint(x: 17.11, y: 0), controlPoint2: CGPoint(x: 18, y: 0.9))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addCurve(to: CGPoint(x: 16, y: 18), controlPoint1: CGPoint(x: 18, y: 17.11), controlPoint2: CGPoint(x: 17.11, y: 18))
                shape.addLine(to: CGPoint(x: 5, y: 18))
                shape.addCurve(to: CGPoint(x: 3, y: 16), controlPoint1: CGPoint(x: 3.9, y: 18), controlPoint2: CGPoint(x: 3, y: 17.11))
                shape.addLine(to: CGPoint(x: 3, y: 14))
                shape.addLine(to: CGPoint(x: 5, y: 14))
                shape.addLine(to: CGPoint(x: 5, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 5, y: 2))
                shape.addLine(to: CGPoint(x: 5, y: 4))
                shape.addLine(to: CGPoint(x: 3, y: 4))
                shape.addLine(to: CGPoint(x: 3, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 8.5, y: 3.5))
                shape.addLine(to: CGPoint(x: 7.09, y: 4.91))
                shape.addLine(to: CGPoint(x: 10.17, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 10.17, y: 10))
                shape.addLine(to: CGPoint(x: 7.09, y: 13.09))
                shape.addLine(to: CGPoint(x: 8.5, y: 14.5))
                shape.addLine(to: CGPoint(x: 14, y: 9))
                shape.addLine(to: CGPoint(x: 8.5, y: 3.5))
                shape.addLine(to: CGPoint(x: 8.5, y: 3.5))
                shape.close()
                shape.move(to: CGPoint(x: 8.5, y: 3.5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsplus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -1248, y: -425)
        
        /// gridicons-plus
        do {
            context.saveGState()
            context.translateBy(x: 1248, y: 425)
            
            /// Artwork
            do {
                context.saveGState()
                
                /// plus
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 18, y: 10))
                    shape.addLine(to: CGPoint(x: 10, y: 10))
                    shape.addLine(to: CGPoint(x: 10, y: 18))
                    shape.addLine(to: CGPoint(x: 8, y: 18))
                    shape.addLine(to: CGPoint(x: 8, y: 10))
                    shape.addLine(to: CGPoint(x: 0, y: 10))
                    shape.addLine(to: CGPoint(x: 0, y: 8))
                    shape.addLine(to: CGPoint(x: 8, y: 8))
                    shape.addLine(to: CGPoint(x: 8, y: 0))
                    shape.addLine(to: CGPoint(x: 10, y: 0))
                    shape.addLine(to: CGPoint(x: 10, y: 8))
                    shape.addLine(to: CGPoint(x: 18, y: 8))
                    shape.addLine(to: CGPoint(x: 18, y: 10))
                    shape.addLine(to: CGPoint(x: 18, y: 10))
                    shape.close()
                    shape.move(to: CGPoint(x: 18, y: 10))
                    context.saveGState()
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsplussmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)
        context.translateBy(x: -1226, y: -425)
        
        /// gridicons-plus-small
        do {
            context.saveGState()
            context.translateBy(x: 1226, y: 425)
            
            /// plus-small
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 12, y: 5))
                shape.addLine(to: CGPoint(x: 7, y: 5))
                shape.addLine(to: CGPoint(x: 7, y: 0))
                shape.addLine(to: CGPoint(x: 5, y: 0))
                shape.addLine(to: CGPoint(x: 5, y: 5))
                shape.addLine(to: CGPoint(x: 0, y: 5))
                shape.addLine(to: CGPoint(x: 0, y: 7))
                shape.addLine(to: CGPoint(x: 5, y: 7))
                shape.addLine(to: CGPoint(x: 5, y: 12))
                shape.addLine(to: CGPoint(x: 7, y: 12))
                shape.addLine(to: CGPoint(x: 7, y: 7))
                shape.addLine(to: CGPoint(x: 12, y: 7))
                shape.addLine(to: CGPoint(x: 12, y: 5))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsplugins(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 20)
        context.translateBy(x: -1202, y: -425)
        
        /// gridicons-plugins
        do {
            context.saveGState()
            context.translateBy(x: 1202, y: 425)
            
            /// plugins
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11, y: 6))
                shape.addLine(to: CGPoint(x: 11, y: 1))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 11, y: 0.45), controlPoint2: CGPoint(x: 10.55, y: 0))
                shape.addCurve(to: CGPoint(x: 9, y: 1), controlPoint1: CGPoint(x: 9.45, y: 0), controlPoint2: CGPoint(x: 9, y: 0.45))
                shape.addLine(to: CGPoint(x: 9, y: 6))
                shape.addLine(to: CGPoint(x: 5, y: 6))
                shape.addLine(to: CGPoint(x: 5, y: 1))
                shape.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 5, y: 0.45), controlPoint2: CGPoint(x: 4.55, y: 0))
                shape.addCurve(to: CGPoint(x: 3, y: 1), controlPoint1: CGPoint(x: 3.45, y: 0), controlPoint2: CGPoint(x: 3, y: 0.45))
                shape.addLine(to: CGPoint(x: 3, y: 6))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addCurve(to: CGPoint(x: 4, y: 16.32), controlPoint1: CGPoint(x: 0, y: 12.79), controlPoint2: CGPoint(x: 1.64, y: 15.19))
                shape.addLine(to: CGPoint(x: 4, y: 20))
                shape.addLine(to: CGPoint(x: 10, y: 20))
                shape.addLine(to: CGPoint(x: 10, y: 16.32))
                shape.addCurve(to: CGPoint(x: 14, y: 10), controlPoint1: CGPoint(x: 12.36, y: 15.19), controlPoint2: CGPoint(x: 14, y: 12.79))
                shape.addLine(to: CGPoint(x: 14, y: 6))
                shape.addLine(to: CGPoint(x: 11, y: 6))
                shape.addLine(to: CGPoint(x: 11, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 6))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsphone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 20)
        context.translateBy(x: -1180, y: -425)
        
        /// gridicons-phone
        do {
            context.saveGState()
            context.translateBy(x: 1180, y: 425)
            
            /// phone
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 18))
                shape.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.1), controlPoint2: CGPoint(x: 0.9, y: 20))
                shape.addLine(to: CGPoint(x: 10, y: 20))
                shape.addCurve(to: CGPoint(x: 12, y: 18), controlPoint1: CGPoint(x: 11.1, y: 20), controlPoint2: CGPoint(x: 12, y: 19.1))
                shape.addLine(to: CGPoint(x: 12, y: 2))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 12, y: 0.9), controlPoint2: CGPoint(x: 11.1, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 7, y: 19))
                shape.addLine(to: CGPoint(x: 5, y: 19))
                shape.addLine(to: CGPoint(x: 5, y: 18))
                shape.addLine(to: CGPoint(x: 7, y: 18))
                shape.addLine(to: CGPoint(x: 7, y: 19))
                shape.addLine(to: CGPoint(x: 7, y: 19))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 3))
                shape.addLine(to: CGPoint(x: 10, y: 3))
                shape.addLine(to: CGPoint(x: 10, y: 17))
                shape.addLine(to: CGPoint(x: 10, y: 17))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 17))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconspencil(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 19)
        context.translateBy(x: -1151, y: -425)
        
        /// gridicons-pencil
        do {
            context.saveGState()
            context.translateBy(x: 1151, y: 425)
            
            /// pencil
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 3.17))
                shape.addLine(to: CGPoint(x: 15, y: 8.17))
                shape.addLine(to: CGPoint(x: 5.49, y: 17.68))
                shape.addCurve(to: CGPoint(x: 5.48, y: 15.19), controlPoint1: CGPoint(x: 4.81, y: 16.99), controlPoint2: CGPoint(x: 4.8, y: 15.88))
                shape.addLine(to: CGPoint(x: 5.48, y: 15.19))
                shape.addCurve(to: CGPoint(x: 2.99, y: 15.18), controlPoint1: CGPoint(x: 4.79, y: 15.87), controlPoint2: CGPoint(x: 3.68, y: 15.86))
                shape.addCurve(to: CGPoint(x: 2.96, y: 12.72), controlPoint1: CGPoint(x: 2.32, y: 14.5), controlPoint2: CGPoint(x: 2.31, y: 13.42))
                shape.addLine(to: CGPoint(x: 2.95, y: 12.72))
                shape.addCurve(to: CGPoint(x: 0.49, y: 12.68), controlPoint1: CGPoint(x: 2.26, y: 13.36), controlPoint2: CGPoint(x: 1.17, y: 13.36))
                shape.addLine(to: CGPoint(x: 10, y: 3.17))
                shape.addLine(to: CGPoint(x: 10, y: 3.17))
                shape.close()
                shape.move(to: CGPoint(x: 17.59, y: 2.76))
                shape.addLine(to: CGPoint(x: 15.41, y: 0.59))
                shape.addCurve(to: CGPoint(x: 12.59, y: 0.59), controlPoint1: CGPoint(x: 14.63, y: -0.2), controlPoint2: CGPoint(x: 13.37, y: -0.2))
                shape.addLine(to: CGPoint(x: 11, y: 2.17))
                shape.addLine(to: CGPoint(x: 16, y: 7.17))
                shape.addLine(to: CGPoint(x: 17.59, y: 5.59))
                shape.addCurve(to: CGPoint(x: 17.59, y: 2.76), controlPoint1: CGPoint(x: 18.37, y: 4.8), controlPoint2: CGPoint(x: 18.37, y: 3.54))
                shape.addLine(to: CGPoint(x: 17.59, y: 2.76))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 15.17))
                shape.addLine(to: CGPoint(x: 0, y: 18.17))
                shape.addLine(to: CGPoint(x: 3, y: 18.17))
                shape.addCurve(to: CGPoint(x: 0, y: 15.17), controlPoint1: CGPoint(x: 3, y: 16.51), controlPoint2: CGPoint(x: 1.66, y: 15.17))
                shape.addLine(to: CGPoint(x: 0, y: 15.17))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 15.17))
                context.saveGState()
                context.translateBy(x: 0, y: 0.83)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconspause(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1121, y: -425)
        
        /// gridicons-pause
        do {
            context.saveGState()
            context.translateBy(x: 1121, y: 425)
            
            /// pause
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 14))
                shape.addLine(to: CGPoint(x: 7, y: 14))
                shape.addLine(to: CGPoint(x: 7, y: 6))
                shape.addLine(to: CGPoint(x: 9, y: 6))
                shape.addLine(to: CGPoint(x: 9, y: 14))
                shape.addLine(to: CGPoint(x: 9, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 11, y: 14))
                shape.addLine(to: CGPoint(x: 11, y: 6))
                shape.addLine(to: CGPoint(x: 13, y: 6))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.addLine(to: CGPoint(x: 13, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 13, y: 14))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconspages(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 20)
        context.translateBy(x: -1095, y: -425)
        
        /// gridicons-pages
        do {
            context.saveGState()
            context.translateBy(x: 1095, y: 425)
            
            /// pages
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 12, y: 6))
                shape.addLine(to: CGPoint(x: 4, y: 6))
                shape.addLine(to: CGPoint(x: 4, y: 4))
                shape.addLine(to: CGPoint(x: 12, y: 4))
                shape.addLine(to: CGPoint(x: 12, y: 6))
                shape.addLine(to: CGPoint(x: 12, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 8))
                shape.addLine(to: CGPoint(x: 4, y: 8))
                shape.addLine(to: CGPoint(x: 4, y: 10))
                shape.addLine(to: CGPoint(x: 12, y: 10))
                shape.addLine(to: CGPoint(x: 12, y: 8))
                shape.addLine(to: CGPoint(x: 12, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 14))
                shape.addLine(to: CGPoint(x: 10, y: 20))
                shape.addLine(to: CGPoint(x: 2, y: 20))
                shape.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 0.9, y: 20), controlPoint2: CGPoint(x: 0, y: 19.11))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                shape.addLine(to: CGPoint(x: 14, y: 0))
                shape.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 15.11, y: 0), controlPoint2: CGPoint(x: 16, y: 0.9))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 12))
                shape.addLine(to: CGPoint(x: 14, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 18))
                shape.addLine(to: CGPoint(x: 8, y: 18))
                shape.addLine(to: CGPoint(x: 8, y: 14))
                shape.addCurve(to: CGPoint(x: 10, y: 12), controlPoint1: CGPoint(x: 8, y: 12.9), controlPoint2: CGPoint(x: 8.89, y: 12))
                shape.addLine(to: CGPoint(x: 14, y: 12))
                shape.addLine(to: CGPoint(x: 14, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 12))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsoffline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 18)
        context.translateBy(x: -1073, y: -425)
        
        /// gridicons-offline
        do {
            context.saveGState()
            context.translateBy(x: 1073, y: 425)
            
            /// gridicons-offline
            do {
                context.saveGState()
                
                /// Artwork
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 4, y: 0))
                    shape.addLine(to: CGPoint(x: 12, y: 0))
                    shape.addLine(to: CGPoint(x: 8, y: 6))
                    shape.addLine(to: CGPoint(x: 12, y: 6))
                    shape.addLine(to: CGPoint(x: 0, y: 18))
                    shape.addLine(to: CGPoint(x: 4, y: 9))
                    shape.addLine(to: CGPoint(x: 0, y: 9))
                    shape.addLine(to: CGPoint(x: 4, y: 0))
                    shape.addLine(to: CGPoint(x: 4, y: 0))
                    shape.close()
                    shape.move(to: CGPoint(x: 4, y: 0))
                    context.saveGState()
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsnotice(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1043, y: -425)
        
        /// gridicons-notice
        do {
            context.saveGState()
            context.translateBy(x: 1043, y: 425)
            
            /// notice
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 15))
                shape.addLine(to: CGPoint(x: 9, y: 15))
                shape.addLine(to: CGPoint(x: 9, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 15))
                shape.addLine(to: CGPoint(x: 11, y: 15))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 11))
                shape.addLine(to: CGPoint(x: 9, y: 11))
                shape.addLine(to: CGPoint(x: 8.5, y: 5))
                shape.addLine(to: CGPoint(x: 11.5, y: 5))
                shape.addLine(to: CGPoint(x: 11, y: 11))
                shape.addLine(to: CGPoint(x: 11, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 11))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsnoticeoutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1013, y: -425)
        
        /// gridicons-notice-outline
        do {
            context.saveGState()
            context.translateBy(x: 1013, y: 425)
            
            /// notice-outline
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.41, y: 2), controlPoint2: CGPoint(x: 18, y: 5.59))
                shape.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.41), controlPoint2: CGPoint(x: 14.41, y: 18))
                shape.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.59, y: 18), controlPoint2: CGPoint(x: 2, y: 14.41))
                shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.59), controlPoint2: CGPoint(x: 5.59, y: 2))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 13))
                shape.addLine(to: CGPoint(x: 9, y: 13))
                shape.addLine(to: CGPoint(x: 9, y: 15))
                shape.addLine(to: CGPoint(x: 11, y: 15))
                shape.addLine(to: CGPoint(x: 11, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 13))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 11))
                shape.addLine(to: CGPoint(x: 11, y: 11))
                shape.addLine(to: CGPoint(x: 11.5, y: 5))
                shape.addLine(to: CGPoint(x: 8.5, y: 5))
                shape.addLine(to: CGPoint(x: 9, y: 11))
                shape.addLine(to: CGPoint(x: 9, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 11))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsnotvisible(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 19)
        context.translateBy(x: -981, y: -425)
        
        /// gridicons-not-visible
        do {
            context.saveGState()
            context.translateBy(x: 981, y: 425)
            
            /// not-visible
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 0, y: 8.5))
                shape.addCurve(to: CGPoint(x: 11, y: 2.5), controlPoint1: CGPoint(x: 0, y: 8.5), controlPoint2: CGPoint(x: 4.19, y: 2.5))
                shape.addCurve(to: CGPoint(x: 13.68, y: 2.82), controlPoint1: CGPoint(x: 11.95, y: 2.5), controlPoint2: CGPoint(x: 12.84, y: 2.62))
                shape.addLine(to: CGPoint(x: 7.36, y: 9.14))
                shape.addCurve(to: CGPoint(x: 7, y: 7.5), controlPoint1: CGPoint(x: 7.13, y: 8.64), controlPoint2: CGPoint(x: 7, y: 8.09))
                shape.addCurve(to: CGPoint(x: 7.88, y: 5.03), controlPoint1: CGPoint(x: 7, y: 6.56), controlPoint2: CGPoint(x: 7.34, y: 5.71))
                shape.addCurve(to: CGPoint(x: 2.62, y: 8.5), controlPoint1: CGPoint(x: 5.48, y: 5.84), controlPoint2: CGPoint(x: 3.66, y: 7.42))
                shape.addCurve(to: CGPoint(x: 5.6, y: 10.9), controlPoint1: CGPoint(x: 3.3, y: 9.21), controlPoint2: CGPoint(x: 4.32, y: 10.12))
                shape.addLine(to: CGPoint(x: 4.15, y: 12.35))
                shape.addCurve(to: CGPoint(x: 0, y: 8.5), controlPoint1: CGPoint(x: 1.5, y: 10.63), controlPoint2: CGPoint(x: 0, y: 8.5))
                shape.addLine(to: CGPoint(x: 0, y: 8.5))
                shape.close()
                shape.move(to: CGPoint(x: 22, y: 8.5))
                shape.addCurve(to: CGPoint(x: 11, y: 14.5), controlPoint1: CGPoint(x: 22, y: 8.5), controlPoint2: CGPoint(x: 17.81, y: 14.5))
                shape.addCurve(to: CGPoint(x: 8.32, y: 14.18), controlPoint1: CGPoint(x: 10.05, y: 14.5), controlPoint2: CGPoint(x: 9.16, y: 14.38))
                shape.addLine(to: CGPoint(x: 4, y: 18.5))
                shape.addLine(to: CGPoint(x: 2.5, y: 17))
                shape.addLine(to: CGPoint(x: 19.5, y: 0))
                shape.addLine(to: CGPoint(x: 21, y: 1.5))
                shape.addLine(to: CGPoint(x: 17.85, y: 4.65))
                shape.addCurve(to: CGPoint(x: 22, y: 8.5), controlPoint1: CGPoint(x: 20.5, y: 6.37), controlPoint2: CGPoint(x: 22, y: 8.5))
                shape.addLine(to: CGPoint(x: 22, y: 8.5))
                shape.close()
                shape.move(to: CGPoint(x: 19.38, y: 8.51))
                shape.addCurve(to: CGPoint(x: 16.4, y: 6.1), controlPoint1: CGPoint(x: 18.71, y: 7.8), controlPoint2: CGPoint(x: 17.69, y: 6.88))
                shape.addLine(to: CGPoint(x: 15, y: 7.5))
                shape.addCurve(to: CGPoint(x: 11, y: 11.5), controlPoint1: CGPoint(x: 15, y: 9.71), controlPoint2: CGPoint(x: 13.21, y: 11.5))
                shape.addLine(to: CGPoint(x: 10.05, y: 12.45))
                shape.addCurve(to: CGPoint(x: 11, y: 12.5), controlPoint1: CGPoint(x: 10.36, y: 12.48), controlPoint2: CGPoint(x: 10.68, y: 12.5))
                shape.addCurve(to: CGPoint(x: 19.38, y: 8.51), controlPoint1: CGPoint(x: 14.98, y: 12.5), controlPoint2: CGPoint(x: 17.94, y: 10.02))
                shape.addLine(to: CGPoint(x: 19.38, y: 8.51))
                shape.close()
                shape.move(to: CGPoint(x: 19.38, y: 8.51))
                context.saveGState()
                context.translateBy(x: 0, y: 0.5)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }

    class func drawGridiconsnextpage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -2, y: -2)

        /// next-page
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 2)

            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 16, y: 6))
            shape.addLine(to: CGPoint(x: 8, y: 6))
            shape.addLine(to: CGPoint(x: 8, y: 4))
            shape.addLine(to: CGPoint(x: 16, y: 4))
            shape.addLine(to: CGPoint(x: 16, y: 6))
            shape.close()
            shape.move(to: CGPoint(x: 20, y: 2))
            shape.addLine(to: CGPoint(x: 20, y: 10))
            shape.addLine(to: CGPoint(x: 14, y: 16))
            shape.addLine(to: CGPoint(x: 6, y: 16))
            shape.addCurve(to: CGPoint(x: 4, y: 14), controlPoint1: CGPoint(x: 4.89, y: 16), controlPoint2: CGPoint(x: 4, y: 15.11))
            shape.addLine(to: CGPoint(x: 4, y: 2))
            shape.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 4, y: 0.9), controlPoint2: CGPoint(x: 4.89, y: 0))
            shape.addLine(to: CGPoint(x: 18, y: 0))
            shape.addCurve(to: CGPoint(x: 20, y: 2), controlPoint1: CGPoint(x: 19.11, y: 0), controlPoint2: CGPoint(x: 20, y: 0.9))
            shape.close()
            shape.move(to: CGPoint(x: 18, y: 2))
            shape.addLine(to: CGPoint(x: 6, y: 2))
            shape.addLine(to: CGPoint(x: 6, y: 14))
            shape.addLine(to: CGPoint(x: 12, y: 14))
            shape.addLine(to: CGPoint(x: 12, y: 10))
            shape.addCurve(to: CGPoint(x: 14, y: 8), controlPoint1: CGPoint(x: 12, y: 8.89), controlPoint2: CGPoint(x: 12.9, y: 8))
            shape.addLine(to: CGPoint(x: 18, y: 8))
            shape.addLine(to: CGPoint(x: 18, y: 2))
            shape.close()
            shape.move(to: CGPoint(x: 2, y: 4))
            shape.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 4.89))
            shape.addLine(to: CGPoint(x: 0, y: 18))
            shape.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.1), controlPoint2: CGPoint(x: 0.9, y: 20))
            shape.addLine(to: CGPoint(x: 14, y: 20))
            shape.addCurve(to: CGPoint(x: 16, y: 18), controlPoint1: CGPoint(x: 15.11, y: 20), controlPoint2: CGPoint(x: 16, y: 19.11))
            shape.addLine(to: CGPoint(x: 2, y: 18))
            shape.addLine(to: CGPoint(x: 2, y: 4))
            shape.close()
            shape.move(to: CGPoint(x: 2, y: 4))
            context.saveGState()
            UIColor.black.setFill()
            shape.fill()
            context.restoreGState()

            context.restoreGState()
        }

        context.restoreGState()
    }

    class func drawGridiconsmysites(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -951, y: -425)
        
        /// gridicons-my-sites
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 425)
            
            /// my-sites
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 1.5, y: 10))
                shape.addCurve(to: CGPoint(x: 2.24, y: 6.54), controlPoint1: CGPoint(x: 1.5, y: 8.77), controlPoint2: CGPoint(x: 1.76, y: 7.6))
                shape.addLine(to: CGPoint(x: 6.29, y: 17.65))
                shape.addCurve(to: CGPoint(x: 1.5, y: 10), controlPoint1: CGPoint(x: 3.46, y: 16.27), controlPoint2: CGPoint(x: 1.5, y: 13.37))
                shape.addLine(to: CGPoint(x: 1.5, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 18.5))
                shape.addCurve(to: CGPoint(x: 7.6, y: 18.16), controlPoint1: CGPoint(x: 9.17, y: 18.5), controlPoint2: CGPoint(x: 8.36, y: 18.38))
                shape.addLine(to: CGPoint(x: 10.15, y: 10.74))
                shape.addLine(to: CGPoint(x: 12.76, y: 17.9))
                shape.addCurve(to: CGPoint(x: 12.82, y: 18.02), controlPoint1: CGPoint(x: 12.78, y: 17.94), controlPoint2: CGPoint(x: 12.8, y: 17.98))
                shape.addCurve(to: CGPoint(x: 10, y: 18.5), controlPoint1: CGPoint(x: 11.94, y: 18.33), controlPoint2: CGPoint(x: 10.99, y: 18.5))
                shape.addLine(to: CGPoint(x: 10, y: 18.5))
                shape.close()
                shape.move(to: CGPoint(x: 11.17, y: 6.02))
                shape.addCurve(to: CGPoint(x: 12.15, y: 5.93), controlPoint1: CGPoint(x: 11.68, y: 5.99), controlPoint2: CGPoint(x: 12.15, y: 5.93))
                shape.addCurve(to: CGPoint(x: 12.09, y: 5.23), controlPoint1: CGPoint(x: 12.6, y: 5.88), controlPoint2: CGPoint(x: 12.55, y: 5.21))
                shape.addCurve(to: CGPoint(x: 9.82, y: 5.34), controlPoint1: CGPoint(x: 12.09, y: 5.23), controlPoint2: CGPoint(x: 10.71, y: 5.34))
                shape.addCurve(to: CGPoint(x: 7.59, y: 5.23), controlPoint1: CGPoint(x: 8.99, y: 5.34), controlPoint2: CGPoint(x: 7.59, y: 5.23))
                shape.addCurve(to: CGPoint(x: 7.53, y: 5.93), controlPoint1: CGPoint(x: 7.13, y: 5.21), controlPoint2: CGPoint(x: 7.07, y: 5.91))
                shape.addCurve(to: CGPoint(x: 8.42, y: 6.02), controlPoint1: CGPoint(x: 7.53, y: 5.93), controlPoint2: CGPoint(x: 7.97, y: 5.99))
                shape.addLine(to: CGPoint(x: 9.75, y: 9.64))
                shape.addLine(to: CGPoint(x: 7.89, y: 15.22))
                shape.addLine(to: CGPoint(x: 4.79, y: 6.02))
                shape.addCurve(to: CGPoint(x: 5.77, y: 5.93), controlPoint1: CGPoint(x: 5.3, y: 5.99), controlPoint2: CGPoint(x: 5.77, y: 5.93))
                shape.addCurve(to: CGPoint(x: 5.71, y: 5.23), controlPoint1: CGPoint(x: 6.22, y: 5.88), controlPoint2: CGPoint(x: 6.17, y: 5.21))
                shape.addCurve(to: CGPoint(x: 3.45, y: 5.34), controlPoint1: CGPoint(x: 5.71, y: 5.23), controlPoint2: CGPoint(x: 4.33, y: 5.34))
                shape.addCurve(to: CGPoint(x: 2.9, y: 5.33), controlPoint1: CGPoint(x: 3.29, y: 5.34), controlPoint2: CGPoint(x: 3.1, y: 5.34))
                shape.addCurve(to: CGPoint(x: 10, y: 1.5), controlPoint1: CGPoint(x: 4.42, y: 3.02), controlPoint2: CGPoint(x: 7.03, y: 1.5))
                shape.addCurve(to: CGPoint(x: 15.74, y: 3.73), controlPoint1: CGPoint(x: 12.21, y: 1.5), controlPoint2: CGPoint(x: 14.23, y: 2.35))
                shape.addCurve(to: CGPoint(x: 15.63, y: 3.73), controlPoint1: CGPoint(x: 15.7, y: 3.73), controlPoint2: CGPoint(x: 15.67, y: 3.73))
                shape.addCurve(to: CGPoint(x: 14.2, y: 5.23), controlPoint1: CGPoint(x: 14.8, y: 3.73), controlPoint2: CGPoint(x: 14.2, y: 4.45))
                shape.addCurve(to: CGPoint(x: 15.04, y: 7.23), controlPoint1: CGPoint(x: 14.2, y: 5.94), controlPoint2: CGPoint(x: 14.61, y: 6.53))
                shape.addCurve(to: CGPoint(x: 15.74, y: 9.57), controlPoint1: CGPoint(x: 15.36, y: 7.79), controlPoint2: CGPoint(x: 15.74, y: 8.52))
                shape.addCurve(to: CGPoint(x: 15.09, y: 12.32), controlPoint1: CGPoint(x: 15.74, y: 10.3), controlPoint2: CGPoint(x: 15.46, y: 11.14))
                shape.addLine(to: CGPoint(x: 14.24, y: 15.15))
                shape.addLine(to: CGPoint(x: 11.17, y: 6.02))
                shape.addLine(to: CGPoint(x: 11.17, y: 6.02))
                shape.close()
                shape.move(to: CGPoint(x: 14.27, y: 17.35))
                shape.addLine(to: CGPoint(x: 16.87, y: 9.84))
                shape.addCurve(to: CGPoint(x: 17.52, y: 6.8), controlPoint1: CGPoint(x: 17.35, y: 8.63), controlPoint2: CGPoint(x: 17.52, y: 7.66))
                shape.addCurve(to: CGPoint(x: 17.46, y: 5.92), controlPoint1: CGPoint(x: 17.52, y: 6.48), controlPoint2: CGPoint(x: 17.49, y: 6.19))
                shape.addCurve(to: CGPoint(x: 18.5, y: 10), controlPoint1: CGPoint(x: 18.12, y: 7.13), controlPoint2: CGPoint(x: 18.5, y: 8.52))
                shape.addCurve(to: CGPoint(x: 14.27, y: 17.35), controlPoint1: CGPoint(x: 18.5, y: 13.14), controlPoint2: CGPoint(x: 16.8, y: 15.87))
                shape.addLine(to: CGPoint(x: 14.27, y: 17.35))
                shape.close()
                shape.move(to: CGPoint(x: 14.27, y: 17.35))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsmysiteshorizon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 20)
        context.translateBy(x: -1278, y: -395)
        
        /// gridicons-my-sites-horizon
        do {
            context.saveGState()
            context.translateBy(x: 1278, y: 395)
            
            /// my-sites-horizon
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 9.94, y: 11.93))
                shape.addLine(to: CGPoint(x: 10.71, y: 9.64))
                shape.addLine(to: CGPoint(x: 9.38, y: 6.02))
                shape.addCurve(to: CGPoint(x: 8.49, y: 5.93), controlPoint1: CGPoint(x: 8.92, y: 5.99), controlPoint2: CGPoint(x: 8.49, y: 5.93))
                shape.addCurve(to: CGPoint(x: 8.54, y: 5.23), controlPoint1: CGPoint(x: 8.03, y: 5.91), controlPoint2: CGPoint(x: 8.08, y: 5.21))
                shape.addCurve(to: CGPoint(x: 10.78, y: 5.34), controlPoint1: CGPoint(x: 8.54, y: 5.23), controlPoint2: CGPoint(x: 9.95, y: 5.34))
                shape.addCurve(to: CGPoint(x: 13.05, y: 5.23), controlPoint1: CGPoint(x: 11.67, y: 5.34), controlPoint2: CGPoint(x: 13.05, y: 5.23))
                shape.addCurve(to: CGPoint(x: 13.1, y: 5.93), controlPoint1: CGPoint(x: 13.51, y: 5.21), controlPoint2: CGPoint(x: 13.56, y: 5.88))
                shape.addCurve(to: CGPoint(x: 12.13, y: 6.02), controlPoint1: CGPoint(x: 13.1, y: 5.93), controlPoint2: CGPoint(x: 12.64, y: 5.99))
                shape.addLine(to: CGPoint(x: 14.14, y: 11.98))
                shape.addCurve(to: CGPoint(x: 11.54, y: 11.92), controlPoint1: CGPoint(x: 13.26, y: 11.95), controlPoint2: CGPoint(x: 12.4, y: 11.93))
                shape.addLine(to: CGPoint(x: 11.11, y: 10.74))
                shape.addLine(to: CGPoint(x: 10.71, y: 11.91))
                shape.addCurve(to: CGPoint(x: 9.94, y: 11.93), controlPoint1: CGPoint(x: 10.45, y: 11.92), controlPoint2: CGPoint(x: 10.2, y: 11.92))
                shape.addLine(to: CGPoint(x: 9.94, y: 11.93))
                shape.close()
                shape.move(to: CGPoint(x: 2.79, y: 12.32))
                shape.addCurve(to: CGPoint(x: 2.46, y: 10), controlPoint1: CGPoint(x: 2.58, y: 11.58), controlPoint2: CGPoint(x: 2.46, y: 10.81))
                shape.addCurve(to: CGPoint(x: 3.19, y: 6.54), controlPoint1: CGPoint(x: 2.46, y: 8.77), controlPoint2: CGPoint(x: 2.72, y: 7.6))
                shape.addLine(to: CGPoint(x: 5.23, y: 12.12))
                shape.addCurve(to: CGPoint(x: 7.76, y: 11.98), controlPoint1: CGPoint(x: 6.08, y: 12.06), controlPoint2: CGPoint(x: 6.92, y: 12.02))
                shape.addLine(to: CGPoint(x: 5.75, y: 6.02))
                shape.addCurve(to: CGPoint(x: 6.72, y: 5.93), controlPoint1: CGPoint(x: 6.26, y: 5.99), controlPoint2: CGPoint(x: 6.72, y: 5.93))
                shape.addCurve(to: CGPoint(x: 6.67, y: 5.23), controlPoint1: CGPoint(x: 7.18, y: 5.88), controlPoint2: CGPoint(x: 7.13, y: 5.21))
                shape.addCurve(to: CGPoint(x: 4.4, y: 5.34), controlPoint1: CGPoint(x: 6.67, y: 5.23), controlPoint2: CGPoint(x: 5.29, y: 5.34))
                shape.addCurve(to: CGPoint(x: 3.86, y: 5.33), controlPoint1: CGPoint(x: 4.24, y: 5.34), controlPoint2: CGPoint(x: 4.06, y: 5.34))
                shape.addCurve(to: CGPoint(x: 10.96, y: 1.5), controlPoint1: CGPoint(x: 5.38, y: 3.02), controlPoint2: CGPoint(x: 7.99, y: 1.5))
                shape.addCurve(to: CGPoint(x: 16.7, y: 3.73), controlPoint1: CGPoint(x: 13.17, y: 1.5), controlPoint2: CGPoint(x: 15.19, y: 2.35))
                shape.addCurve(to: CGPoint(x: 16.59, y: 3.73), controlPoint1: CGPoint(x: 16.66, y: 3.73), controlPoint2: CGPoint(x: 16.63, y: 3.73))
                shape.addCurve(to: CGPoint(x: 15.16, y: 5.23), controlPoint1: CGPoint(x: 15.75, y: 3.73), controlPoint2: CGPoint(x: 15.16, y: 4.45))
                shape.addCurve(to: CGPoint(x: 16, y: 7.23), controlPoint1: CGPoint(x: 15.16, y: 5.94), controlPoint2: CGPoint(x: 15.57, y: 6.53))
                shape.addCurve(to: CGPoint(x: 16.7, y: 9.57), controlPoint1: CGPoint(x: 16.32, y: 7.79), controlPoint2: CGPoint(x: 16.7, y: 8.52))
                shape.addCurve(to: CGPoint(x: 16.12, y: 12.08), controlPoint1: CGPoint(x: 16.7, y: 10.25), controlPoint2: CGPoint(x: 16.45, y: 11.04))
                shape.addCurve(to: CGPoint(x: 17.03, y: 12.15), controlPoint1: CGPoint(x: 16.43, y: 12.1), controlPoint2: CGPoint(x: 16.73, y: 12.13))
                shape.addLine(to: CGPoint(x: 17.83, y: 9.84))
                shape.addCurve(to: CGPoint(x: 18.47, y: 6.8), controlPoint1: CGPoint(x: 18.31, y: 8.63), controlPoint2: CGPoint(x: 18.47, y: 7.66))
                shape.addCurve(to: CGPoint(x: 18.42, y: 5.92), controlPoint1: CGPoint(x: 18.47, y: 6.48), controlPoint2: CGPoint(x: 18.45, y: 6.19))
                shape.addCurve(to: CGPoint(x: 19.46, y: 10), controlPoint1: CGPoint(x: 19.08, y: 7.13), controlPoint2: CGPoint(x: 19.46, y: 8.52))
                shape.addCurve(to: CGPoint(x: 19.12, y: 12.32), controlPoint1: CGPoint(x: 19.46, y: 10.81), controlPoint2: CGPoint(x: 19.33, y: 11.58))
                shape.addCurve(to: CGPoint(x: 20.63, y: 12.49), controlPoint1: CGPoint(x: 19.62, y: 12.37), controlPoint2: CGPoint(x: 20.12, y: 12.43))
                shape.addCurve(to: CGPoint(x: 20.96, y: 10), controlPoint1: CGPoint(x: 20.83, y: 11.69), controlPoint2: CGPoint(x: 20.96, y: 10.86))
                shape.addCurve(to: CGPoint(x: 10.96, y: 0), controlPoint1: CGPoint(x: 20.96, y: 4.48), controlPoint2: CGPoint(x: 16.48, y: 0))
                shape.addCurve(to: CGPoint(x: 0.96, y: 10), controlPoint1: CGPoint(x: 5.44, y: 0), controlPoint2: CGPoint(x: 0.96, y: 4.48))
                shape.addCurve(to: CGPoint(x: 1.29, y: 12.49), controlPoint1: CGPoint(x: 0.96, y: 10.86), controlPoint2: CGPoint(x: 1.08, y: 11.69))
                shape.addCurve(to: CGPoint(x: 2.79, y: 12.32), controlPoint1: CGPoint(x: 1.79, y: 12.43), controlPoint2: CGPoint(x: 2.29, y: 12.37))
                shape.addLine(to: CGPoint(x: 2.79, y: 12.32))
                shape.close()
                shape.move(to: CGPoint(x: 17.43, y: 15.49))
                shape.addCurve(to: CGPoint(x: 10.96, y: 18.5), controlPoint1: CGPoint(x: 15.63, y: 17.67), controlPoint2: CGPoint(x: 13.08, y: 18.5))
                shape.addCurve(to: CGPoint(x: 4.5, y: 15.49), controlPoint1: CGPoint(x: 9.08, y: 18.5), controlPoint2: CGPoint(x: 6.41, y: 17.8))
                shape.addCurve(to: CGPoint(x: 2.73, y: 15.65), controlPoint1: CGPoint(x: 3.91, y: 15.54), controlPoint2: CGPoint(x: 3.32, y: 15.59))
                shape.addCurve(to: CGPoint(x: 10.96, y: 20), controlPoint1: CGPoint(x: 4.53, y: 18.27), controlPoint2: CGPoint(x: 7.54, y: 20))
                shape.addCurve(to: CGPoint(x: 19.19, y: 15.65), controlPoint1: CGPoint(x: 14.38, y: 20), controlPoint2: CGPoint(x: 17.39, y: 18.27))
                shape.addCurve(to: CGPoint(x: 17.43, y: 15.49), controlPoint1: CGPoint(x: 18.6, y: 15.59), controlPoint2: CGPoint(x: 18.01, y: 15.54))
                shape.addLine(to: CGPoint(x: 17.43, y: 15.49))
                shape.close()
                shape.move(to: CGPoint(x: 10.96, y: 13.01))
                shape.addCurve(to: CGPoint(x: 0, y: 13.74), controlPoint1: CGPoint(x: 7.24, y: 13.01), controlPoint2: CGPoint(x: 3.59, y: 13.28))
                shape.addCurve(to: CGPoint(x: 0.51, y: 14.99), controlPoint1: CGPoint(x: 0.18, y: 14.15), controlPoint2: CGPoint(x: 0.35, y: 14.57))
                shape.addCurve(to: CGPoint(x: 10.96, y: 14.31), controlPoint1: CGPoint(x: 3.93, y: 14.56), controlPoint2: CGPoint(x: 7.42, y: 14.31))
                shape.addCurve(to: CGPoint(x: 21.41, y: 14.99), controlPoint1: CGPoint(x: 14.5, y: 14.31), controlPoint2: CGPoint(x: 17.98, y: 14.56))
                shape.addCurve(to: CGPoint(x: 21.92, y: 13.74), controlPoint1: CGPoint(x: 21.57, y: 14.57), controlPoint2: CGPoint(x: 21.74, y: 14.15))
                shape.addCurve(to: CGPoint(x: 10.96, y: 13.01), controlPoint1: CGPoint(x: 18.33, y: 13.28), controlPoint2: CGPoint(x: 14.67, y: 13.01))
                shape.addLine(to: CGPoint(x: 10.96, y: 13.01))
                shape.close()
                shape.move(to: CGPoint(x: 10.96, y: 13.01))
                context.saveGState()
                context.translateBy(x: 0.04, y: 0)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsmoney(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 14)
        context.translateBy(x: -1248, y: -395)
        
        /// gridicons-money
        do {
            context.saveGState()
            context.translateBy(x: 1248, y: 395)
            
            /// money
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 20, y: 14))
                shape.addLine(to: CGPoint(x: 20, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint.zero)
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 12))
                shape.addCurve(to: CGPoint(x: 2, y: 9), controlPoint1: CGPoint(x: 5, y: 10.34), controlPoint2: CGPoint(x: 3.66, y: 9))
                shape.addLine(to: CGPoint(x: 2, y: 5))
                shape.addCurve(to: CGPoint(x: 5, y: 2), controlPoint1: CGPoint(x: 3.66, y: 5), controlPoint2: CGPoint(x: 5, y: 3.66))
                shape.addLine(to: CGPoint(x: 15, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 5), controlPoint1: CGPoint(x: 15, y: 3.66), controlPoint2: CGPoint(x: 16.34, y: 5))
                shape.addLine(to: CGPoint(x: 18, y: 9))
                shape.addCurve(to: CGPoint(x: 15, y: 12), controlPoint1: CGPoint(x: 16.34, y: 9), controlPoint2: CGPoint(x: 15, y: 10.34))
                shape.addLine(to: CGPoint(x: 5, y: 12))
                shape.addLine(to: CGPoint(x: 5, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 4))
                shape.addCurve(to: CGPoint(x: 12, y: 7), controlPoint1: CGPoint(x: 11.1, y: 4), controlPoint2: CGPoint(x: 12, y: 5.3))
                shape.addCurve(to: CGPoint(x: 10, y: 10), controlPoint1: CGPoint(x: 12, y: 8.7), controlPoint2: CGPoint(x: 11.1, y: 10))
                shape.addCurve(to: CGPoint(x: 8, y: 7), controlPoint1: CGPoint(x: 8.9, y: 10), controlPoint2: CGPoint(x: 8, y: 8.7))
                shape.addCurve(to: CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 8, y: 5.3), controlPoint2: CGPoint(x: 8.9, y: 4))
                shape.addLine(to: CGPoint(x: 10, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 4))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsminus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 2), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 2), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 2)
        context.translateBy(x: -1220, y: -395)
        
        /// gridicons-minus
        do {
            context.saveGState()
            context.translateBy(x: 1220, y: 395)
            
            /// minus
            do {
                context.saveGState()
                
                /// Rectangle-path
                let rectanglepath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 18, height: 2))
                context.saveGState()
                UIColor.black.setFill()
                rectanglepath.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsminussmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 2), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 2), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 2)
        context.translateBy(x: -1198, y: -395)
        
        /// gridicons-minus-small
        do {
            context.saveGState()
            context.translateBy(x: 1198, y: 395)
            
            /// minus-small
            do {
                context.saveGState()
                
                /// Rectangle-path
                let rectanglepath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 12, height: 2))
                context.saveGState()
                UIColor.black.setFill()
                rectanglepath.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsmicrophone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 20)
        context.translateBy(x: -1174, y: -395)
        
        /// gridicons-microphone
        do {
            context.saveGState()
            context.translateBy(x: 1174, y: 395)
            
            /// gridicons-microphone
            do {
                context.saveGState()
                
                /// Artwork
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 14, y: 7))
                    shape.addLine(to: CGPoint(x: 14, y: 8))
                    shape.addCurve(to: CGPoint(x: 8, y: 14.92), controlPoint1: CGPoint(x: 14, y: 11.48), controlPoint2: CGPoint(x: 11.44, y: 14.42))
                    shape.addLine(to: CGPoint(x: 8, y: 18))
                    shape.addLine(to: CGPoint(x: 11, y: 18))
                    shape.addLine(to: CGPoint(x: 11, y: 20))
                    shape.addLine(to: CGPoint(x: 3, y: 20))
                    shape.addLine(to: CGPoint(x: 3, y: 18))
                    shape.addLine(to: CGPoint(x: 6, y: 18))
                    shape.addLine(to: CGPoint(x: 6, y: 14.92))
                    shape.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 2.56, y: 14.42), controlPoint2: CGPoint(x: 0, y: 11.48))
                    shape.addLine(to: CGPoint(x: 0, y: 7))
                    shape.addLine(to: CGPoint(x: 2, y: 7))
                    shape.addLine(to: CGPoint(x: 2, y: 8))
                    shape.addCurve(to: CGPoint(x: 7, y: 13), controlPoint1: CGPoint(x: 2, y: 10.76), controlPoint2: CGPoint(x: 4.24, y: 13))
                    shape.addCurve(to: CGPoint(x: 12, y: 8), controlPoint1: CGPoint(x: 9.76, y: 13), controlPoint2: CGPoint(x: 12, y: 10.76))
                    shape.addLine(to: CGPoint(x: 12, y: 7))
                    shape.addLine(to: CGPoint(x: 14, y: 7))
                    shape.close()
                    shape.move(to: CGPoint(x: 7, y: 11))
                    shape.addCurve(to: CGPoint(x: 10, y: 8), controlPoint1: CGPoint(x: 8.66, y: 11), controlPoint2: CGPoint(x: 10, y: 9.66))
                    shape.addLine(to: CGPoint(x: 10, y: 3))
                    shape.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 10, y: 1.34), controlPoint2: CGPoint(x: 8.66, y: 0))
                    shape.addCurve(to: CGPoint(x: 4, y: 3), controlPoint1: CGPoint(x: 5.34, y: 0), controlPoint2: CGPoint(x: 4, y: 1.34))
                    shape.addLine(to: CGPoint(x: 4, y: 8))
                    shape.addCurve(to: CGPoint(x: 7, y: 11), controlPoint1: CGPoint(x: 4, y: 9.66), controlPoint2: CGPoint(x: 5.34, y: 11))
                    shape.addLine(to: CGPoint(x: 7, y: 11))
                    shape.close()
                    shape.move(to: CGPoint(x: 7, y: 11))
                    context.saveGState()
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsmenus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 16)
        context.translateBy(x: -1146, y: -395)
        
        /// gridicons-menus
        do {
            context.saveGState()
            context.translateBy(x: 1146, y: 395)
            
            /// menus
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 5.5, y: 14.5))
                shape.addLine(to: CGPoint(x: 15.5, y: 14.5))
                shape.addLine(to: CGPoint(x: 15.5, y: 12.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 12.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 14.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 14.5))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 8.5))
                shape.addLine(to: CGPoint(x: 11.5, y: 8.5))
                shape.addLine(to: CGPoint(x: 11.5, y: 6.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 6.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 8.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 8.5))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 0.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 2.5))
                shape.addLine(to: CGPoint(x: 17.5, y: 2.5))
                shape.addLine(to: CGPoint(x: 17.5, y: 0.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 0.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 0.5))
                shape.close()
                shape.move(to: CGPoint(x: 1.5, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.67, y: 0), controlPoint2: CGPoint(x: 0, y: 0.67))
                shape.addCurve(to: CGPoint(x: 1.5, y: 3), controlPoint1: CGPoint(x: 0, y: 2.33), controlPoint2: CGPoint(x: 0.67, y: 3))
                shape.addCurve(to: CGPoint(x: 3, y: 1.5), controlPoint1: CGPoint(x: 2.33, y: 3), controlPoint2: CGPoint(x: 3, y: 2.33))
                shape.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 3, y: 0.67), controlPoint2: CGPoint(x: 2.33, y: 0))
                shape.addLine(to: CGPoint(x: 1.5, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 1.5, y: 6))
                shape.addCurve(to: CGPoint(x: 0, y: 7.5), controlPoint1: CGPoint(x: 0.67, y: 6), controlPoint2: CGPoint(x: 0, y: 6.67))
                shape.addCurve(to: CGPoint(x: 1.5, y: 9), controlPoint1: CGPoint(x: 0, y: 8.33), controlPoint2: CGPoint(x: 0.67, y: 9))
                shape.addCurve(to: CGPoint(x: 3, y: 7.5), controlPoint1: CGPoint(x: 2.33, y: 9), controlPoint2: CGPoint(x: 3, y: 8.33))
                shape.addCurve(to: CGPoint(x: 1.5, y: 6), controlPoint1: CGPoint(x: 3, y: 6.67), controlPoint2: CGPoint(x: 2.33, y: 6))
                shape.addLine(to: CGPoint(x: 1.5, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 1.5, y: 12))
                shape.addCurve(to: CGPoint(x: 0, y: 13.5), controlPoint1: CGPoint(x: 0.67, y: 12), controlPoint2: CGPoint(x: 0, y: 12.67))
                shape.addCurve(to: CGPoint(x: 1.5, y: 15), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 0.67, y: 15))
                shape.addCurve(to: CGPoint(x: 3, y: 13.5), controlPoint1: CGPoint(x: 2.33, y: 15), controlPoint2: CGPoint(x: 3, y: 14.33))
                shape.addCurve(to: CGPoint(x: 1.5, y: 12), controlPoint1: CGPoint(x: 3, y: 12.67), controlPoint2: CGPoint(x: 2.33, y: 12))
                shape.addLine(to: CGPoint(x: 1.5, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 1.5, y: 12))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.5)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsmenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 12), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 12)
        context.translateBy(x: -1118, y: -395)
        
        /// gridicons-menu
        do {
            context.saveGState()
            context.translateBy(x: 1118, y: 395)
            
            /// menu
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 18, y: 12))
                shape.addLine(to: CGPoint(x: 18, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 7))
                shape.addLine(to: CGPoint(x: 18, y: 7))
                shape.addLine(to: CGPoint(x: 18, y: 5))
                shape.addLine(to: CGPoint(x: 0, y: 5))
                shape.addLine(to: CGPoint(x: 0, y: 7))
                shape.addLine(to: CGPoint(x: 0, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 7))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsmention(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1088, y: -395)
        
        /// gridicons-mention
        do {
            context.saveGState()
            context.translateBy(x: 1088, y: 395)
            
            /// gridicons-mention
            do {
                context.saveGState()
                
                /// Artwork
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 10, y: 0))
                    shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                    shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                    shape.addLine(to: CGPoint(x: 10, y: 18))
                    shape.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
                    shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
                    shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
                    shape.addLine(to: CGPoint(x: 18, y: 10.5))
                    shape.addCurve(to: CGPoint(x: 16.5, y: 12), controlPoint1: CGPoint(x: 18, y: 11.33), controlPoint2: CGPoint(x: 17.33, y: 12))
                    shape.addCurve(to: CGPoint(x: 15, y: 10.5), controlPoint1: CGPoint(x: 15.67, y: 12), controlPoint2: CGPoint(x: 15, y: 11.33))
                    shape.addLine(to: CGPoint(x: 15, y: 5))
                    shape.addLine(to: CGPoint(x: 13, y: 5))
                    shape.addLine(to: CGPoint(x: 13, y: 6))
                    shape.addCurve(to: CGPoint(x: 6, y: 7), controlPoint1: CGPoint(x: 10.79, y: 4.34), controlPoint2: CGPoint(x: 7.66, y: 4.79))
                    shape.addCurve(to: CGPoint(x: 7, y: 14), controlPoint1: CGPoint(x: 4.34, y: 9.21), controlPoint2: CGPoint(x: 4.79, y: 12.34))
                    shape.addCurve(to: CGPoint(x: 14, y: 13), controlPoint1: CGPoint(x: 9.21, y: 15.66), controlPoint2: CGPoint(x: 12.34, y: 15.21))
                    shape.addCurve(to: CGPoint(x: 17.83, y: 13.79), controlPoint1: CGPoint(x: 15, y: 14.02), controlPoint2: CGPoint(x: 16.51, y: 14.33))
                    shape.addCurve(to: CGPoint(x: 20, y: 10.54), controlPoint1: CGPoint(x: 19.15, y: 13.25), controlPoint2: CGPoint(x: 20, y: 11.96))
                    shape.addLine(to: CGPoint(x: 20, y: 10))
                    shape.addCurve(to: CGPoint(x: 17.07, y: 2.93), controlPoint1: CGPoint(x: 20, y: 7.35), controlPoint2: CGPoint(x: 18.95, y: 4.8))
                    shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 15.2, y: 1.05), controlPoint2: CGPoint(x: 12.65, y: 0))
                    shape.addLine(to: CGPoint(x: 10, y: 0))
                    shape.close()
                    shape.move(to: CGPoint(x: 10, y: 13))
                    shape.addCurve(to: CGPoint(x: 7, y: 10), controlPoint1: CGPoint(x: 8.34, y: 13), controlPoint2: CGPoint(x: 7, y: 11.66))
                    shape.addCurve(to: CGPoint(x: 10, y: 7), controlPoint1: CGPoint(x: 7, y: 8.34), controlPoint2: CGPoint(x: 8.34, y: 7))
                    shape.addCurve(to: CGPoint(x: 13, y: 10), controlPoint1: CGPoint(x: 11.66, y: 7), controlPoint2: CGPoint(x: 13, y: 8.34))
                    shape.addCurve(to: CGPoint(x: 12.12, y: 12.12), controlPoint1: CGPoint(x: 13, y: 10.8), controlPoint2: CGPoint(x: 12.68, y: 11.56))
                    shape.addCurve(to: CGPoint(x: 10, y: 13), controlPoint1: CGPoint(x: 11.56, y: 12.68), controlPoint2: CGPoint(x: 10.8, y: 13))
                    shape.addLine(to: CGPoint(x: 10, y: 13))
                    shape.close()
                    shape.move(to: CGPoint(x: 10, y: 13))
                    context.saveGState()
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsmail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 16)
        context.translateBy(x: -1058, y: -395)
        
        /// gridicons-mail
        do {
            context.saveGState()
            context.translateBy(x: 1058, y: 395)
            
            /// mail
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addCurve(to: CGPoint(x: 2, y: 16), controlPoint1: CGPoint(x: 0, y: 15.11), controlPoint2: CGPoint(x: 0.9, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 19.11, y: 16), controlPoint2: CGPoint(x: 20, y: 15.11))
                shape.addLine(to: CGPoint(x: 20, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 20, y: 0.9), controlPoint2: CGPoint(x: 19.11, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 4.24))
                shape.addLine(to: CGPoint(x: 10, y: 9.12))
                shape.addLine(to: CGPoint(x: 2, y: 4.24))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 4.24))
                shape.addLine(to: CGPoint(x: 18, y: 4.24))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 4.24))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconslock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 20)
        context.translateBy(x: -1032, y: -395)
        
        /// gridicons-lock
        do {
            context.saveGState()
            context.translateBy(x: 1032, y: 395)
            
            /// lock
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 14, y: 6))
                shape.addLine(to: CGPoint(x: 13, y: 6))
                shape.addLine(to: CGPoint(x: 13, y: 5))
                shape.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 13, y: 2.24), controlPoint2: CGPoint(x: 10.76, y: 0))
                shape.addCurve(to: CGPoint(x: 3, y: 5), controlPoint1: CGPoint(x: 5.24, y: 0), controlPoint2: CGPoint(x: 3, y: 2.24))
                shape.addLine(to: CGPoint(x: 3, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.9, y: 6), controlPoint2: CGPoint(x: 0, y: 6.89))
                shape.addLine(to: CGPoint(x: 0, y: 18))
                shape.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.11), controlPoint2: CGPoint(x: 0.9, y: 20))
                shape.addLine(to: CGPoint(x: 14, y: 20))
                shape.addCurve(to: CGPoint(x: 16, y: 18), controlPoint1: CGPoint(x: 15.11, y: 20), controlPoint2: CGPoint(x: 16, y: 19.11))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addCurve(to: CGPoint(x: 14, y: 6), controlPoint1: CGPoint(x: 16, y: 6.89), controlPoint2: CGPoint(x: 15.11, y: 6))
                shape.addLine(to: CGPoint(x: 14, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 5))
                shape.addCurve(to: CGPoint(x: 8, y: 2), controlPoint1: CGPoint(x: 5, y: 3.35), controlPoint2: CGPoint(x: 6.35, y: 2))
                shape.addCurve(to: CGPoint(x: 11, y: 5), controlPoint1: CGPoint(x: 9.65, y: 2), controlPoint2: CGPoint(x: 11, y: 3.35))
                shape.addLine(to: CGPoint(x: 11, y: 6))
                shape.addLine(to: CGPoint(x: 5, y: 6))
                shape.addLine(to: CGPoint(x: 5, y: 5))
                shape.addLine(to: CGPoint(x: 5, y: 5))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 13.72))
                shape.addLine(to: CGPoint(x: 9, y: 16))
                shape.addLine(to: CGPoint(x: 7, y: 16))
                shape.addLine(to: CGPoint(x: 7, y: 13.72))
                shape.addCurve(to: CGPoint(x: 6, y: 12), controlPoint1: CGPoint(x: 6.41, y: 13.38), controlPoint2: CGPoint(x: 6, y: 12.74))
                shape.addCurve(to: CGPoint(x: 8, y: 10), controlPoint1: CGPoint(x: 6, y: 10.9), controlPoint2: CGPoint(x: 6.89, y: 10))
                shape.addCurve(to: CGPoint(x: 10, y: 12), controlPoint1: CGPoint(x: 9.11, y: 10), controlPoint2: CGPoint(x: 10, y: 10.9))
                shape.addCurve(to: CGPoint(x: 9, y: 13.72), controlPoint1: CGPoint(x: 10, y: 12.74), controlPoint2: CGPoint(x: 9.6, y: 13.38))
                shape.addLine(to: CGPoint(x: 9, y: 13.72))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 13.72))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconslocation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 20)
        context.translateBy(x: -1008, y: -395)
        
        /// gridicons-location
        do {
            context.saveGState()
            context.translateBy(x: 1008, y: 395)
            
            /// location
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 14, y: 7))
                shape.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 14, y: 3.13), controlPoint2: CGPoint(x: 10.87, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 7), controlPoint1: CGPoint(x: 3.13, y: 0), controlPoint2: CGPoint(x: 0, y: 3.13))
                shape.addCurve(to: CGPoint(x: 1.11, y: 10.77), controlPoint1: CGPoint(x: 0, y: 8.39), controlPoint2: CGPoint(x: 0.41, y: 9.68))
                shape.addLine(to: CGPoint(x: 1.1, y: 10.77))
                shape.addCurve(to: CGPoint(x: 7, y: 20), controlPoint1: CGPoint(x: 3.46, y: 14.46), controlPoint2: CGPoint(x: 7, y: 20))
                shape.addCurve(to: CGPoint(x: 12.9, y: 10.77), controlPoint1: CGPoint(x: 7, y: 20), controlPoint2: CGPoint(x: 10.54, y: 14.46))
                shape.addLine(to: CGPoint(x: 12.9, y: 10.77))
                shape.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 13.59, y: 9.68), controlPoint2: CGPoint(x: 14, y: 8.39))
                shape.addLine(to: CGPoint(x: 14, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 7, y: 10))
                shape.addCurve(to: CGPoint(x: 4, y: 7), controlPoint1: CGPoint(x: 5.34, y: 10), controlPoint2: CGPoint(x: 4, y: 8.66))
                shape.addCurve(to: CGPoint(x: 7, y: 4), controlPoint1: CGPoint(x: 4, y: 5.34), controlPoint2: CGPoint(x: 5.34, y: 4))
                shape.addCurve(to: CGPoint(x: 10, y: 7), controlPoint1: CGPoint(x: 8.66, y: 4), controlPoint2: CGPoint(x: 10, y: 5.34))
                shape.addCurve(to: CGPoint(x: 7, y: 10), controlPoint1: CGPoint(x: 10, y: 8.66), controlPoint2: CGPoint(x: 8.66, y: 10))
                shape.addLine(to: CGPoint(x: 7, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 7, y: 10))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconslistunordered(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 16)
        context.translateBy(x: -980, y: -395)
        
        /// gridicons-list-unordered
        do {
            context.saveGState()
            context.translateBy(x: 980, y: 395)
            
            /// list-unordered
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 5.5, y: 14.5))
                shape.addLine(to: CGPoint(x: 17.5, y: 14.5))
                shape.addLine(to: CGPoint(x: 17.5, y: 12.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 12.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 14.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 14.5))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 8.5))
                shape.addLine(to: CGPoint(x: 17.5, y: 8.5))
                shape.addLine(to: CGPoint(x: 17.5, y: 6.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 6.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 8.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 8.5))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 0.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 2.5))
                shape.addLine(to: CGPoint(x: 17.5, y: 2.5))
                shape.addLine(to: CGPoint(x: 17.5, y: 0.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 0.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 0.5))
                shape.close()
                shape.move(to: CGPoint(x: 1.5, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.67, y: 0), controlPoint2: CGPoint(x: 0, y: 0.67))
                shape.addCurve(to: CGPoint(x: 1.5, y: 3), controlPoint1: CGPoint(x: 0, y: 2.33), controlPoint2: CGPoint(x: 0.67, y: 3))
                shape.addCurve(to: CGPoint(x: 3, y: 1.5), controlPoint1: CGPoint(x: 2.33, y: 3), controlPoint2: CGPoint(x: 3, y: 2.33))
                shape.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 3, y: 0.67), controlPoint2: CGPoint(x: 2.33, y: 0))
                shape.addLine(to: CGPoint(x: 1.5, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 1.5, y: 6))
                shape.addCurve(to: CGPoint(x: 0, y: 7.5), controlPoint1: CGPoint(x: 0.67, y: 6), controlPoint2: CGPoint(x: 0, y: 6.67))
                shape.addCurve(to: CGPoint(x: 1.5, y: 9), controlPoint1: CGPoint(x: 0, y: 8.33), controlPoint2: CGPoint(x: 0.67, y: 9))
                shape.addCurve(to: CGPoint(x: 3, y: 7.5), controlPoint1: CGPoint(x: 2.33, y: 9), controlPoint2: CGPoint(x: 3, y: 8.33))
                shape.addCurve(to: CGPoint(x: 1.5, y: 6), controlPoint1: CGPoint(x: 3, y: 6.67), controlPoint2: CGPoint(x: 2.33, y: 6))
                shape.addLine(to: CGPoint(x: 1.5, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 1.5, y: 12))
                shape.addCurve(to: CGPoint(x: 0, y: 13.5), controlPoint1: CGPoint(x: 0.67, y: 12), controlPoint2: CGPoint(x: 0, y: 12.67))
                shape.addCurve(to: CGPoint(x: 1.5, y: 15), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 0.67, y: 15))
                shape.addCurve(to: CGPoint(x: 3, y: 13.5), controlPoint1: CGPoint(x: 2.33, y: 15), controlPoint2: CGPoint(x: 3, y: 14.33))
                shape.addCurve(to: CGPoint(x: 1.5, y: 12), controlPoint1: CGPoint(x: 3, y: 12.67), controlPoint2: CGPoint(x: 2.33, y: 12))
                shape.addLine(to: CGPoint(x: 1.5, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 1.5, y: 12))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.5)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconslistordered(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 18)
        context.translateBy(x: -951, y: -395)
        
        /// gridicons-list-ordered
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 395)
            
            /// list-ordered
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 5.63, y: 15.28))
                shape.addLine(to: CGPoint(x: 18.63, y: 15.28))
                shape.addLine(to: CGPoint(x: 18.63, y: 13.28))
                shape.addLine(to: CGPoint(x: 5.63, y: 13.28))
                shape.addLine(to: CGPoint(x: 5.63, y: 15.28))
                shape.addLine(to: CGPoint(x: 5.63, y: 15.28))
                shape.close()
                shape.move(to: CGPoint(x: 5.63, y: 9.28))
                shape.addLine(to: CGPoint(x: 18.63, y: 9.28))
                shape.addLine(to: CGPoint(x: 18.63, y: 7.28))
                shape.addLine(to: CGPoint(x: 5.63, y: 7.28))
                shape.addLine(to: CGPoint(x: 5.63, y: 9.28))
                shape.addLine(to: CGPoint(x: 5.63, y: 9.28))
                shape.close()
                shape.move(to: CGPoint(x: 5.63, y: 1.28))
                shape.addLine(to: CGPoint(x: 5.63, y: 3.28))
                shape.addLine(to: CGPoint(x: 18.63, y: 3.28))
                shape.addLine(to: CGPoint(x: 18.63, y: 1.28))
                shape.addLine(to: CGPoint(x: 5.63, y: 1.28))
                shape.addLine(to: CGPoint(x: 5.63, y: 1.28))
                shape.close()
                shape.move(to: CGPoint(x: 1.2, y: 1.54))
                shape.addCurve(to: CGPoint(x: 1.47, y: 1.26), controlPoint1: CGPoint(x: 1.31, y: 1.44), controlPoint2: CGPoint(x: 1.4, y: 1.35))
                shape.addCurve(to: CGPoint(x: 1.45, y: 2.02), controlPoint1: CGPoint(x: 1.46, y: 1.49), controlPoint2: CGPoint(x: 1.45, y: 1.74))
                shape.addLine(to: CGPoint(x: 1.45, y: 4.28))
                shape.addLine(to: CGPoint(x: 2.63, y: 4.28))
                shape.addLine(to: CGPoint(x: 2.63, y: 0))
                shape.addLine(to: CGPoint(x: 1.59, y: 0))
                shape.addLine(to: CGPoint(x: 0.11, y: 1.2))
                shape.addLine(to: CGPoint(x: 0.72, y: 1.94))
                shape.addLine(to: CGPoint(x: 1.2, y: 1.54))
                shape.addLine(to: CGPoint(x: 1.2, y: 1.54))
                shape.close()
                shape.move(to: CGPoint(x: 1.54, y: 9.3))
                shape.addCurve(to: CGPoint(x: 2.46, y: 8.43), controlPoint1: CGPoint(x: 2.01, y: 8.87), controlPoint2: CGPoint(x: 2.32, y: 8.58))
                shape.addCurve(to: CGPoint(x: 2.82, y: 8), controlPoint1: CGPoint(x: 2.61, y: 8.28), controlPoint2: CGPoint(x: 2.73, y: 8.14))
                shape.addCurve(to: CGPoint(x: 3.01, y: 7.58), controlPoint1: CGPoint(x: 2.9, y: 7.86), controlPoint2: CGPoint(x: 2.97, y: 7.72))
                shape.addCurve(to: CGPoint(x: 3.07, y: 7.11), controlPoint1: CGPoint(x: 3.05, y: 7.43), controlPoint2: CGPoint(x: 3.07, y: 7.28))
                shape.addCurve(to: CGPoint(x: 2.89, y: 6.5), controlPoint1: CGPoint(x: 3.07, y: 6.89), controlPoint2: CGPoint(x: 3.01, y: 6.68))
                shape.addCurve(to: CGPoint(x: 2.39, y: 6.09), controlPoint1: CGPoint(x: 2.77, y: 6.32), controlPoint2: CGPoint(x: 2.6, y: 6.18))
                shape.addCurve(to: CGPoint(x: 1.64, y: 5.94), controlPoint1: CGPoint(x: 2.17, y: 5.99), controlPoint2: CGPoint(x: 1.92, y: 5.94))
                shape.addCurve(to: CGPoint(x: 1.05, y: 6.01), controlPoint1: CGPoint(x: 1.42, y: 5.94), controlPoint2: CGPoint(x: 1.22, y: 5.96))
                shape.addCurve(to: CGPoint(x: 0.56, y: 6.2), controlPoint1: CGPoint(x: 0.87, y: 6.05), controlPoint2: CGPoint(x: 0.71, y: 6.12))
                shape.addCurve(to: CGPoint(x: 0, y: 6.62), controlPoint1: CGPoint(x: 0.41, y: 6.29), controlPoint2: CGPoint(x: 0.22, y: 6.43))
                shape.addLine(to: CGPoint(x: 0.64, y: 7.37))
                shape.addCurve(to: CGPoint(x: 1.1, y: 7.03), controlPoint1: CGPoint(x: 0.81, y: 7.22), controlPoint2: CGPoint(x: 0.97, y: 7.1))
                shape.addCurve(to: CGPoint(x: 1.51, y: 6.91), controlPoint1: CGPoint(x: 1.24, y: 6.95), controlPoint2: CGPoint(x: 1.38, y: 6.91))
                shape.addCurve(to: CGPoint(x: 1.82, y: 7.01), controlPoint1: CGPoint(x: 1.64, y: 6.91), controlPoint2: CGPoint(x: 1.74, y: 6.94))
                shape.addCurve(to: CGPoint(x: 1.93, y: 7.27), controlPoint1: CGPoint(x: 1.89, y: 7.07), controlPoint2: CGPoint(x: 1.93, y: 7.16))
                shape.addCurve(to: CGPoint(x: 1.87, y: 7.53), controlPoint1: CGPoint(x: 1.93, y: 7.36), controlPoint2: CGPoint(x: 1.91, y: 7.45))
                shape.addCurve(to: CGPoint(x: 1.68, y: 7.82), controlPoint1: CGPoint(x: 1.84, y: 7.61), controlPoint2: CGPoint(x: 1.77, y: 7.71))
                shape.addCurve(to: CGPoint(x: 1.09, y: 8.46), controlPoint1: CGPoint(x: 1.59, y: 7.94), controlPoint2: CGPoint(x: 1.39, y: 8.15))
                shape.addLine(to: CGPoint(x: 0.05, y: 9.52))
                shape.addLine(to: CGPoint(x: 0.05, y: 10.28))
                shape.addLine(to: CGPoint(x: 3.16, y: 10.28))
                shape.addLine(to: CGPoint(x: 3.16, y: 9.33))
                shape.addLine(to: CGPoint(x: 1.54, y: 9.33))
                shape.addLine(to: CGPoint(x: 1.54, y: 9.3))
                shape.addLine(to: CGPoint(x: 1.54, y: 9.3))
                shape.addLine(to: CGPoint(x: 1.54, y: 9.3))
                shape.close()
                shape.move(to: CGPoint(x: 2.07, y: 14.05))
                shape.addLine(to: CGPoint(x: 2.07, y: 14.03))
                shape.addCurve(to: CGPoint(x: 2.77, y: 13.61), controlPoint1: CGPoint(x: 2.37, y: 13.94), controlPoint2: CGPoint(x: 2.61, y: 13.8))
                shape.addCurve(to: CGPoint(x: 3.01, y: 12.93), controlPoint1: CGPoint(x: 2.93, y: 13.42), controlPoint2: CGPoint(x: 3.01, y: 13.19))
                shape.addCurve(to: CGPoint(x: 2.63, y: 12.2), controlPoint1: CGPoint(x: 3.01, y: 12.62), controlPoint2: CGPoint(x: 2.89, y: 12.38))
                shape.addCurve(to: CGPoint(x: 1.59, y: 11.94), controlPoint1: CGPoint(x: 2.38, y: 12.03), controlPoint2: CGPoint(x: 2.03, y: 11.94))
                shape.addCurve(to: CGPoint(x: 0.77, y: 12.04), controlPoint1: CGPoint(x: 1.28, y: 11.94), controlPoint2: CGPoint(x: 1.01, y: 11.97))
                shape.addCurve(to: CGPoint(x: 0.08, y: 12.37), controlPoint1: CGPoint(x: 0.54, y: 12.1), controlPoint2: CGPoint(x: 0.31, y: 12.22))
                shape.addLine(to: CGPoint(x: 0.56, y: 13.14))
                shape.addCurve(to: CGPoint(x: 1.41, y: 12.87), controlPoint1: CGPoint(x: 0.85, y: 12.96), controlPoint2: CGPoint(x: 1.13, y: 12.87))
                shape.addCurve(to: CGPoint(x: 1.76, y: 12.95), controlPoint1: CGPoint(x: 1.56, y: 12.87), controlPoint2: CGPoint(x: 1.67, y: 12.9))
                shape.addCurve(to: CGPoint(x: 1.89, y: 13.2), controlPoint1: CGPoint(x: 1.85, y: 13.01), controlPoint2: CGPoint(x: 1.89, y: 13.09))
                shape.addCurve(to: CGPoint(x: 1.01, y: 13.65), controlPoint1: CGPoint(x: 1.89, y: 13.5), controlPoint2: CGPoint(x: 1.59, y: 13.65))
                shape.addLine(to: CGPoint(x: 0.74, y: 13.65))
                shape.addLine(to: CGPoint(x: 0.74, y: 14.52))
                shape.addLine(to: CGPoint(x: 1, y: 14.52))
                shape.addCurve(to: CGPoint(x: 1.53, y: 14.57), controlPoint1: CGPoint(x: 1.22, y: 14.52), controlPoint2: CGPoint(x: 1.39, y: 14.54))
                shape.addCurve(to: CGPoint(x: 1.82, y: 14.72), controlPoint1: CGPoint(x: 1.66, y: 14.6), controlPoint2: CGPoint(x: 1.76, y: 14.65))
                shape.addCurve(to: CGPoint(x: 1.91, y: 14.99), controlPoint1: CGPoint(x: 1.88, y: 14.78), controlPoint2: CGPoint(x: 1.91, y: 14.87))
                shape.addCurve(to: CGPoint(x: 1.74, y: 15.32), controlPoint1: CGPoint(x: 1.91, y: 15.14), controlPoint2: CGPoint(x: 1.85, y: 15.25))
                shape.addCurve(to: CGPoint(x: 1.18, y: 15.43), controlPoint1: CGPoint(x: 1.62, y: 15.39), controlPoint2: CGPoint(x: 1.44, y: 15.43))
                shape.addCurve(to: CGPoint(x: 0.64, y: 15.36), controlPoint1: CGPoint(x: 1.02, y: 15.43), controlPoint2: CGPoint(x: 0.84, y: 15.41))
                shape.addCurve(to: CGPoint(x: 0.07, y: 15.15), controlPoint1: CGPoint(x: 0.45, y: 15.32), controlPoint2: CGPoint(x: 0.26, y: 15.24))
                shape.addLine(to: CGPoint(x: 0.07, y: 16.11))
                shape.addCurve(to: CGPoint(x: 0.71, y: 16.29), controlPoint1: CGPoint(x: 0.3, y: 16.2), controlPoint2: CGPoint(x: 0.51, y: 16.26))
                shape.addCurve(to: CGPoint(x: 1.35, y: 16.34), controlPoint1: CGPoint(x: 0.9, y: 16.32), controlPoint2: CGPoint(x: 1.12, y: 16.34))
                shape.addCurve(to: CGPoint(x: 2.66, y: 16), controlPoint1: CGPoint(x: 1.91, y: 16.34), controlPoint2: CGPoint(x: 2.35, y: 16.23))
                shape.addCurve(to: CGPoint(x: 3.14, y: 15.06), controlPoint1: CGPoint(x: 2.98, y: 15.77), controlPoint2: CGPoint(x: 3.14, y: 15.46))
                shape.addCurve(to: CGPoint(x: 2.07, y: 14.05), controlPoint1: CGPoint(x: 3.14, y: 14.47), controlPoint2: CGPoint(x: 2.78, y: 14.14))
                shape.addLine(to: CGPoint(x: 2.07, y: 14.05))
                shape.close()
                shape.move(to: CGPoint(x: 2.07, y: 14.05))
                context.saveGState()
                context.translateBy(x: 0.37, y: 0.72)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconslistcheckmark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 18)
        context.translateBy(x: -1292, y: -363)
        
        /// gridicons-list-checkmark
        do {
            context.saveGState()
            context.translateBy(x: 1292, y: 363)
            
            /// list-checkmark
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 7, y: 13.06))
                shape.addLine(to: CGPoint(x: 2.5, y: 17.56))
                shape.addLine(to: CGPoint(x: 0, y: 15.06))
                shape.addLine(to: CGPoint(x: 1.06, y: 14))
                shape.addLine(to: CGPoint(x: 2.5, y: 15.44))
                shape.addLine(to: CGPoint(x: 5.94, y: 12))
                shape.addLine(to: CGPoint(x: 7, y: 13.06))
                shape.addLine(to: CGPoint(x: 7, y: 13.06))
                shape.close()
                shape.move(to: CGPoint(x: 7.5, y: 2.56))
                shape.addLine(to: CGPoint(x: 7.5, y: 4.56))
                shape.addLine(to: CGPoint(x: 18.5, y: 4.56))
                shape.addLine(to: CGPoint(x: 18.5, y: 2.56))
                shape.addLine(to: CGPoint(x: 7.5, y: 2.56))
                shape.addLine(to: CGPoint(x: 7.5, y: 2.56))
                shape.close()
                shape.move(to: CGPoint(x: 7.5, y: 16.56))
                shape.addLine(to: CGPoint(x: 18.5, y: 16.56))
                shape.addLine(to: CGPoint(x: 18.5, y: 14.56))
                shape.addLine(to: CGPoint(x: 7.5, y: 14.56))
                shape.addLine(to: CGPoint(x: 7.5, y: 16.56))
                shape.addLine(to: CGPoint(x: 7.5, y: 16.56))
                shape.close()
                shape.move(to: CGPoint(x: 7.5, y: 10.56))
                shape.addLine(to: CGPoint(x: 18.5, y: 10.56))
                shape.addLine(to: CGPoint(x: 18.5, y: 8.56))
                shape.addLine(to: CGPoint(x: 7.5, y: 8.56))
                shape.addLine(to: CGPoint(x: 7.5, y: 10.56))
                shape.addLine(to: CGPoint(x: 7.5, y: 10.56))
                shape.close()
                shape.move(to: CGPoint(x: 5.94, y: 6))
                shape.addLine(to: CGPoint(x: 2.5, y: 9.44))
                shape.addLine(to: CGPoint(x: 1.06, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 9.06))
                shape.addLine(to: CGPoint(x: 2.5, y: 11.56))
                shape.addLine(to: CGPoint(x: 7, y: 7.06))
                shape.addLine(to: CGPoint(x: 5.94, y: 6))
                shape.addLine(to: CGPoint(x: 5.94, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 5.94, y: 0))
                shape.addLine(to: CGPoint(x: 2.5, y: 3.44))
                shape.addLine(to: CGPoint(x: 1.06, y: 2))
                shape.addLine(to: CGPoint(x: 0, y: 3.06))
                shape.addLine(to: CGPoint(x: 2.5, y: 5.56))
                shape.addLine(to: CGPoint(x: 7, y: 1.06))
                shape.addLine(to: CGPoint(x: 5.94, y: 0))
                shape.addLine(to: CGPoint(x: 5.94, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 5.94, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.44)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconslink(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 10)
        context.translateBy(x: -1262, y: -363)
        
        /// gridicons-link
        do {
            context.saveGState()
            context.translateBy(x: 1262, y: 363)
            
            /// link
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 15, y: 6))
                shape.addLine(to: CGPoint(x: 5, y: 6))
                shape.addLine(to: CGPoint(x: 5, y: 4))
                shape.addLine(to: CGPoint(x: 15, y: 4))
                shape.addLine(to: CGPoint(x: 15, y: 6))
                shape.addLine(to: CGPoint(x: 15, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 15, y: 0))
                shape.addCurve(to: CGPoint(x: 11.02, y: 2), controlPoint1: CGPoint(x: 13.37, y: 0), controlPoint2: CGPoint(x: 11.94, y: 0.79))
                shape.addLine(to: CGPoint(x: 15, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 4), controlPoint1: CGPoint(x: 17.1, y: 2), controlPoint2: CGPoint(x: 18, y: 2.9))
                shape.addLine(to: CGPoint(x: 18, y: 6))
                shape.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 18, y: 7.1), controlPoint2: CGPoint(x: 17.1, y: 8))
                shape.addLine(to: CGPoint(x: 15, y: 8))
                shape.addLine(to: CGPoint(x: 11.02, y: 8))
                shape.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 11.94, y: 9.21), controlPoint2: CGPoint(x: 13.37, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.addCurve(to: CGPoint(x: 20, y: 6), controlPoint1: CGPoint(x: 18.21, y: 10), controlPoint2: CGPoint(x: 20, y: 8.21))
                shape.addLine(to: CGPoint(x: 20, y: 4))
                shape.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 20, y: 1.79), controlPoint2: CGPoint(x: 18.21, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addCurve(to: CGPoint(x: 4, y: 10), controlPoint1: CGPoint(x: 0, y: 8.21), controlPoint2: CGPoint(x: 1.79, y: 10))
                shape.addLine(to: CGPoint(x: 5, y: 10))
                shape.addCurve(to: CGPoint(x: 8.98, y: 8), controlPoint1: CGPoint(x: 6.63, y: 10), controlPoint2: CGPoint(x: 8.06, y: 9.21))
                shape.addLine(to: CGPoint(x: 5, y: 8))
                shape.addLine(to: CGPoint(x: 4, y: 8))
                shape.addCurve(to: CGPoint(x: 2, y: 6), controlPoint1: CGPoint(x: 2.9, y: 8), controlPoint2: CGPoint(x: 2, y: 7.1))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addCurve(to: CGPoint(x: 4, y: 2), controlPoint1: CGPoint(x: 2, y: 2.9), controlPoint2: CGPoint(x: 2.9, y: 2))
                shape.addLine(to: CGPoint(x: 5, y: 2))
                shape.addLine(to: CGPoint(x: 8.98, y: 2))
                shape.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 8.06, y: 0.79), controlPoint2: CGPoint(x: 6.63, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.79))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 4))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconslinkbreak(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -1232, y: -363)
        
        /// gridicons-link-break
        do {
            context.saveGState()
            context.translateBy(x: 1232, y: 363)
            
            /// link-break
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 8, y: 7.5))
                shape.addLine(to: CGPoint(x: 6, y: 9.5))
                shape.addLine(to: CGPoint(x: 5, y: 9.5))
                shape.addLine(to: CGPoint(x: 5, y: 7.5))
                shape.addLine(to: CGPoint(x: 8, y: 7.5))
                shape.addLine(to: CGPoint(x: 8, y: 7.5))
                shape.close()
                shape.move(to: CGPoint(x: 17.64, y: 3.86))
                shape.addLine(to: CGPoint(x: 20, y: 1.5))
                shape.addLine(to: CGPoint(x: 18.5, y: 0))
                shape.addLine(to: CGPoint(x: 1.5, y: 17))
                shape.addLine(to: CGPoint(x: 3, y: 18.5))
                shape.addLine(to: CGPoint(x: 12, y: 9.5))
                shape.addLine(to: CGPoint(x: 15, y: 9.5))
                shape.addLine(to: CGPoint(x: 15, y: 7.5))
                shape.addLine(to: CGPoint(x: 14, y: 7.5))
                shape.addLine(to: CGPoint(x: 16, y: 5.5))
                shape.addCurve(to: CGPoint(x: 18, y: 7.5), controlPoint1: CGPoint(x: 17.1, y: 5.5), controlPoint2: CGPoint(x: 18, y: 6.4))
                shape.addLine(to: CGPoint(x: 18, y: 9.5))
                shape.addCurve(to: CGPoint(x: 16, y: 11.5), controlPoint1: CGPoint(x: 18, y: 10.6), controlPoint2: CGPoint(x: 17.1, y: 11.5))
                shape.addLine(to: CGPoint(x: 15, y: 11.5))
                shape.addLine(to: CGPoint(x: 11.02, y: 11.5))
                shape.addCurve(to: CGPoint(x: 15, y: 13.5), controlPoint1: CGPoint(x: 11.94, y: 12.71), controlPoint2: CGPoint(x: 13.37, y: 13.5))
                shape.addLine(to: CGPoint(x: 16, y: 13.5))
                shape.addCurve(to: CGPoint(x: 20, y: 9.5), controlPoint1: CGPoint(x: 18.21, y: 13.5), controlPoint2: CGPoint(x: 20, y: 11.71))
                shape.addLine(to: CGPoint(x: 20, y: 7.5))
                shape.addCurve(to: CGPoint(x: 17.64, y: 3.86), controlPoint1: CGPoint(x: 20, y: 5.88), controlPoint2: CGPoint(x: 19.03, y: 4.49))
                shape.addLine(to: CGPoint(x: 17.64, y: 3.86))
                shape.close()
                shape.move(to: CGPoint(x: 2.36, y: 13.14))
                shape.addLine(to: CGPoint(x: 4, y: 11.5))
                shape.addCurve(to: CGPoint(x: 2, y: 9.5), controlPoint1: CGPoint(x: 2.9, y: 11.5), controlPoint2: CGPoint(x: 2, y: 10.6))
                shape.addLine(to: CGPoint(x: 2, y: 7.5))
                shape.addCurve(to: CGPoint(x: 4, y: 5.5), controlPoint1: CGPoint(x: 2, y: 6.4), controlPoint2: CGPoint(x: 2.9, y: 5.5))
                shape.addLine(to: CGPoint(x: 5, y: 5.5))
                shape.addLine(to: CGPoint(x: 8.98, y: 5.5))
                shape.addCurve(to: CGPoint(x: 5, y: 3.5), controlPoint1: CGPoint(x: 8.06, y: 4.29), controlPoint2: CGPoint(x: 6.63, y: 3.5))
                shape.addLine(to: CGPoint(x: 4, y: 3.5))
                shape.addCurve(to: CGPoint(x: 0, y: 7.5), controlPoint1: CGPoint(x: 1.79, y: 3.5), controlPoint2: CGPoint(x: 0, y: 5.29))
                shape.addLine(to: CGPoint(x: 0, y: 9.5))
                shape.addCurve(to: CGPoint(x: 2.36, y: 13.14), controlPoint1: CGPoint(x: 0, y: 11.12), controlPoint2: CGPoint(x: 0.97, y: 12.51))
                shape.addLine(to: CGPoint(x: 2.36, y: 13.14))
                shape.close()
                shape.move(to: CGPoint(x: 2.36, y: 13.14))
                context.saveGState()
                context.translateBy(x: 0, y: 0.5)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconslayout(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 19)
        context.translateBy(x: -1203, y: -363)
        
        /// gridicons-layout
        do {
            context.saveGState()
            context.translateBy(x: 1203, y: 363)
            
            /// layout
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 5, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 17))
                shape.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 0.9, y: 17), controlPoint2: CGPoint(x: 0, y: 16.11))
                shape.addLine(to: CGPoint(x: 0, y: 3))
                shape.addCurve(to: CGPoint(x: 2, y: 1), controlPoint1: CGPoint(x: 0, y: 1.9), controlPoint2: CGPoint(x: 0.9, y: 1))
                shape.addLine(to: CGPoint(x: 5, y: 1))
                shape.addCurve(to: CGPoint(x: 7, y: 3), controlPoint1: CGPoint(x: 6.1, y: 1), controlPoint2: CGPoint(x: 7, y: 1.9))
                shape.addLine(to: CGPoint(x: 7, y: 15))
                shape.addCurve(to: CGPoint(x: 5, y: 17), controlPoint1: CGPoint(x: 7, y: 16.11), controlPoint2: CGPoint(x: 6.1, y: 17))
                shape.addLine(to: CGPoint(x: 5, y: 17))
                shape.close()
                shape.move(to: CGPoint(x: 13, y: 7))
                shape.addLine(to: CGPoint(x: 17, y: 7))
                shape.addCurve(to: CGPoint(x: 19, y: 5), controlPoint1: CGPoint(x: 18.11, y: 7), controlPoint2: CGPoint(x: 19, y: 6.1))
                shape.addLine(to: CGPoint(x: 19, y: 2))
                shape.addCurve(to: CGPoint(x: 17, y: 0), controlPoint1: CGPoint(x: 19, y: 0.9), controlPoint2: CGPoint(x: 18.11, y: 0))
                shape.addLine(to: CGPoint(x: 13, y: 0))
                shape.addCurve(to: CGPoint(x: 11, y: 2), controlPoint1: CGPoint(x: 11.9, y: 0), controlPoint2: CGPoint(x: 11, y: 0.9))
                shape.addLine(to: CGPoint(x: 11, y: 5))
                shape.addCurve(to: CGPoint(x: 13, y: 7), controlPoint1: CGPoint(x: 11, y: 6.1), controlPoint2: CGPoint(x: 11.9, y: 7))
                shape.addLine(to: CGPoint(x: 13, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 17))
                shape.addLine(to: CGPoint(x: 18, y: 11))
                shape.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 18, y: 9.89), controlPoint2: CGPoint(x: 17.11, y: 9))
                shape.addLine(to: CGPoint(x: 11, y: 9))
                shape.addCurve(to: CGPoint(x: 9, y: 11), controlPoint1: CGPoint(x: 9.89, y: 9), controlPoint2: CGPoint(x: 9, y: 9.89))
                shape.addLine(to: CGPoint(x: 9, y: 17))
                shape.addCurve(to: CGPoint(x: 11, y: 19), controlPoint1: CGPoint(x: 9, y: 18.11), controlPoint2: CGPoint(x: 9.89, y: 19))
                shape.addLine(to: CGPoint(x: 16, y: 19))
                shape.addCurve(to: CGPoint(x: 18, y: 17), controlPoint1: CGPoint(x: 17.11, y: 19), controlPoint2: CGPoint(x: 18, y: 18.11))
                shape.addLine(to: CGPoint(x: 18, y: 17))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 17))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconslayoutblocks(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)
        context.translateBy(x: -1171, y: -363)
        
        /// gridicons-layout-blocks
        do {
            context.saveGState()
            context.translateBy(x: 1171, y: 363)
            
            /// layout-blocks
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 20, y: 6))
                shape.addLine(to: CGPoint(x: 18, y: 6))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 18, y: 0.9), controlPoint2: CGPoint(x: 17.11, y: 0))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addCurve(to: CGPoint(x: 4, y: 2), controlPoint1: CGPoint(x: 4.89, y: 0), controlPoint2: CGPoint(x: 4, y: 0.9))
                shape.addLine(to: CGPoint(x: 4, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 4.89))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 0, y: 11.11), controlPoint2: CGPoint(x: 0.9, y: 12))
                shape.addLine(to: CGPoint(x: 4, y: 12))
                shape.addLine(to: CGPoint(x: 4, y: 20))
                shape.addCurve(to: CGPoint(x: 6, y: 22), controlPoint1: CGPoint(x: 4, y: 21.11), controlPoint2: CGPoint(x: 4.89, y: 22))
                shape.addLine(to: CGPoint(x: 16, y: 22))
                shape.addCurve(to: CGPoint(x: 18, y: 20), controlPoint1: CGPoint(x: 17.11, y: 22), controlPoint2: CGPoint(x: 18, y: 21.11))
                shape.addLine(to: CGPoint(x: 18, y: 18))
                shape.addLine(to: CGPoint(x: 20, y: 18))
                shape.addCurve(to: CGPoint(x: 22, y: 16), controlPoint1: CGPoint(x: 21.11, y: 18), controlPoint2: CGPoint(x: 22, y: 17.11))
                shape.addLine(to: CGPoint(x: 22, y: 8))
                shape.addCurve(to: CGPoint(x: 20, y: 6), controlPoint1: CGPoint(x: 22, y: 6.89), controlPoint2: CGPoint(x: 21.11, y: 6))
                shape.addLine(to: CGPoint(x: 20, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 20))
                shape.addLine(to: CGPoint(x: 6, y: 20))
                shape.addLine(to: CGPoint(x: 6, y: 12))
                shape.addLine(to: CGPoint(x: 8, y: 12))
                shape.addCurve(to: CGPoint(x: 10, y: 10), controlPoint1: CGPoint(x: 9.11, y: 12), controlPoint2: CGPoint(x: 10, y: 11.11))
                shape.addLine(to: CGPoint(x: 10, y: 6))
                shape.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 10, y: 4.89), controlPoint2: CGPoint(x: 9.11, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 14, y: 6))
                shape.addCurve(to: CGPoint(x: 12, y: 8), controlPoint1: CGPoint(x: 12.9, y: 6), controlPoint2: CGPoint(x: 12, y: 6.89))
                shape.addLine(to: CGPoint(x: 12, y: 16))
                shape.addCurve(to: CGPoint(x: 14, y: 18), controlPoint1: CGPoint(x: 12, y: 17.11), controlPoint2: CGPoint(x: 12.9, y: 18))
                shape.addLine(to: CGPoint(x: 16, y: 18))
                shape.addLine(to: CGPoint(x: 16, y: 20))
                shape.addLine(to: CGPoint(x: 16, y: 20))
                shape.close()
                shape.move(to: CGPoint(x: 20, y: 16))
                shape.addLine(to: CGPoint(x: 14, y: 16))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.addLine(to: CGPoint(x: 20, y: 8))
                shape.addLine(to: CGPoint(x: 20, y: 16))
                shape.addLine(to: CGPoint(x: 20, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 20, y: 16))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsitalic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 10, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 10, y: resizedFrame.height / 15)
        context.translateBy(x: -1151, y: -363)
        
        /// gridicons-italic
        do {
            context.saveGState()
            context.translateBy(x: 1151, y: 363)
            
            /// italic
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 3.2, y: 0))
                shape.addLine(to: CGPoint(x: 2.77, y: 2))
                shape.addLine(to: CGPoint(x: 4.27, y: 2))
                shape.addLine(to: CGPoint(x: 1.93, y: 13))
                shape.addLine(to: CGPoint(x: 0.43, y: 13))
                shape.addLine(to: CGPoint(x: 0, y: 15))
                shape.addLine(to: CGPoint(x: 6.13, y: 15))
                shape.addLine(to: CGPoint(x: 6.55, y: 13))
                shape.addLine(to: CGPoint(x: 5.05, y: 13))
                shape.addLine(to: CGPoint(x: 7.4, y: 2))
                shape.addLine(to: CGPoint(x: 8.9, y: 2))
                shape.addLine(to: CGPoint(x: 9.33, y: 0))
                shape.addLine(to: CGPoint(x: 3.2, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 3.2, y: 0))
                context.saveGState()
                context.translateBy(x: 0.34, y: 0)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsinstitution(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1121, y: -363)
        
        /// gridicons-institution
        do {
            context.saveGState()
            context.translateBy(x: 1121, y: 363)
            
            /// institution
            do {
                context.saveGState()
                
                /// education-and-organizations_1_
                do {
                    context.saveGState()
                    
                    /// Group
                    do {
                        context.saveGState()
                        
                        /// Rectangle-path
                        let rectanglepath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 20, height: 3))
                        context.saveGState()
                        context.translateBy(x: 0, y: 17)
                        UIColor.black.setFill()
                        rectanglepath.fill()
                        context.restoreGState()
                        
                        /// Shape
                        let shape = UIBezierPath()
                        shape.move(to: CGPoint(x: 10, y: 0))
                        shape.addLine(to: CGPoint(x: 0, y: 4))
                        shape.addLine(to: CGPoint(x: 0, y: 6))
                        shape.addLine(to: CGPoint(x: 20, y: 6))
                        shape.addLine(to: CGPoint(x: 20, y: 4))
                        shape.addLine(to: CGPoint(x: 10, y: 0))
                        shape.close()
                        shape.move(to: CGPoint(x: 10, y: 0))
                        context.saveGState()
                        shape.usesEvenOddFillRule = true
                        UIColor.black.setFill()
                        shape.fill()
                        context.restoreGState()
                        
                        /// Rectangle-path
                        let rectanglepath3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 7))
                        context.saveGState()
                        context.translateBy(x: 15, y: 8)
                        UIColor.black.setFill()
                        rectanglepath3.fill()
                        context.restoreGState()
                        
                        /// Rectangle-path
                        let rectanglepath5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 7))
                        context.saveGState()
                        context.translateBy(x: 8.5, y: 8)
                        UIColor.black.setFill()
                        rectanglepath5.fill()
                        context.restoreGState()
                        
                        /// Rectangle-path
                        let rectanglepath7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 7))
                        context.saveGState()
                        context.translateBy(x: 2, y: 8)
                        UIColor.black.setFill()
                        rectanglepath7.fill()
                        context.restoreGState()
                        
                        context.restoreGState()
                    }
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsink(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 20)
        context.translateBy(x: -1097, y: -363)
        
        /// gridicons-ink
        do {
            context.saveGState()
            context.translateBy(x: 1097, y: 363)
            
            /// ink
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 0, y: 13))
                shape.addCurve(to: CGPoint(x: 7, y: 20), controlPoint1: CGPoint(x: 0, y: 16.87), controlPoint2: CGPoint(x: 3.13, y: 20))
                shape.addCurve(to: CGPoint(x: 14, y: 13), controlPoint1: CGPoint(x: 10.87, y: 20), controlPoint2: CGPoint(x: 14, y: 16.87))
                shape.addCurve(to: CGPoint(x: 12.9, y: 9.23), controlPoint1: CGPoint(x: 14, y: 11.61), controlPoint2: CGPoint(x: 13.59, y: 10.32))
                shape.addLine(to: CGPoint(x: 12.9, y: 9.23))
                shape.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 10.54, y: 5.54), controlPoint2: CGPoint(x: 7, y: 0))
                shape.addCurve(to: CGPoint(x: 1.1, y: 9.23), controlPoint1: CGPoint(x: 7, y: 0), controlPoint2: CGPoint(x: 3.46, y: 5.54))
                shape.addLine(to: CGPoint(x: 1.1, y: 9.23))
                shape.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 0.41, y: 10.32), controlPoint2: CGPoint(x: 0, y: 11.61))
                shape.addLine(to: CGPoint(x: 0, y: 13))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 13))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsinfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1067, y: -363)
        
        /// gridicons-info
        do {
            context.saveGState()
            context.translateBy(x: 1067, y: 363)
            
            /// info
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 15))
                shape.addLine(to: CGPoint(x: 9, y: 15))
                shape.addLine(to: CGPoint(x: 9, y: 9))
                shape.addLine(to: CGPoint(x: 11, y: 9))
                shape.addLine(to: CGPoint(x: 11, y: 15))
                shape.addLine(to: CGPoint(x: 11, y: 15))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 7))
                shape.addLine(to: CGPoint(x: 9, y: 7))
                shape.addLine(to: CGPoint(x: 9, y: 5))
                shape.addLine(to: CGPoint(x: 11, y: 5))
                shape.addLine(to: CGPoint(x: 11, y: 7))
                shape.addLine(to: CGPoint(x: 11, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 7))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsinfooutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1037, y: -363)
        
        /// gridicons-info-outline
        do {
            context.saveGState()
            context.translateBy(x: 1037, y: 363)
            
            /// info-outline
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11, y: 7))
                shape.addLine(to: CGPoint(x: 9, y: 7))
                shape.addLine(to: CGPoint(x: 9, y: 5))
                shape.addLine(to: CGPoint(x: 11, y: 5))
                shape.addLine(to: CGPoint(x: 11, y: 7))
                shape.addLine(to: CGPoint(x: 11, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 9))
                shape.addLine(to: CGPoint(x: 9, y: 9))
                shape.addLine(to: CGPoint(x: 9, y: 15))
                shape.addLine(to: CGPoint(x: 11, y: 15))
                shape.addLine(to: CGPoint(x: 11, y: 9))
                shape.addLine(to: CGPoint(x: 11, y: 9))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 2))
                shape.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.59, y: 2), controlPoint2: CGPoint(x: 2, y: 5.59))
                shape.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 2, y: 14.41), controlPoint2: CGPoint(x: 5.59, y: 18))
                shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.41, y: 18), controlPoint2: CGPoint(x: 18, y: 14.41))
                shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 18, y: 5.59), controlPoint2: CGPoint(x: 14.41, y: 2))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 0), controlPoint2: CGPoint(x: 20, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 20, y: 15.52), controlPoint2: CGPoint(x: 15.52, y: 20))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 20), controlPoint2: CGPoint(x: 0, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.48), controlPoint2: CGPoint(x: 4.48, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsindentright(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 16)
        context.translateBy(x: -1009, y: -363)
        
        /// gridicons-indent-right
        do {
            context.saveGState()
            context.translateBy(x: 1009, y: 363)
            
            /// indent-right
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 2, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 16))
                shape.addLine(to: CGPoint(x: 2, y: 16))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 9))
                shape.addLine(to: CGPoint(x: 7.83, y: 9))
                shape.addLine(to: CGPoint(x: 9.91, y: 11.09))
                shape.addLine(to: CGPoint(x: 8.5, y: 12.5))
                shape.addLine(to: CGPoint(x: 4, y: 8))
                shape.addLine(to: CGPoint(x: 8.5, y: 3.5))
                shape.addLine(to: CGPoint(x: 9.91, y: 4.91))
                shape.addLine(to: CGPoint(x: 7.83, y: 7))
                shape.addLine(to: CGPoint(x: 18, y: 7))
                shape.addLine(to: CGPoint(x: 18, y: 9))
                shape.addLine(to: CGPoint(x: 18, y: 9))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 9))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsindentleft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 16)
        context.translateBy(x: -981, y: -363)
        
        /// gridicons-indent-left
        do {
            context.saveGState()
            context.translateBy(x: 981, y: 363)
            
            /// indent-left
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 7))
                shape.addLine(to: CGPoint(x: 10.17, y: 7))
                shape.addLine(to: CGPoint(x: 8.09, y: 4.91))
                shape.addLine(to: CGPoint(x: 9.5, y: 3.5))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.addLine(to: CGPoint(x: 9.5, y: 12.5))
                shape.addLine(to: CGPoint(x: 8.09, y: 11.09))
                shape.addLine(to: CGPoint(x: 10.17, y: 9))
                shape.addLine(to: CGPoint(x: 0, y: 9))
                shape.addLine(to: CGPoint(x: 0, y: 7))
                shape.addLine(to: CGPoint(x: 0, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 7))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsimage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 16)
        context.translateBy(x: -951, y: -363)
        
        /// gridicons-image
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 363)
            
            /// image
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11, y: 5.5))
                shape.addCurve(to: CGPoint(x: 12.5, y: 4), controlPoint1: CGPoint(x: 11, y: 4.67), controlPoint2: CGPoint(x: 11.67, y: 4))
                shape.addCurve(to: CGPoint(x: 14, y: 5.5), controlPoint1: CGPoint(x: 13.33, y: 4), controlPoint2: CGPoint(x: 14, y: 4.67))
                shape.addCurve(to: CGPoint(x: 12.5, y: 7), controlPoint1: CGPoint(x: 14, y: 6.33), controlPoint2: CGPoint(x: 13.33, y: 7))
                shape.addCurve(to: CGPoint(x: 11, y: 5.5), controlPoint1: CGPoint(x: 11.67, y: 7), controlPoint2: CGPoint(x: 11, y: 6.33))
                shape.addLine(to: CGPoint(x: 11, y: 5.5))
                shape.close()
                shape.move(to: CGPoint(x: 20, y: 2))
                shape.addLine(to: CGPoint(x: 20, y: 14))
                shape.addCurve(to: CGPoint(x: 18, y: 16), controlPoint1: CGPoint(x: 20, y: 15.11), controlPoint2: CGPoint(x: 19.11, y: 16))
                shape.addLine(to: CGPoint(x: 2, y: 16))
                shape.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 0.9, y: 16), controlPoint2: CGPoint(x: 0, y: 15.11))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addCurve(to: CGPoint(x: 20, y: 2), controlPoint1: CGPoint(x: 19.11, y: 0), controlPoint2: CGPoint(x: 20, y: 0.9))
                shape.addLine(to: CGPoint(x: 20, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 9.44))
                shape.addLine(to: CGPoint(x: 6, y: 5))
                shape.addLine(to: CGPoint(x: 11.9, y: 11.55))
                shape.addLine(to: CGPoint(x: 13.48, y: 9.7))
                shape.addCurve(to: CGPoint(x: 16.52, y: 9.7), controlPoint1: CGPoint(x: 14.28, y: 8.77), controlPoint2: CGPoint(x: 15.72, y: 8.77))
                shape.addLine(to: CGPoint(x: 18, y: 11.43))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 2))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsimagemultiple(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1291, y: -333)
        
        /// gridicons-image-multiple
        do {
            context.saveGState()
            context.translateBy(x: 1291, y: 333)
            
            /// image-multiple
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 13, y: 5.5))
                shape.addCurve(to: CGPoint(x: 14.5, y: 4), controlPoint1: CGPoint(x: 13, y: 4.67), controlPoint2: CGPoint(x: 13.67, y: 4))
                shape.addCurve(to: CGPoint(x: 16, y: 5.5), controlPoint1: CGPoint(x: 15.33, y: 4), controlPoint2: CGPoint(x: 16, y: 4.67))
                shape.addCurve(to: CGPoint(x: 14.5, y: 7), controlPoint1: CGPoint(x: 16, y: 6.33), controlPoint2: CGPoint(x: 15.33, y: 7))
                shape.addCurve(to: CGPoint(x: 13, y: 5.5), controlPoint1: CGPoint(x: 13.67, y: 7), controlPoint2: CGPoint(x: 13, y: 6.33))
                shape.addLine(to: CGPoint(x: 13, y: 5.5))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 18))
                shape.addLine(to: CGPoint(x: 16, y: 18))
                shape.addLine(to: CGPoint(x: 16, y: 18))
                shape.addCurve(to: CGPoint(x: 14, y: 20), controlPoint1: CGPoint(x: 16, y: 19.11), controlPoint2: CGPoint(x: 15.11, y: 20))
                shape.addLine(to: CGPoint(x: 2, y: 20))
                shape.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 0.9, y: 20), controlPoint2: CGPoint(x: 0, y: 19.1))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addCurve(to: CGPoint(x: 2, y: 4), controlPoint1: CGPoint(x: 0, y: 4.89), controlPoint2: CGPoint(x: 0.9, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 18))
                shape.addLine(to: CGPoint(x: 2, y: 18))
                shape.close()
                shape.move(to: CGPoint(x: 20, y: 2))
                shape.addLine(to: CGPoint(x: 20, y: 14))
                shape.addCurve(to: CGPoint(x: 18, y: 16), controlPoint1: CGPoint(x: 20, y: 15.11), controlPoint2: CGPoint(x: 19.11, y: 16))
                shape.addLine(to: CGPoint(x: 6, y: 16))
                shape.addCurve(to: CGPoint(x: 4, y: 14), controlPoint1: CGPoint(x: 4.89, y: 16), controlPoint2: CGPoint(x: 4, y: 15.11))
                shape.addLine(to: CGPoint(x: 4, y: 2))
                shape.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 4, y: 0.9), controlPoint2: CGPoint(x: 4.89, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addCurve(to: CGPoint(x: 20, y: 2), controlPoint1: CGPoint(x: 19.11, y: 0), controlPoint2: CGPoint(x: 20, y: 0.9))
                shape.addLine(to: CGPoint(x: 20, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 2))
                shape.addLine(to: CGPoint(x: 6, y: 8.33))
                shape.addLine(to: CGPoint(x: 9, y: 5))
                shape.addLine(to: CGPoint(x: 13.86, y: 10.4))
                shape.addLine(to: CGPoint(x: 14.51, y: 9.66))
                shape.addCurve(to: CGPoint(x: 17.49, y: 9.66), controlPoint1: CGPoint(x: 15.31, y: 8.78), controlPoint2: CGPoint(x: 16.69, y: 8.78))
                shape.addLine(to: CGPoint(x: 18, y: 10.23))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 6, y: 2))
                shape.addLine(to: CGPoint(x: 6, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 2))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconshouse(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1261, y: -333)
        
        /// gridicons-house
        do {
            context.saveGState()
            context.translateBy(x: 1261, y: 333)
            
            /// house
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 20, y: 8))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 2, y: 20))
                shape.addLine(to: CGPoint(x: 7, y: 20))
                shape.addLine(to: CGPoint(x: 7, y: 16))
                shape.addCurve(to: CGPoint(x: 10, y: 13), controlPoint1: CGPoint(x: 7, y: 14.34), controlPoint2: CGPoint(x: 8.34, y: 13))
                shape.addCurve(to: CGPoint(x: 13, y: 16), controlPoint1: CGPoint(x: 11.66, y: 13), controlPoint2: CGPoint(x: 13, y: 14.34))
                shape.addLine(to: CGPoint(x: 13, y: 20))
                shape.addLine(to: CGPoint(x: 18, y: 20))
                shape.addLine(to: CGPoint(x: 18, y: 10))
                shape.addLine(to: CGPoint(x: 20, y: 10))
                shape.addLine(to: CGPoint(x: 20, y: 8))
                shape.addLine(to: CGPoint(x: 20, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 20, y: 8))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconshistory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1231, y: -333)
        
        /// gridicons-history
        do {
            context.saveGState()
            context.translateBy(x: 1231, y: 333)
            
            /// history
            do {
                context.saveGState()
                
                /// Group
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 0.12, y: 11.53))
                    shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0.86, y: 16.31), controlPoint2: CGPoint(x: 5.02, y: 20))
                    shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.5, y: 20), controlPoint2: CGPoint(x: 20, y: 15.5))
                    shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.5), controlPoint2: CGPoint(x: 15.5, y: 0))
                    shape.addCurve(to: CGPoint(x: 2, y: 4), controlPoint1: CGPoint(x: 6.7, y: 0), controlPoint2: CGPoint(x: 3.8, y: 1.6))
                    shape.addLine(to: CGPoint(x: 2, y: 4))
                    shape.addLine(to: CGPoint(x: 2, y: 0))
                    shape.addLine(to: CGPoint(x: 0, y: 0))
                    shape.addLine(to: CGPoint(x: 0, y: 7))
                    shape.addLine(to: CGPoint(x: 7, y: 7))
                    shape.addLine(to: CGPoint(x: 7, y: 5))
                    shape.addLine(to: CGPoint(x: 3.8, y: 5))
                    shape.addLine(to: CGPoint(x: 3.8, y: 5))
                    shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 5.2, y: 3.2), controlPoint2: CGPoint(x: 7.5, y: 2))
                    shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.4, y: 2), controlPoint2: CGPoint(x: 18, y: 5.6))
                    shape.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.4), controlPoint2: CGPoint(x: 14.4, y: 18))
                    shape.addCurve(to: CGPoint(x: 2.15, y: 11.53), controlPoint1: CGPoint(x: 6.12, y: 18), controlPoint2: CGPoint(x: 2.87, y: 15.2))
                    shape.addLine(to: CGPoint(x: 0.12, y: 11.53))
                    shape.addLine(to: CGPoint(x: 0.12, y: 11.53))
                    shape.close()
                    shape.move(to: CGPoint(x: 0.12, y: 11.53))
                    context.saveGState()
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    /// Shape
                    let shape2 = UIBezierPath()
                    shape2.move(to: CGPoint.zero)
                    shape2.addLine(to: CGPoint(x: 0, y: 5.3))
                    shape2.addLine(to: CGPoint(x: 3.2, y: 9.6))
                    shape2.addLine(to: CGPoint(x: 4.8, y: 8.4))
                    shape2.addLine(to: CGPoint(x: 2, y: 4.7))
                    shape2.addLine(to: CGPoint(x: 2, y: 0))
                    shape2.addLine(to: CGPoint.zero)
                    shape2.close()
                    shape2.move(to: CGPoint.zero)
                    context.saveGState()
                    context.translateBy(x: 9, y: 5)
                    shape2.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape2.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconshelp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1201, y: -333)
        
        /// gridicons-help
        do {
            context.saveGState()
            context.translateBy(x: 1201, y: 333)
            
            /// help
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 16))
                shape.addLine(to: CGPoint(x: 9, y: 16))
                shape.addLine(to: CGPoint(x: 9, y: 14))
                shape.addLine(to: CGPoint(x: 11, y: 14))
                shape.addLine(to: CGPoint(x: 11, y: 16))
                shape.addLine(to: CGPoint(x: 11, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 11.86))
                shape.addLine(to: CGPoint(x: 11, y: 13))
                shape.addLine(to: CGPoint(x: 9, y: 13))
                shape.addLine(to: CGPoint(x: 9, y: 11))
                shape.addCurve(to: CGPoint(x: 10, y: 10), controlPoint1: CGPoint(x: 9, y: 10.45), controlPoint2: CGPoint(x: 9.45, y: 10))
                shape.addCurve(to: CGPoint(x: 12, y: 8), controlPoint1: CGPoint(x: 11.1, y: 10), controlPoint2: CGPoint(x: 12, y: 9.1))
                shape.addCurve(to: CGPoint(x: 10, y: 6), controlPoint1: CGPoint(x: 12, y: 6.9), controlPoint2: CGPoint(x: 11.1, y: 6))
                shape.addCurve(to: CGPoint(x: 8, y: 8), controlPoint1: CGPoint(x: 8.9, y: 6), controlPoint2: CGPoint(x: 8, y: 6.9))
                shape.addLine(to: CGPoint(x: 6, y: 8))
                shape.addCurve(to: CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 6, y: 5.79), controlPoint2: CGPoint(x: 7.79, y: 4))
                shape.addCurve(to: CGPoint(x: 14, y: 8), controlPoint1: CGPoint(x: 12.21, y: 4), controlPoint2: CGPoint(x: 14, y: 5.79))
                shape.addCurve(to: CGPoint(x: 11, y: 11.86), controlPoint1: CGPoint(x: 14, y: 9.86), controlPoint2: CGPoint(x: 12.72, y: 11.41))
                shape.addLine(to: CGPoint(x: 11, y: 11.86))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 11.86))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconshelpoutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1171, y: -333)
        
        /// gridicons-help-outline
        do {
            context.saveGState()
            context.translateBy(x: 1171, y: 333)
            
            /// help-outline
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.41, y: 2), controlPoint2: CGPoint(x: 18, y: 5.59))
                shape.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.41), controlPoint2: CGPoint(x: 14.41, y: 18))
                shape.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.59, y: 18), controlPoint2: CGPoint(x: 2, y: 14.41))
                shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.59), controlPoint2: CGPoint(x: 5.59, y: 2))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 8))
                shape.addCurve(to: CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 14, y: 5.79), controlPoint2: CGPoint(x: 12.21, y: 4))
                shape.addCurve(to: CGPoint(x: 6, y: 8), controlPoint1: CGPoint(x: 7.79, y: 4), controlPoint2: CGPoint(x: 6, y: 5.79))
                shape.addLine(to: CGPoint(x: 8, y: 8))
                shape.addCurve(to: CGPoint(x: 10, y: 6), controlPoint1: CGPoint(x: 8, y: 6.9), controlPoint2: CGPoint(x: 8.9, y: 6))
                shape.addCurve(to: CGPoint(x: 12, y: 8), controlPoint1: CGPoint(x: 11.1, y: 6), controlPoint2: CGPoint(x: 12, y: 6.9))
                shape.addCurve(to: CGPoint(x: 10, y: 10), controlPoint1: CGPoint(x: 12, y: 9.1), controlPoint2: CGPoint(x: 11.1, y: 10))
                shape.addCurve(to: CGPoint(x: 9, y: 11), controlPoint1: CGPoint(x: 9.45, y: 10), controlPoint2: CGPoint(x: 9, y: 10.45))
                shape.addLine(to: CGPoint(x: 9, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 11.86))
                shape.addCurve(to: CGPoint(x: 14, y: 8), controlPoint1: CGPoint(x: 12.72, y: 11.41), controlPoint2: CGPoint(x: 14, y: 9.86))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 14))
                shape.addLine(to: CGPoint(x: 9, y: 14))
                shape.addLine(to: CGPoint(x: 9, y: 16))
                shape.addLine(to: CGPoint(x: 11, y: 16))
                shape.addLine(to: CGPoint(x: 11, y: 14))
                shape.addLine(to: CGPoint(x: 11, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 14))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsheart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -1141, y: -333)
        
        /// gridicons-heart
        do {
            context.saveGState()
            context.translateBy(x: 1141, y: 333)
            
            /// heart
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 14.5, y: 0))
                shape.addCurve(to: CGPoint(x: 10, y: 2.34), controlPoint1: CGPoint(x: 12.64, y: 0), controlPoint2: CGPoint(x: 11, y: 0.93))
                shape.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 9, y: 0.93), controlPoint2: CGPoint(x: 7.36, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 5.5), controlPoint1: CGPoint(x: 2.46, y: 0), controlPoint2: CGPoint(x: 0, y: 2.46))
                shape.addCurve(to: CGPoint(x: 10, y: 18.35), controlPoint1: CGPoint(x: 0, y: 11.22), controlPoint2: CGPoint(x: 6.5, y: 15.94))
                shape.addCurve(to: CGPoint(x: 20, y: 5.5), controlPoint1: CGPoint(x: 13.5, y: 15.94), controlPoint2: CGPoint(x: 20, y: 11.22))
                shape.addCurve(to: CGPoint(x: 14.5, y: 0), controlPoint1: CGPoint(x: 20, y: 2.46), controlPoint2: CGPoint(x: 17.54, y: 0))
                shape.addLine(to: CGPoint(x: 14.5, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 14.5, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsheartoutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -1111, y: -333)
        
        /// gridicons-heart-outline
        do {
            context.saveGState()
            context.translateBy(x: 1111, y: 333)
            
            /// heart-outline
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 14.5, y: 1.5))
                shape.addCurve(to: CGPoint(x: 18.5, y: 5.5), controlPoint1: CGPoint(x: 16.71, y: 1.5), controlPoint2: CGPoint(x: 18.5, y: 3.29))
                shape.addCurve(to: CGPoint(x: 10, y: 16.52), controlPoint1: CGPoint(x: 18.5, y: 10.17), controlPoint2: CGPoint(x: 12.96, y: 14.44))
                shape.addCurve(to: CGPoint(x: 1.5, y: 5.5), controlPoint1: CGPoint(x: 7.04, y: 14.44), controlPoint2: CGPoint(x: 1.5, y: 10.17))
                shape.addCurve(to: CGPoint(x: 5.5, y: 1.5), controlPoint1: CGPoint(x: 1.5, y: 3.29), controlPoint2: CGPoint(x: 3.29, y: 1.5))
                shape.addCurve(to: CGPoint(x: 8.77, y: 3.21), controlPoint1: CGPoint(x: 6.8, y: 1.5), controlPoint2: CGPoint(x: 8.02, y: 2.14))
                shape.addLine(to: CGPoint(x: 10, y: 4.95))
                shape.addLine(to: CGPoint(x: 11.23, y: 3.21))
                shape.addCurve(to: CGPoint(x: 14.5, y: 1.5), controlPoint1: CGPoint(x: 11.98, y: 2.14), controlPoint2: CGPoint(x: 13.2, y: 1.5))
                shape.addLine(to: CGPoint(x: 14.5, y: 1.5))
                shape.close()
                shape.move(to: CGPoint(x: 14.5, y: 0))
                shape.addCurve(to: CGPoint(x: 10, y: 2.34), controlPoint1: CGPoint(x: 12.64, y: 0), controlPoint2: CGPoint(x: 11, y: 0.93))
                shape.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 9, y: 0.93), controlPoint2: CGPoint(x: 7.36, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 5.5), controlPoint1: CGPoint(x: 2.46, y: 0), controlPoint2: CGPoint(x: 0, y: 2.46))
                shape.addCurve(to: CGPoint(x: 10, y: 18.35), controlPoint1: CGPoint(x: 0, y: 11.22), controlPoint2: CGPoint(x: 6.5, y: 15.94))
                shape.addCurve(to: CGPoint(x: 20, y: 5.5), controlPoint1: CGPoint(x: 13.5, y: 15.94), controlPoint2: CGPoint(x: 20, y: 11.22))
                shape.addCurve(to: CGPoint(x: 14.5, y: 0), controlPoint1: CGPoint(x: 20, y: 2.46), controlPoint2: CGPoint(x: 17.54, y: 0))
                shape.addLine(to: CGPoint(x: 14.5, y: 0))
                shape.addLine(to: CGPoint(x: 14.5, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 14.5, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }

    class func drawGridiconsheadingH6(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 10)
        context.translateBy(x: -433, y: -216)

        /// gridicons-heading-h6
        do {
            context.saveGState()
            context.translateBy(x: 433, y: 216)

            /// heading-h6
            do {
                context.saveGState()

                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 8, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 16.58, y: 2.49))
                shape.addCurve(to: CGPoint(x: 15.76, y: 2), controlPoint1: CGPoint(x: 16.33, y: 2.29), controlPoint2: CGPoint(x: 16.06, y: 2.12))
                shape.addCurve(to: CGPoint(x: 13.82, y: 2), controlPoint1: CGPoint(x: 15.14, y: 1.76), controlPoint2: CGPoint(x: 14.44, y: 1.76))
                shape.addCurve(to: CGPoint(x: 13.04, y: 2.52), controlPoint1: CGPoint(x: 13.52, y: 2.11), controlPoint2: CGPoint(x: 13.25, y: 2.29))
                shape.addCurve(to: CGPoint(x: 12.49, y: 3.45), controlPoint1: CGPoint(x: 12.8, y: 2.79), controlPoint2: CGPoint(x: 12.61, y: 3.11))
                shape.addCurve(to: CGPoint(x: 12.24, y: 4.88), controlPoint1: CGPoint(x: 12.33, y: 3.91), controlPoint2: CGPoint(x: 12.25, y: 4.4))
                shape.addCurve(to: CGPoint(x: 13.49, y: 4.11), controlPoint1: CGPoint(x: 12.61, y: 4.55), controlPoint2: CGPoint(x: 13.03, y: 4.29))
                shape.addCurve(to: CGPoint(x: 14.77, y: 3.84), controlPoint1: CGPoint(x: 13.9, y: 3.94), controlPoint2: CGPoint(x: 14.33, y: 3.85))
                shape.addCurve(to: CGPoint(x: 16, y: 4), controlPoint1: CGPoint(x: 15.19, y: 3.84), controlPoint2: CGPoint(x: 15.6, y: 3.89))
                shape.addCurve(to: CGPoint(x: 17, y: 4.55), controlPoint1: CGPoint(x: 16.36, y: 4.12), controlPoint2: CGPoint(x: 16.7, y: 4.31))
                shape.addCurve(to: CGPoint(x: 17.68, y: 5.48), controlPoint1: CGPoint(x: 17.29, y: 4.81), controlPoint2: CGPoint(x: 17.53, y: 5.12))
                shape.addCurve(to: CGPoint(x: 18, y: 6.77), controlPoint1: CGPoint(x: 17.87, y: 5.89), controlPoint2: CGPoint(x: 17.98, y: 6.33))
                shape.addCurve(to: CGPoint(x: 17.7, y: 8.12), controlPoint1: CGPoint(x: 18.01, y: 7.24), controlPoint2: CGPoint(x: 17.91, y: 7.7))
                shape.addCurve(to: CGPoint(x: 16.87, y: 9.12), controlPoint1: CGPoint(x: 17.49, y: 8.51), controlPoint2: CGPoint(x: 17.21, y: 8.85))
                shape.addCurve(to: CGPoint(x: 15.67, y: 9.76), controlPoint1: CGPoint(x: 16.51, y: 9.41), controlPoint2: CGPoint(x: 16.11, y: 9.63))
                shape.addCurve(to: CGPoint(x: 12.67, y: 9.71), controlPoint1: CGPoint(x: 14.69, y: 10.07), controlPoint2: CGPoint(x: 13.64, y: 10.06))
                shape.addCurve(to: CGPoint(x: 11.32, y: 8.86), controlPoint1: CGPoint(x: 12.16, y: 9.53), controlPoint2: CGPoint(x: 11.7, y: 9.24))
                shape.addCurve(to: CGPoint(x: 10.32, y: 7.38), controlPoint1: CGPoint(x: 10.88, y: 8.45), controlPoint2: CGPoint(x: 10.54, y: 7.94))
                shape.addCurve(to: CGPoint(x: 10, y: 5.22), controlPoint1: CGPoint(x: 10.08, y: 6.69), controlPoint2: CGPoint(x: 9.97, y: 5.96))
                shape.addCurve(to: CGPoint(x: 10.38, y: 2.88), controlPoint1: CGPoint(x: 9.98, y: 4.43), controlPoint2: CGPoint(x: 10.11, y: 3.63))
                shape.addCurve(to: CGPoint(x: 11.38, y: 1.26), controlPoint1: CGPoint(x: 10.6, y: 2.28), controlPoint2: CGPoint(x: 10.94, y: 1.73))
                shape.addCurve(to: CGPoint(x: 12.82, y: 0.31), controlPoint1: CGPoint(x: 11.79, y: 0.85), controlPoint2: CGPoint(x: 12.28, y: 0.52))
                shape.addCurve(to: CGPoint(x: 14.52, y: 0), controlPoint1: CGPoint(x: 13.36, y: 0.1), controlPoint2: CGPoint(x: 13.94, y: -0))
                shape.addCurve(to: CGPoint(x: 16.52, y: 0.34), controlPoint1: CGPoint(x: 15.2, y: -0.02), controlPoint2: CGPoint(x: 15.88, y: 0.1))
                shape.addCurve(to: CGPoint(x: 17.89, y: 1.15), controlPoint1: CGPoint(x: 17.02, y: 0.53), controlPoint2: CGPoint(x: 17.48, y: 0.81))
                shape.addLine(to: CGPoint(x: 16.58, y: 2.49))
                shape.close()
                shape.move(to: CGPoint(x: 14.19, y: 8.33))
                shape.addCurve(to: CGPoint(x: 14.79, y: 8.24), controlPoint1: CGPoint(x: 14.39, y: 8.33), controlPoint2: CGPoint(x: 14.59, y: 8.3))
                shape.addCurve(to: CGPoint(x: 15.3, y: 8), controlPoint1: CGPoint(x: 14.97, y: 8.2), controlPoint2: CGPoint(x: 15.15, y: 8.11))
                shape.addCurve(to: CGPoint(x: 15.65, y: 7.51), controlPoint1: CGPoint(x: 15.45, y: 7.87), controlPoint2: CGPoint(x: 15.57, y: 7.7))
                shape.addCurve(to: CGPoint(x: 15.78, y: 6.8), controlPoint1: CGPoint(x: 15.74, y: 7.29), controlPoint2: CGPoint(x: 15.79, y: 7.05))
                shape.addCurve(to: CGPoint(x: 15.35, y: 5.73), controlPoint1: CGPoint(x: 15.82, y: 6.4), controlPoint2: CGPoint(x: 15.66, y: 6))
                shape.addCurve(to: CGPoint(x: 14.23, y: 5.4), controlPoint1: CGPoint(x: 15.02, y: 5.5), controlPoint2: CGPoint(x: 14.63, y: 5.39))
                shape.addCurve(to: CGPoint(x: 13.23, y: 5.61), controlPoint1: CGPoint(x: 13.88, y: 5.4), controlPoint2: CGPoint(x: 13.54, y: 5.47))
                shape.addCurve(to: CGPoint(x: 12.23, y: 6.34), controlPoint1: CGPoint(x: 12.85, y: 5.78), controlPoint2: CGPoint(x: 12.51, y: 6.03))
                shape.addCurve(to: CGPoint(x: 12.52, y: 7.34), controlPoint1: CGPoint(x: 12.28, y: 6.69), controlPoint2: CGPoint(x: 12.37, y: 7.03))
                shape.addCurve(to: CGPoint(x: 12.96, y: 7.96), controlPoint1: CGPoint(x: 12.63, y: 7.57), controlPoint2: CGPoint(x: 12.78, y: 7.78))
                shape.addCurve(to: CGPoint(x: 13.5, y: 8.29), controlPoint1: CGPoint(x: 13.11, y: 8.11), controlPoint2: CGPoint(x: 13.3, y: 8.22))
                shape.addCurve(to: CGPoint(x: 14.19, y: 8.33), controlPoint1: CGPoint(x: 13.73, y: 8.35), controlPoint2: CGPoint(x: 13.96, y: 8.36))
                shape.close()
                shape.move(to: CGPoint(x: 14.19, y: 8.33))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()

                context.restoreGState()
            }

            context.restoreGState()
        }

        context.restoreGState()
    }

    class func drawGridiconsheadingH5(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 10)
        context.translateBy(x: -405, y: -216)

        /// gridicons-heading-h5
        do {
            context.saveGState()
            context.translateBy(x: 405, y: 216)

            /// heading-h5
            do {
                context.saveGState()

                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11.09, y: 7.19))
                shape.addCurve(to: CGPoint(x: 12.22, y: 7.88), controlPoint1: CGPoint(x: 11.44, y: 7.46), controlPoint2: CGPoint(x: 11.82, y: 7.69))
                shape.addCurve(to: CGPoint(x: 13.56, y: 8.17), controlPoint1: CGPoint(x: 12.64, y: 8.08), controlPoint2: CGPoint(x: 13.1, y: 8.18))
                shape.addCurve(to: CGPoint(x: 15, y: 7.77), controlPoint1: CGPoint(x: 14.07, y: 8.18), controlPoint2: CGPoint(x: 14.57, y: 8.05))
                shape.addCurve(to: CGPoint(x: 15.57, y: 6.63), controlPoint1: CGPoint(x: 15.38, y: 7.52), controlPoint2: CGPoint(x: 15.59, y: 7.08))
                shape.addCurve(to: CGPoint(x: 15, y: 5.5), controlPoint1: CGPoint(x: 15.59, y: 6.18), controlPoint2: CGPoint(x: 15.37, y: 5.75))
                shape.addCurve(to: CGPoint(x: 13.62, y: 5.11), controlPoint1: CGPoint(x: 14.59, y: 5.23), controlPoint2: CGPoint(x: 14.11, y: 5.09))
                shape.addLine(to: CGPoint(x: 13.15, y: 5.11))
                shape.addCurve(to: CGPoint(x: 12.75, y: 5.19), controlPoint1: CGPoint(x: 13.02, y: 5.12), controlPoint2: CGPoint(x: 12.88, y: 5.15))
                shape.addLine(to: CGPoint(x: 12.34, y: 5.34))
                shape.addLine(to: CGPoint(x: 11.86, y: 5.57))
                shape.addLine(to: CGPoint(x: 10.84, y: 5))
                shape.addLine(to: CGPoint(x: 11.12, y: 0))
                shape.addLine(to: CGPoint(x: 17.52, y: 0))
                shape.addLine(to: CGPoint(x: 17.52, y: 1.92))
                shape.addLine(to: CGPoint(x: 13.21, y: 1.92))
                shape.addLine(to: CGPoint(x: 13, y: 3.76))
                shape.addCurve(to: CGPoint(x: 13.68, y: 3.58), controlPoint1: CGPoint(x: 13.22, y: 3.68), controlPoint2: CGPoint(x: 13.45, y: 3.62))
                shape.addCurve(to: CGPoint(x: 14.39, y: 3.53), controlPoint1: CGPoint(x: 13.91, y: 3.54), controlPoint2: CGPoint(x: 14.15, y: 3.53))
                shape.addCurve(to: CGPoint(x: 15.76, y: 3.71), controlPoint1: CGPoint(x: 14.85, y: 3.53), controlPoint2: CGPoint(x: 15.31, y: 3.59))
                shape.addCurve(to: CGPoint(x: 16.9, y: 4.27), controlPoint1: CGPoint(x: 16.17, y: 3.82), controlPoint2: CGPoint(x: 16.56, y: 4.01))
                shape.addCurve(to: CGPoint(x: 17.68, y: 5.21), controlPoint1: CGPoint(x: 17.23, y: 4.52), controlPoint2: CGPoint(x: 17.5, y: 4.84))
                shape.addCurve(to: CGPoint(x: 18, y: 6.57), controlPoint1: CGPoint(x: 17.89, y: 5.63), controlPoint2: CGPoint(x: 18, y: 6.1))
                shape.addCurve(to: CGPoint(x: 17.66, y: 8), controlPoint1: CGPoint(x: 18.01, y: 7.07), controlPoint2: CGPoint(x: 17.89, y: 7.56))
                shape.addCurve(to: CGPoint(x: 16.75, y: 9.07), controlPoint1: CGPoint(x: 17.44, y: 8.42), controlPoint2: CGPoint(x: 17.13, y: 8.78))
                shape.addCurve(to: CGPoint(x: 15.44, y: 9.74), controlPoint1: CGPoint(x: 16.36, y: 9.37), controlPoint2: CGPoint(x: 15.91, y: 9.6))
                shape.addCurve(to: CGPoint(x: 13.9, y: 10), controlPoint1: CGPoint(x: 14.94, y: 9.9), controlPoint2: CGPoint(x: 14.42, y: 9.99))
                shape.addCurve(to: CGPoint(x: 11.59, y: 9.61), controlPoint1: CGPoint(x: 13.11, y: 10.02), controlPoint2: CGPoint(x: 12.33, y: 9.89))
                shape.addCurve(to: CGPoint(x: 10, y: 8.61), controlPoint1: CGPoint(x: 11.01, y: 9.37), controlPoint2: CGPoint(x: 10.47, y: 9.03))
                shape.addLine(to: CGPoint(x: 11.09, y: 7.19))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 10))
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()

                context.restoreGState()
            }

            context.restoreGState()
        }

        context.restoreGState()
    }

    class func drawGridiconsheadingH4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 10)
        context.translateBy(x: -377, y: -216)

        /// gridicons-heading-h4
        do {
            context.saveGState()
            context.translateBy(x: 377, y: 216)

            /// heading-h4
            do {
                context.saveGState()

                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 8, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 8))
                shape.addLine(to: CGPoint(x: 17, y: 8))
                shape.addLine(to: CGPoint(x: 17, y: 10))
                shape.addLine(to: CGPoint(x: 15, y: 10))
                shape.addLine(to: CGPoint(x: 15, y: 8))
                shape.addLine(to: CGPoint(x: 10, y: 8))
                shape.addLine(to: CGPoint(x: 10, y: 6))
                shape.addLine(to: CGPoint(x: 14.05, y: 0))
                shape.addLine(to: CGPoint(x: 17, y: 0))
                shape.addLine(to: CGPoint(x: 17, y: 6))
                shape.addLine(to: CGPoint(x: 18, y: 6))
                shape.addLine(to: CGPoint(x: 18, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 6))
                shape.addLine(to: CGPoint(x: 15, y: 2))
                shape.addLine(to: CGPoint(x: 12.21, y: 6))
                shape.addLine(to: CGPoint(x: 15, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 6))
                context.saveGState()
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()

                context.restoreGState()
            }

            context.restoreGState()
        }

        context.restoreGState()
    }

    class func drawGridiconsheadingH3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 10)
        context.translateBy(x: -429, y: -196)

        /// gridicons-heading-h3
        do {
            context.saveGState()
            context.translateBy(x: 429, y: 195)

            /// heading-h3
            do {
                context.saveGState()

                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11.11, y: 7.22))
                shape.addCurve(to: CGPoint(x: 12.28, y: 7.92), controlPoint1: CGPoint(x: 11.47, y: 7.51), controlPoint2: CGPoint(x: 11.86, y: 7.74))
                shape.addCurve(to: CGPoint(x: 13.65, y: 8.19), controlPoint1: CGPoint(x: 12.71, y: 8.1), controlPoint2: CGPoint(x: 13.18, y: 8.19))
                shape.addCurve(to: CGPoint(x: 15.05, y: 7.89), controlPoint1: CGPoint(x: 14.13, y: 8.21), controlPoint2: CGPoint(x: 14.62, y: 8.1))
                shape.addCurve(to: CGPoint(x: 15.6, y: 7.05), controlPoint1: CGPoint(x: 15.38, y: 7.74), controlPoint2: CGPoint(x: 15.6, y: 7.41))
                shape.addCurve(to: CGPoint(x: 15.45, y: 6.47), controlPoint1: CGPoint(x: 15.6, y: 6.85), controlPoint2: CGPoint(x: 15.55, y: 6.65))
                shape.addCurve(to: CGPoint(x: 14.94, y: 6.04), controlPoint1: CGPoint(x: 15.33, y: 6.28), controlPoint2: CGPoint(x: 15.15, y: 6.13))
                shape.addCurve(to: CGPoint(x: 13.94, y: 5.77), controlPoint1: CGPoint(x: 14.62, y: 5.9), controlPoint2: CGPoint(x: 14.29, y: 5.81))
                shape.addCurve(to: CGPoint(x: 12.42, y: 5.67), controlPoint1: CGPoint(x: 13.44, y: 5.7), controlPoint2: CGPoint(x: 12.93, y: 5.66))
                shape.addLine(to: CGPoint(x: 12.42, y: 4.1))
                shape.addCurve(to: CGPoint(x: 14.59, y: 3.74), controlPoint1: CGPoint(x: 13.16, y: 4.15), controlPoint2: CGPoint(x: 13.91, y: 4.03))
                shape.addCurve(to: CGPoint(x: 15.22, y: 2.81), controlPoint1: CGPoint(x: 14.96, y: 3.58), controlPoint2: CGPoint(x: 15.21, y: 3.22))
                shape.addCurve(to: CGPoint(x: 14.84, y: 2), controlPoint1: CGPoint(x: 15.25, y: 2.49), controlPoint2: CGPoint(x: 15.1, y: 2.18))
                shape.addCurve(to: CGPoint(x: 13.71, y: 1.72), controlPoint1: CGPoint(x: 14.5, y: 1.8), controlPoint2: CGPoint(x: 14.11, y: 1.7))
                shape.addCurve(to: CGPoint(x: 12.57, y: 2), controlPoint1: CGPoint(x: 13.32, y: 1.73), controlPoint2: CGPoint(x: 12.93, y: 1.83))
                shape.addCurve(to: CGPoint(x: 11.51, y: 2.62), controlPoint1: CGPoint(x: 12.2, y: 2.17), controlPoint2: CGPoint(x: 11.84, y: 2.38))
                shape.addLine(to: CGPoint(x: 10.29, y: 1.23))
                shape.addCurve(to: CGPoint(x: 11.93, y: 0.33), controlPoint1: CGPoint(x: 10.79, y: 0.85), controlPoint2: CGPoint(x: 11.34, y: 0.55))
                shape.addCurve(to: CGPoint(x: 13.83, y: 0), controlPoint1: CGPoint(x: 12.54, y: 0.11), controlPoint2: CGPoint(x: 13.18, y: -0.01))
                shape.addCurve(to: CGPoint(x: 15.39, y: 0.17), controlPoint1: CGPoint(x: 14.36, y: -0.01), controlPoint2: CGPoint(x: 14.88, y: 0.05))
                shape.addCurve(to: CGPoint(x: 16.6, y: 0.69), controlPoint1: CGPoint(x: 15.82, y: 0.27), controlPoint2: CGPoint(x: 16.23, y: 0.45))
                shape.addCurve(to: CGPoint(x: 17.39, y: 1.52), controlPoint1: CGPoint(x: 16.93, y: 0.9), controlPoint2: CGPoint(x: 17.2, y: 1.19))
                shape.addCurve(to: CGPoint(x: 17.67, y: 2.64), controlPoint1: CGPoint(x: 17.58, y: 1.86), controlPoint2: CGPoint(x: 17.68, y: 2.25))
                shape.addCurve(to: CGPoint(x: 17.15, y: 3.92), controlPoint1: CGPoint(x: 17.68, y: 3.12), controlPoint2: CGPoint(x: 17.49, y: 3.58))
                shape.addCurve(to: CGPoint(x: 15.69, y: 4.78), controlPoint1: CGPoint(x: 16.73, y: 4.31), controlPoint2: CGPoint(x: 16.23, y: 4.61))
                shape.addLine(to: CGPoint(x: 15.69, y: 4.84))
                shape.addCurve(to: CGPoint(x: 17.34, y: 5.67), controlPoint1: CGPoint(x: 16.3, y: 4.98), controlPoint2: CGPoint(x: 16.86, y: 5.27))
                shape.addCurve(to: CGPoint(x: 18, y: 7.19), controlPoint1: CGPoint(x: 17.78, y: 6.05), controlPoint2: CGPoint(x: 18.02, y: 6.61))
                shape.addCurve(to: CGPoint(x: 17.66, y: 8.38), controlPoint1: CGPoint(x: 18, y: 7.61), controlPoint2: CGPoint(x: 17.89, y: 8.03))
                shape.addCurve(to: CGPoint(x: 16.76, y: 9.26), controlPoint1: CGPoint(x: 17.43, y: 8.74), controlPoint2: CGPoint(x: 17.12, y: 9.04))
                shape.addCurve(to: CGPoint(x: 15.44, y: 9.81), controlPoint1: CGPoint(x: 16.35, y: 9.51), controlPoint2: CGPoint(x: 15.91, y: 9.7))
                shape.addCurve(to: CGPoint(x: 13.87, y: 10), controlPoint1: CGPoint(x: 14.93, y: 9.94), controlPoint2: CGPoint(x: 14.4, y: 10))
                shape.addCurve(to: CGPoint(x: 11.56, y: 9.63), controlPoint1: CGPoint(x: 13.08, y: 10.02), controlPoint2: CGPoint(x: 12.3, y: 9.89))
                shape.addCurve(to: CGPoint(x: 9.99, y: 8.63), controlPoint1: CGPoint(x: 10.97, y: 9.42), controlPoint2: CGPoint(x: 10.43, y: 9.07))
                shape.addLine(to: CGPoint(x: 11.11, y: 7.22))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 6, y: 6))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 8, y: 10))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addLine(to: CGPoint(x: 6, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 4))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()

                context.restoreGState()
            }

            context.restoreGState()
        }

        context.restoreGState()
    }

    class func drawGridiconsheadingH2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 10)
        context.translateBy(x: -401, y: -195)

        /// gridicons-heading-h2
        do {
            context.saveGState()
            context.translateBy(x: 401, y: 195)

            /// heading-h2
            do {
                context.saveGState()

                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 6, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 8))
                shape.addCurve(to: CGPoint(x: 15.06, y: 6.95), controlPoint1: CGPoint(x: 14.51, y: 7.59), controlPoint2: CGPoint(x: 14.6, y: 7.38))
                shape.addCurve(to: CGPoint(x: 16.29, y: 5.67), controlPoint1: CGPoint(x: 15.5, y: 6.55), controlPoint2: CGPoint(x: 15.91, y: 6.12))
                shape.addCurve(to: CGPoint(x: 17.14, y: 4.39), controlPoint1: CGPoint(x: 16.62, y: 5.28), controlPoint2: CGPoint(x: 16.91, y: 4.85))
                shape.addCurve(to: CGPoint(x: 17.45, y: 3.13), controlPoint1: CGPoint(x: 17.34, y: 4), controlPoint2: CGPoint(x: 17.45, y: 3.57))
                shape.addCurve(to: CGPoint(x: 17.18, y: 1.85), controlPoint1: CGPoint(x: 17.45, y: 2.69), controlPoint2: CGPoint(x: 17.36, y: 2.25))
                shape.addCurve(to: CGPoint(x: 16.42, y: 0.85), controlPoint1: CGPoint(x: 17, y: 1.47), controlPoint2: CGPoint(x: 16.74, y: 1.12))
                shape.addCurve(to: CGPoint(x: 15.25, y: 0.22), controlPoint1: CGPoint(x: 16.07, y: 0.57), controlPoint2: CGPoint(x: 15.68, y: 0.35))
                shape.addCurve(to: CGPoint(x: 13.75, y: 0), controlPoint1: CGPoint(x: 14.77, y: 0.07), controlPoint2: CGPoint(x: 14.26, y: -0.01))
                shape.addCurve(to: CGPoint(x: 12.68, y: 0.1), controlPoint1: CGPoint(x: 13.39, y: 0), controlPoint2: CGPoint(x: 13.03, y: 0.03))
                shape.addCurve(to: CGPoint(x: 11.68, y: 0.39), controlPoint1: CGPoint(x: 12.34, y: 0.16), controlPoint2: CGPoint(x: 12, y: 0.26))
                shape.addCurve(to: CGPoint(x: 10.82, y: 0.88), controlPoint1: CGPoint(x: 11.38, y: 0.52), controlPoint2: CGPoint(x: 11.09, y: 0.69))
                shape.addCurve(to: CGPoint(x: 10, y: 1.56), controlPoint1: CGPoint(x: 10.53, y: 1.09), controlPoint2: CGPoint(x: 10.26, y: 1.32))
                shape.addLine(to: CGPoint(x: 11.24, y: 2.78))
                shape.addCurve(to: CGPoint(x: 12.24, y: 2.08), controlPoint1: CGPoint(x: 11.55, y: 2.51), controlPoint2: CGPoint(x: 11.88, y: 2.28))
                shape.addCurve(to: CGPoint(x: 13.39, y: 1.78), controlPoint1: CGPoint(x: 12.59, y: 1.88), controlPoint2: CGPoint(x: 12.99, y: 1.78))
                shape.addCurve(to: CGPoint(x: 14.66, y: 2.16), controlPoint1: CGPoint(x: 13.84, y: 1.75), controlPoint2: CGPoint(x: 14.3, y: 1.89))
                shape.addCurve(to: CGPoint(x: 15.11, y: 3.26), controlPoint1: CGPoint(x: 14.97, y: 2.44), controlPoint2: CGPoint(x: 15.14, y: 2.84))
                shape.addCurve(to: CGPoint(x: 14.75, y: 4.37), controlPoint1: CGPoint(x: 15.1, y: 3.66), controlPoint2: CGPoint(x: 14.97, y: 4.04))
                shape.addCurve(to: CGPoint(x: 13.75, y: 5.62), controlPoint1: CGPoint(x: 14.47, y: 4.82), controlPoint2: CGPoint(x: 14.13, y: 5.24))
                shape.addCurve(to: CGPoint(x: 12.16, y: 7.05), controlPoint1: CGPoint(x: 13.31, y: 6.05), controlPoint2: CGPoint(x: 12.77, y: 6.54))
                shape.addCurve(to: CGPoint(x: 10, y: 8.7), controlPoint1: CGPoint(x: 11.55, y: 7.56), controlPoint2: CGPoint(x: 10.75, y: 8.11))
                shape.addLine(to: CGPoint(x: 10, y: 10))
                shape.addLine(to: CGPoint(x: 18, y: 10))
                shape.addLine(to: CGPoint(x: 18, y: 8))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 8))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()

                context.restoreGState()
            }

            context.restoreGState()
        }

        context.restoreGState()
    }

    class func drawGridiconsheadingH1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 10)
        context.translateBy(x: -377, y: -195)

        /// gridicons-heading-h1
        do {
            context.saveGState()
            context.translateBy(x: 377, y: 195)

            /// heading-h1
            do {
                context.saveGState()

                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 6, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 12.57, y: 0))
                shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 11.98, y: 0.95), controlPoint2: CGPoint(x: 11.07, y: 1.66))
                shape.addLine(to: CGPoint(x: 10, y: 3))
                shape.addLine(to: CGPoint(x: 12, y: 3))
                shape.addLine(to: CGPoint(x: 12, y: 10))
                shape.addLine(to: CGPoint(x: 14, y: 10))
                shape.addLine(to: CGPoint(x: 14, y: 0))
                shape.addLine(to: CGPoint(x: 12.57, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 12.57, y: 0))
                context.saveGState()
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()

                context.restoreGState()
            }

            context.restoreGState()
        }

        context.restoreGState()
    }

    class func drawGridiconsheading(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 15)
        context.translateBy(x: -1089, y: -333)
        
        /// gridicons-heading
        do {
            context.saveGState()
            context.translateBy(x: 1089, y: 333)
            
            /// heading
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 12, y: 14.99))
                shape.addLine(to: CGPoint(x: 9, y: 14.99))
                shape.addLine(to: CGPoint(x: 9, y: 8.99))
                shape.addLine(to: CGPoint(x: 3, y: 8.99))
                shape.addLine(to: CGPoint(x: 3, y: 14.99))
                shape.addLine(to: CGPoint(x: 0, y: 14.99))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 3, y: 0))
                shape.addLine(to: CGPoint(x: 3, y: 5.99))
                shape.addLine(to: CGPoint(x: 9, y: 5.99))
                shape.addLine(to: CGPoint(x: 9, y: 0))
                shape.addLine(to: CGPoint(x: 12, y: 0))
                shape.addLine(to: CGPoint(x: 12, y: 14.99))
                shape.addLine(to: CGPoint(x: 12, y: 14.99))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 14.99))
                context.saveGState()
                context.translateBy(x: 0, y: 0.01)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsgrid(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -1063, y: -333)
        
        /// gridicons-grid
        do {
            context.saveGState()
            context.translateBy(x: 1063, y: 333)
            
            /// grid
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 4, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 4, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 4))
                shape.addLine(to: CGPoint(x: 4, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addLine(to: CGPoint(x: 6, y: 4))
                shape.addLine(to: CGPoint(x: 10, y: 4))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 12, y: 0))
                shape.addLine(to: CGPoint(x: 12, y: 4))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 4, y: 6))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 4, y: 10))
                shape.addLine(to: CGPoint(x: 4, y: 6))
                shape.addLine(to: CGPoint(x: 4, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 6))
                shape.addLine(to: CGPoint(x: 6, y: 6))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 10, y: 10))
                shape.addLine(to: CGPoint(x: 10, y: 6))
                shape.addLine(to: CGPoint(x: 10, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 12, y: 6))
                shape.addLine(to: CGPoint(x: 12, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 4, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 16))
                shape.addLine(to: CGPoint(x: 4, y: 16))
                shape.addLine(to: CGPoint(x: 4, y: 12))
                shape.addLine(to: CGPoint(x: 4, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 12))
                shape.addLine(to: CGPoint(x: 6, y: 12))
                shape.addLine(to: CGPoint(x: 6, y: 16))
                shape.addLine(to: CGPoint(x: 10, y: 16))
                shape.addLine(to: CGPoint(x: 10, y: 12))
                shape.addLine(to: CGPoint(x: 10, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 12))
                shape.addLine(to: CGPoint(x: 12, y: 12))
                shape.addLine(to: CGPoint(x: 12, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 12))
                shape.addLine(to: CGPoint(x: 16, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 12))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsglobe(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1033, y: -333)
        
        /// gridicons-globe
        do {
            context.saveGState()
            context.translateBy(x: 1033, y: 333)
            
            /// globe
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 18))
                shape.addLine(to: CGPoint(x: 12, y: 16))
                shape.addLine(to: CGPoint(x: 13, y: 15))
                shape.addLine(to: CGPoint(x: 13, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 12))
                shape.addLine(to: CGPoint(x: 10, y: 11))
                shape.addLine(to: CGPoint(x: 7, y: 11))
                shape.addLine(to: CGPoint(x: 7, y: 14))
                shape.addLine(to: CGPoint(x: 9, y: 16))
                shape.addLine(to: CGPoint(x: 9, y: 17.93))
                shape.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.06, y: 17.44), controlPoint2: CGPoint(x: 2, y: 14.07))
                shape.addLine(to: CGPoint(x: 3, y: 11))
                shape.addLine(to: CGPoint(x: 5, y: 11))
                shape.addLine(to: CGPoint(x: 5, y: 9))
                shape.addLine(to: CGPoint(x: 7, y: 9))
                shape.addLine(to: CGPoint(x: 10, y: 6))
                shape.addLine(to: CGPoint(x: 10, y: 4))
                shape.addLine(to: CGPoint(x: 8, y: 4))
                shape.addLine(to: CGPoint(x: 7, y: 3))
                shape.addLine(to: CGPoint(x: 7, y: 2.59))
                shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 7.93, y: 2.21), controlPoint2: CGPoint(x: 8.94, y: 2))
                shape.addCurve(to: CGPoint(x: 13, y: 2.59), controlPoint1: CGPoint(x: 11.06, y: 2), controlPoint2: CGPoint(x: 12.07, y: 2.21))
                shape.addLine(to: CGPoint(x: 13, y: 4))
                shape.addLine(to: CGPoint(x: 12, y: 5))
                shape.addLine(to: CGPoint(x: 12, y: 7))
                shape.addLine(to: CGPoint(x: 13, y: 8))
                shape.addLine(to: CGPoint(x: 16.13, y: 4.87))
                shape.addCurve(to: CGPoint(x: 17.74, y: 8), controlPoint1: CGPoint(x: 16.88, y: 5.77), controlPoint2: CGPoint(x: 17.43, y: 6.83))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addLine(to: CGPoint(x: 14, y: 10))
                shape.addLine(to: CGPoint(x: 14, y: 12))
                shape.addLine(to: CGPoint(x: 15, y: 13))
                shape.addLine(to: CGPoint(x: 17, y: 13))
                shape.addLine(to: CGPoint(x: 17.29, y: 13.29))
                shape.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 16.03, y: 16.06), controlPoint2: CGPoint(x: 13.24, y: 18))
                shape.addLine(to: CGPoint(x: 10, y: 18))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 18))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsfullscreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -1005, y: -333)
        
        /// gridicons-fullscreen
        do {
            context.saveGState()
            context.translateBy(x: 1005, y: 333)
            
            /// gridicons-fullscreen
            do {
                context.saveGState()
                
                /// Artwork
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 18, y: 0))
                    shape.addLine(to: CGPoint(x: 18, y: 6))
                    shape.addLine(to: CGPoint(x: 16, y: 6))
                    shape.addLine(to: CGPoint(x: 16, y: 3.41))
                    shape.addLine(to: CGPoint(x: 12.71, y: 6.71))
                    shape.addLine(to: CGPoint(x: 11.29, y: 5.29))
                    shape.addLine(to: CGPoint(x: 14.59, y: 2))
                    shape.addLine(to: CGPoint(x: 12, y: 2))
                    shape.addLine(to: CGPoint(x: 12, y: 0))
                    shape.addLine(to: CGPoint(x: 18, y: 0))
                    shape.close()
                    shape.move(to: CGPoint.zero)
                    shape.addLine(to: CGPoint(x: 0, y: 6))
                    shape.addLine(to: CGPoint(x: 2, y: 6))
                    shape.addLine(to: CGPoint(x: 2, y: 3.41))
                    shape.addLine(to: CGPoint(x: 5.29, y: 6.71))
                    shape.addLine(to: CGPoint(x: 6.71, y: 5.29))
                    shape.addLine(to: CGPoint(x: 3.41, y: 2))
                    shape.addLine(to: CGPoint(x: 6, y: 2))
                    shape.addLine(to: CGPoint(x: 6, y: 0))
                    shape.addLine(to: CGPoint.zero)
                    shape.close()
                    shape.move(to: CGPoint(x: 18, y: 18))
                    shape.addLine(to: CGPoint(x: 18, y: 12))
                    shape.addLine(to: CGPoint(x: 16, y: 12))
                    shape.addLine(to: CGPoint(x: 16, y: 14.59))
                    shape.addLine(to: CGPoint(x: 12.71, y: 11.3))
                    shape.addLine(to: CGPoint(x: 11.3, y: 12.71))
                    shape.addLine(to: CGPoint(x: 14.59, y: 16))
                    shape.addLine(to: CGPoint(x: 12, y: 16))
                    shape.addLine(to: CGPoint(x: 12, y: 18))
                    shape.addLine(to: CGPoint(x: 18, y: 18))
                    shape.close()
                    shape.move(to: CGPoint(x: 6, y: 18))
                    shape.addLine(to: CGPoint(x: 6, y: 16))
                    shape.addLine(to: CGPoint(x: 3.41, y: 16))
                    shape.addLine(to: CGPoint(x: 6.7, y: 12.71))
                    shape.addLine(to: CGPoint(x: 5.29, y: 11.29))
                    shape.addLine(to: CGPoint(x: 2, y: 14.59))
                    shape.addLine(to: CGPoint(x: 2, y: 12))
                    shape.addLine(to: CGPoint(x: 0, y: 12))
                    shape.addLine(to: CGPoint(x: 0, y: 18))
                    shape.addLine(to: CGPoint(x: 6, y: 18))
                    shape.close()
                    shape.move(to: CGPoint(x: 6, y: 18))
                    context.saveGState()
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsfullscreenexit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -977, y: -333)
        
        /// gridicons-fullscreen-exit
        do {
            context.saveGState()
            context.translateBy(x: 977, y: 333)
            
            /// gridicons-fullscreen-exit
            do {
                context.saveGState()
                
                /// Artwork
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 10.71, y: 6.71))
                    shape.addLine(to: CGPoint(x: 10.71, y: 0.71))
                    shape.addLine(to: CGPoint(x: 12.71, y: 0.71))
                    shape.addLine(to: CGPoint(x: 12.71, y: 3.3))
                    shape.addLine(to: CGPoint(x: 16, y: 0.01))
                    shape.addLine(to: CGPoint(x: 17.41, y: 1.42))
                    shape.addLine(to: CGPoint(x: 14.12, y: 4.71))
                    shape.addLine(to: CGPoint(x: 16.71, y: 4.71))
                    shape.addLine(to: CGPoint(x: 16.71, y: 6.71))
                    shape.addLine(to: CGPoint(x: 10.71, y: 6.71))
                    shape.close()
                    shape.move(to: CGPoint(x: 0.71, y: 6.71))
                    shape.addLine(to: CGPoint(x: 0.71, y: 4.71))
                    shape.addLine(to: CGPoint(x: 3.3, y: 4.71))
                    shape.addLine(to: CGPoint(x: 0, y: 1.42))
                    shape.addLine(to: CGPoint(x: 1.42, y: 0))
                    shape.addLine(to: CGPoint(x: 4.71, y: 3.3))
                    shape.addLine(to: CGPoint(x: 4.71, y: 0.71))
                    shape.addLine(to: CGPoint(x: 6.71, y: 0.71))
                    shape.addLine(to: CGPoint(x: 6.71, y: 6.71))
                    shape.addLine(to: CGPoint(x: 0.71, y: 6.71))
                    shape.close()
                    shape.move(to: CGPoint(x: 16.71, y: 10.71))
                    shape.addLine(to: CGPoint(x: 16.71, y: 12.71))
                    shape.addLine(to: CGPoint(x: 14.12, y: 12.71))
                    shape.addLine(to: CGPoint(x: 17.41, y: 16))
                    shape.addLine(to: CGPoint(x: 16, y: 17.41))
                    shape.addLine(to: CGPoint(x: 12.71, y: 14.12))
                    shape.addLine(to: CGPoint(x: 12.71, y: 16.71))
                    shape.addLine(to: CGPoint(x: 10.71, y: 16.71))
                    shape.addLine(to: CGPoint(x: 10.71, y: 10.71))
                    shape.addLine(to: CGPoint(x: 16.71, y: 10.71))
                    shape.close()
                    shape.move(to: CGPoint(x: 6.71, y: 10.71))
                    shape.addLine(to: CGPoint(x: 6.71, y: 16.71))
                    shape.addLine(to: CGPoint(x: 4.71, y: 16.71))
                    shape.addLine(to: CGPoint(x: 4.71, y: 14.12))
                    shape.addLine(to: CGPoint(x: 1.42, y: 17.42))
                    shape.addLine(to: CGPoint(x: 0, y: 16))
                    shape.addLine(to: CGPoint(x: 3.3, y: 12.71))
                    shape.addLine(to: CGPoint(x: 0.71, y: 12.71))
                    shape.addLine(to: CGPoint(x: 0.71, y: 10.71))
                    shape.addLine(to: CGPoint(x: 6.71, y: 10.71))
                    shape.close()
                    shape.move(to: CGPoint(x: 6.71, y: 10.71))
                    context.saveGState()
                    context.translateBy(x: 0.29, y: 0.29)
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsfolder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 14)
        context.translateBy(x: -951, y: -333)
        
        /// gridicons-folder
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 333)
            
            /// folder
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 14, y: 14))
                shape.addLine(to: CGPoint(x: 2, y: 14))
                shape.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 0.9, y: 14), controlPoint2: CGPoint(x: 0, y: 13.1))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                shape.addLine(to: CGPoint(x: 5, y: 0))
                shape.addCurve(to: CGPoint(x: 7, y: 2), controlPoint1: CGPoint(x: 6.1, y: 0), controlPoint2: CGPoint(x: 7, y: 0.9))
                shape.addLine(to: CGPoint(x: 7, y: 2))
                shape.addLine(to: CGPoint(x: 14, y: 2))
                shape.addCurve(to: CGPoint(x: 16, y: 4), controlPoint1: CGPoint(x: 15.1, y: 2), controlPoint2: CGPoint(x: 16, y: 2.9))
                shape.addLine(to: CGPoint(x: 16, y: 12))
                shape.addCurve(to: CGPoint(x: 14, y: 14), controlPoint1: CGPoint(x: 16, y: 13.1), controlPoint2: CGPoint(x: 15.1, y: 14))
                shape.addLine(to: CGPoint(x: 14, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 14))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsfoldermultiple(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 18)
        context.translateBy(x: -1280, y: -301)
        
        /// gridicons-folder-multiple
        do {
            context.saveGState()
            context.translateBy(x: 1280, y: 301)
            
            /// folder-multiple
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 4.89))
                shape.addLine(to: CGPoint(x: 0, y: 16))
                shape.addCurve(to: CGPoint(x: 2, y: 18), controlPoint1: CGPoint(x: 0, y: 17.1), controlPoint2: CGPoint(x: 0.9, y: 18))
                shape.addLine(to: CGPoint(x: 16, y: 18))
                shape.addCurve(to: CGPoint(x: 18, y: 16), controlPoint1: CGPoint(x: 17.11, y: 18), controlPoint2: CGPoint(x: 18, y: 17.11))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addLine(to: CGPoint(x: 2, y: 16))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 6, y: 14))
                shape.addCurve(to: CGPoint(x: 4, y: 12), controlPoint1: CGPoint(x: 4.89, y: 14), controlPoint2: CGPoint(x: 4, y: 13.11))
                shape.addLine(to: CGPoint(x: 4, y: 2))
                shape.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 4, y: 0.9), controlPoint2: CGPoint(x: 4.89, y: 0))
                shape.addLine(to: CGPoint(x: 9, y: 0))
                shape.addCurve(to: CGPoint(x: 11, y: 2), controlPoint1: CGPoint(x: 10.11, y: 0), controlPoint2: CGPoint(x: 11, y: 0.9))
                shape.addLine(to: CGPoint(x: 11, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addCurve(to: CGPoint(x: 20, y: 4), controlPoint1: CGPoint(x: 19.11, y: 2), controlPoint2: CGPoint(x: 20, y: 2.9))
                shape.addLine(to: CGPoint(x: 20, y: 12))
                shape.addCurve(to: CGPoint(x: 18, y: 14), controlPoint1: CGPoint(x: 20, y: 13.11), controlPoint2: CGPoint(x: 19.11, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 14))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsflipvertical(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 22)
        context.translateBy(x: -1254, y: -301)
        
        /// gridicons-flip-vertical
        do {
            context.saveGState()
            context.translateBy(x: 1254, y: 301)
            
            /// flip-vertical
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 14, y: 3))
                shape.addLine(to: CGPoint(x: 9, y: 3))
                shape.addLine(to: CGPoint(x: 9, y: 0))
                shape.addLine(to: CGPoint(x: 7, y: 0))
                shape.addLine(to: CGPoint(x: 7, y: 3))
                shape.addLine(to: CGPoint(x: 2, y: 3))
                shape.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 0.9, y: 3), controlPoint2: CGPoint(x: 0, y: 3.9))
                shape.addLine(to: CGPoint(x: 0, y: 17))
                shape.addCurve(to: CGPoint(x: 2, y: 19), controlPoint1: CGPoint(x: 0, y: 18.11), controlPoint2: CGPoint(x: 0.9, y: 19))
                shape.addLine(to: CGPoint(x: 7, y: 19))
                shape.addLine(to: CGPoint(x: 7, y: 22))
                shape.addLine(to: CGPoint(x: 9, y: 22))
                shape.addLine(to: CGPoint(x: 9, y: 19))
                shape.addLine(to: CGPoint(x: 14, y: 19))
                shape.addCurve(to: CGPoint(x: 16, y: 17), controlPoint1: CGPoint(x: 15.11, y: 19), controlPoint2: CGPoint(x: 16, y: 18.11))
                shape.addLine(to: CGPoint(x: 16, y: 5))
                shape.addCurve(to: CGPoint(x: 14, y: 3), controlPoint1: CGPoint(x: 16, y: 3.9), controlPoint2: CGPoint(x: 15.11, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 3))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 5))
                shape.addLine(to: CGPoint(x: 7, y: 5))
                shape.addLine(to: CGPoint(x: 7, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 17))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 17))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsfliphorizontal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 16)
        context.translateBy(x: -1222, y: -301)
        
        /// gridicons-flip-horizontal
        do {
            context.saveGState()
            context.translateBy(x: 1222, y: 301)
            
            /// flip-horizontal
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 19, y: 14))
                shape.addLine(to: CGPoint(x: 19, y: 9))
                shape.addLine(to: CGPoint(x: 22, y: 9))
                shape.addLine(to: CGPoint(x: 22, y: 7))
                shape.addLine(to: CGPoint(x: 19, y: 7))
                shape.addLine(to: CGPoint(x: 19, y: 2))
                shape.addCurve(to: CGPoint(x: 17, y: 0), controlPoint1: CGPoint(x: 19, y: 0.9), controlPoint2: CGPoint(x: 18.11, y: 0))
                shape.addLine(to: CGPoint(x: 5, y: 0))
                shape.addCurve(to: CGPoint(x: 3, y: 2), controlPoint1: CGPoint(x: 3.9, y: 0), controlPoint2: CGPoint(x: 3, y: 0.9))
                shape.addLine(to: CGPoint(x: 3, y: 7))
                shape.addLine(to: CGPoint(x: 0, y: 7))
                shape.addLine(to: CGPoint(x: 0, y: 9))
                shape.addLine(to: CGPoint(x: 3, y: 9))
                shape.addLine(to: CGPoint(x: 3, y: 14))
                shape.addCurve(to: CGPoint(x: 5, y: 16), controlPoint1: CGPoint(x: 3, y: 15.11), controlPoint2: CGPoint(x: 3.9, y: 16))
                shape.addLine(to: CGPoint(x: 17, y: 16))
                shape.addCurve(to: CGPoint(x: 19, y: 14), controlPoint1: CGPoint(x: 18.11, y: 16), controlPoint2: CGPoint(x: 19, y: 15.11))
                shape.addLine(to: CGPoint(x: 19, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 2))
                shape.addLine(to: CGPoint(x: 17, y: 2))
                shape.addLine(to: CGPoint(x: 17, y: 7))
                shape.addLine(to: CGPoint(x: 5, y: 7))
                shape.addLine(to: CGPoint(x: 5, y: 2))
                shape.addLine(to: CGPoint(x: 5, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 2))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsflag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 17), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 17)
        context.translateBy(x: -1197, y: -301)
        
        /// gridicons-flag
        do {
            context.saveGState()
            context.translateBy(x: 1197, y: 301)
            
            /// flag
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 2))
                shape.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 10, y: 0.9), controlPoint2: CGPoint(x: 9.11, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 7, y: 10))
                shape.addCurve(to: CGPoint(x: 9, y: 12), controlPoint1: CGPoint(x: 7, y: 11.11), controlPoint2: CGPoint(x: 7.89, y: 12))
                shape.addLine(to: CGPoint(x: 15, y: 12))
                shape.addLine(to: CGPoint(x: 15, y: 2))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 2))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsfilter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 17), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 17)
        context.translateBy(x: -1171, y: -301)
        
        /// gridicons-filter
        do {
            context.saveGState()
            context.translateBy(x: 1171, y: 301)
            
            /// filter
            do {
                context.saveGState()
                
                /// filter_1_
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 14.19, y: 0))
                    shape.addLine(to: CGPoint(x: 1.01, y: 0))
                    shape.addCurve(to: CGPoint(x: 0, y: 0.99), controlPoint1: CGPoint(x: 0.45, y: -0), controlPoint2: CGPoint(x: 0, y: 0.44))
                    shape.addCurve(to: CGPoint(x: 0.3, y: 1.71), controlPoint1: CGPoint(x: -0, y: 1.26), controlPoint2: CGPoint(x: 0.11, y: 1.52))
                    shape.addLine(to: CGPoint(x: 5.6, y: 7))
                    shape.addLine(to: CGPoint(x: 5.6, y: 13))
                    shape.addLine(to: CGPoint(x: 9.6, y: 17))
                    shape.addLine(to: CGPoint(x: 9.6, y: 7))
                    shape.addLine(to: CGPoint(x: 14.89, y: 1.71))
                    shape.addCurve(to: CGPoint(x: 14.89, y: 0.3), controlPoint1: CGPoint(x: 15.28, y: 1.32), controlPoint2: CGPoint(x: 15.28, y: 0.69))
                    shape.addCurve(to: CGPoint(x: 14.19, y: 0), controlPoint1: CGPoint(x: 14.71, y: 0.11), controlPoint2: CGPoint(x: 14.45, y: 0))
                    shape.addLine(to: CGPoint(x: 14.19, y: 0))
                    shape.close()
                    shape.move(to: CGPoint(x: 14.19, y: 0))
                    context.saveGState()
                    context.translateBy(x: 0.41, y: -0)
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsexternal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -1143, y: -301)
        
        /// gridicons-external
        do {
            context.saveGState()
            context.translateBy(x: 1143, y: 301)
            
            /// external
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 16, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addCurve(to: CGPoint(x: 14, y: 18), controlPoint1: CGPoint(x: 16, y: 17.11), controlPoint2: CGPoint(x: 15.11, y: 18))
                shape.addLine(to: CGPoint(x: 2, y: 18))
                shape.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 0.9, y: 18), controlPoint2: CGPoint(x: 0, y: 17.11))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addCurve(to: CGPoint(x: 2, y: 2), controlPoint1: CGPoint(x: 0, y: 2.9), controlPoint2: CGPoint(x: 0.9, y: 2))
                shape.addLine(to: CGPoint(x: 8, y: 2))
                shape.addLine(to: CGPoint(x: 8, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 16))
                shape.addLine(to: CGPoint(x: 14, y: 16))
                shape.addLine(to: CGPoint(x: 14, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.addLine(to: CGPoint(x: 14.59, y: 2))
                shape.addLine(to: CGPoint(x: 6.79, y: 9.79))
                shape.addLine(to: CGPoint(x: 8.21, y: 11.21))
                shape.addLine(to: CGPoint(x: 16, y: 3.41))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addLine(to: CGPoint(x: 18, y: 8))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsellipsis(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 4), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 4), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 4)
        context.translateBy(x: -1115, y: -301)
        
        /// gridicons-ellipsis
        do {
            context.saveGState()
            context.translateBy(x: 1115, y: 301)
            
            /// ellipsis
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 4, y: 2))
                shape.addCurve(to: CGPoint(x: 2, y: 4), controlPoint1: CGPoint(x: 4, y: 3.1), controlPoint2: CGPoint(x: 3.1, y: 4))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 3.1))
                shape.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                shape.addCurve(to: CGPoint(x: 4, y: 2), controlPoint1: CGPoint(x: 3.1, y: 0), controlPoint2: CGPoint(x: 4, y: 0.9))
                shape.addLine(to: CGPoint(x: 4, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 0))
                shape.addCurve(to: CGPoint(x: 14, y: 2), controlPoint1: CGPoint(x: 14.9, y: 0), controlPoint2: CGPoint(x: 14, y: 0.9))
                shape.addCurve(to: CGPoint(x: 16, y: 4), controlPoint1: CGPoint(x: 14, y: 3.1), controlPoint2: CGPoint(x: 14.9, y: 4))
                shape.addCurve(to: CGPoint(x: 18, y: 2), controlPoint1: CGPoint(x: 17.1, y: 4), controlPoint2: CGPoint(x: 18, y: 3.1))
                shape.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 18, y: 0.9), controlPoint2: CGPoint(x: 17.1, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 0))
                shape.addCurve(to: CGPoint(x: 7, y: 2), controlPoint1: CGPoint(x: 7.9, y: 0), controlPoint2: CGPoint(x: 7, y: 0.9))
                shape.addCurve(to: CGPoint(x: 9, y: 4), controlPoint1: CGPoint(x: 7, y: 3.1), controlPoint2: CGPoint(x: 7.9, y: 4))
                shape.addCurve(to: CGPoint(x: 11, y: 2), controlPoint1: CGPoint(x: 10.1, y: 4), controlPoint2: CGPoint(x: 11, y: 3.1))
                shape.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 11, y: 0.9), controlPoint2: CGPoint(x: 10.1, y: 0))
                shape.addLine(to: CGPoint(x: 9, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsellipsiscircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1085, y: -301)
        
        /// gridicons-ellipsis-circle
        do {
            context.saveGState()
            context.translateBy(x: 1085, y: 301)
            
            /// ellipsis-circle
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 0, y: 4.5))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.5), controlPoint2: CGPoint(x: 4.5, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.5, y: 20), controlPoint2: CGPoint(x: 20, y: 15.5))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.5), controlPoint2: CGPoint(x: 15.5, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 11.5))
                shape.addCurve(to: CGPoint(x: 4, y: 10), controlPoint1: CGPoint(x: 4.7, y: 11.5), controlPoint2: CGPoint(x: 4, y: 10.8))
                shape.addCurve(to: CGPoint(x: 5.5, y: 8.5), controlPoint1: CGPoint(x: 4, y: 9.2), controlPoint2: CGPoint(x: 4.7, y: 8.5))
                shape.addCurve(to: CGPoint(x: 7, y: 10), controlPoint1: CGPoint(x: 6.3, y: 8.5), controlPoint2: CGPoint(x: 7, y: 9.2))
                shape.addCurve(to: CGPoint(x: 5.5, y: 11.5), controlPoint1: CGPoint(x: 7, y: 10.8), controlPoint2: CGPoint(x: 6.3, y: 11.5))
                shape.addLine(to: CGPoint(x: 5.5, y: 11.5))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 11.5))
                shape.addCurve(to: CGPoint(x: 8.5, y: 10), controlPoint1: CGPoint(x: 9.2, y: 11.5), controlPoint2: CGPoint(x: 8.5, y: 10.8))
                shape.addCurve(to: CGPoint(x: 10, y: 8.5), controlPoint1: CGPoint(x: 8.5, y: 9.2), controlPoint2: CGPoint(x: 9.2, y: 8.5))
                shape.addCurve(to: CGPoint(x: 11.5, y: 10), controlPoint1: CGPoint(x: 10.8, y: 8.5), controlPoint2: CGPoint(x: 11.5, y: 9.2))
                shape.addCurve(to: CGPoint(x: 10, y: 11.5), controlPoint1: CGPoint(x: 11.5, y: 10.8), controlPoint2: CGPoint(x: 10.8, y: 11.5))
                shape.addLine(to: CGPoint(x: 10, y: 11.5))
                shape.close()
                shape.move(to: CGPoint(x: 14.5, y: 11.5))
                shape.addCurve(to: CGPoint(x: 13, y: 10), controlPoint1: CGPoint(x: 13.7, y: 11.5), controlPoint2: CGPoint(x: 13, y: 10.8))
                shape.addCurve(to: CGPoint(x: 14.5, y: 8.5), controlPoint1: CGPoint(x: 13, y: 9.2), controlPoint2: CGPoint(x: 13.7, y: 8.5))
                shape.addCurve(to: CGPoint(x: 16, y: 10), controlPoint1: CGPoint(x: 15.3, y: 8.5), controlPoint2: CGPoint(x: 16, y: 9.2))
                shape.addCurve(to: CGPoint(x: 14.5, y: 11.5), controlPoint1: CGPoint(x: 16, y: 10.8), controlPoint2: CGPoint(x: 15.3, y: 11.5))
                shape.addLine(to: CGPoint(x: 14.5, y: 11.5))
                shape.close()
                shape.move(to: CGPoint(x: 14.5, y: 11.5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsdropdown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 5), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 10, height: 5), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 10, y: resizedFrame.height / 5)
        context.translateBy(x: -1065, y: -301)
        
        /// gridicons-dropdown
        do {
            context.saveGState()
            context.translateBy(x: 1065, y: 301)
            
            /// dropdown
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 5, y: 5))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.close()
                shape.move(to: CGPoint.zero)
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsdomains(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1035, y: -301)
        
        /// gridicons-domains
        do {
            context.saveGState()
            context.translateBy(x: 1035, y: 301)
            
            /// domains
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 16.92, y: 6))
                shape.addLine(to: CGPoint(x: 13.7, y: 6))
                shape.addCurve(to: CGPoint(x: 13.14, y: 2.64), controlPoint1: CGPoint(x: 13.52, y: 4.58), controlPoint2: CGPoint(x: 13.28, y: 3.35))
                shape.addCurve(to: CGPoint(x: 16.92, y: 6), controlPoint1: CGPoint(x: 14.73, y: 3.32), controlPoint2: CGPoint(x: 16.05, y: 4.51))
                shape.addLine(to: CGPoint(x: 16.92, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 11.01, y: 2.07))
                shape.addCurve(to: CGPoint(x: 11.66, y: 6), controlPoint1: CGPoint(x: 11.08, y: 2.42), controlPoint2: CGPoint(x: 11.4, y: 4.11))
                shape.addLine(to: CGPoint(x: 8.34, y: 6))
                shape.addCurve(to: CGPoint(x: 8.99, y: 2.07), controlPoint1: CGPoint(x: 8.6, y: 4.11), controlPoint2: CGPoint(x: 8.92, y: 2.42))
                shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 9.32, y: 2.03), controlPoint2: CGPoint(x: 9.66, y: 2))
                shape.addCurve(to: CGPoint(x: 11.01, y: 2.07), controlPoint1: CGPoint(x: 10.34, y: 2), controlPoint2: CGPoint(x: 10.68, y: 2.03))
                shape.addLine(to: CGPoint(x: 11.01, y: 2.07))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 10))
                shape.addCurve(to: CGPoint(x: 11.89, y: 12), controlPoint1: CGPoint(x: 12, y: 10.6), controlPoint2: CGPoint(x: 11.96, y: 11.29))
                shape.addLine(to: CGPoint(x: 8.11, y: 12))
                shape.addCurve(to: CGPoint(x: 8, y: 10), controlPoint1: CGPoint(x: 8.04, y: 11.29), controlPoint2: CGPoint(x: 8, y: 10.6))
                shape.addCurve(to: CGPoint(x: 8.11, y: 8), controlPoint1: CGPoint(x: 8, y: 9.4), controlPoint2: CGPoint(x: 8.04, y: 8.71))
                shape.addLine(to: CGPoint(x: 11.89, y: 8))
                shape.addCurve(to: CGPoint(x: 12, y: 10), controlPoint1: CGPoint(x: 11.96, y: 8.71), controlPoint2: CGPoint(x: 12, y: 9.4))
                shape.addLine(to: CGPoint(x: 12, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 6.86, y: 2.64))
                shape.addCurve(to: CGPoint(x: 6.3, y: 6), controlPoint1: CGPoint(x: 6.72, y: 3.35), controlPoint2: CGPoint(x: 6.48, y: 4.58))
                shape.addLine(to: CGPoint(x: 3.08, y: 6))
                shape.addCurve(to: CGPoint(x: 6.86, y: 2.64), controlPoint1: CGPoint(x: 3.95, y: 4.51), controlPoint2: CGPoint(x: 5.27, y: 3.32))
                shape.addLine(to: CGPoint(x: 6.86, y: 2.64))
                shape.close()
                shape.move(to: CGPoint(x: 2.26, y: 8))
                shape.addLine(to: CGPoint(x: 6.08, y: 8))
                shape.addCurve(to: CGPoint(x: 6, y: 10), controlPoint1: CGPoint(x: 6.03, y: 8.67), controlPoint2: CGPoint(x: 6, y: 9.34))
                shape.addCurve(to: CGPoint(x: 6.09, y: 12), controlPoint1: CGPoint(x: 6, y: 10.66), controlPoint2: CGPoint(x: 6.03, y: 11.33))
                shape.addLine(to: CGPoint(x: 2.26, y: 12))
                shape.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 2.1, y: 11.36), controlPoint2: CGPoint(x: 2, y: 10.69))
                shape.addCurve(to: CGPoint(x: 2.26, y: 8), controlPoint1: CGPoint(x: 2, y: 9.31), controlPoint2: CGPoint(x: 2.1, y: 8.64))
                shape.addLine(to: CGPoint(x: 2.26, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 3.08, y: 14))
                shape.addLine(to: CGPoint(x: 6.3, y: 14))
                shape.addCurve(to: CGPoint(x: 6.86, y: 17.36), controlPoint1: CGPoint(x: 6.48, y: 15.42), controlPoint2: CGPoint(x: 6.72, y: 16.65))
                shape.addCurve(to: CGPoint(x: 3.08, y: 14), controlPoint1: CGPoint(x: 5.27, y: 16.68), controlPoint2: CGPoint(x: 3.95, y: 15.49))
                shape.addLine(to: CGPoint(x: 3.08, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 8.99, y: 17.93))
                shape.addCurve(to: CGPoint(x: 8.34, y: 14), controlPoint1: CGPoint(x: 8.92, y: 17.58), controlPoint2: CGPoint(x: 8.6, y: 15.89))
                shape.addLine(to: CGPoint(x: 11.66, y: 14))
                shape.addCurve(to: CGPoint(x: 11.01, y: 17.93), controlPoint1: CGPoint(x: 11.4, y: 15.89), controlPoint2: CGPoint(x: 11.08, y: 17.58))
                shape.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 10.68, y: 17.97), controlPoint2: CGPoint(x: 10.34, y: 18))
                shape.addCurve(to: CGPoint(x: 8.99, y: 17.93), controlPoint1: CGPoint(x: 9.66, y: 18), controlPoint2: CGPoint(x: 9.32, y: 17.97))
                shape.addLine(to: CGPoint(x: 8.99, y: 17.93))
                shape.close()
                shape.move(to: CGPoint(x: 13.14, y: 17.36))
                shape.addCurve(to: CGPoint(x: 13.7, y: 14), controlPoint1: CGPoint(x: 13.28, y: 16.65), controlPoint2: CGPoint(x: 13.52, y: 15.42))
                shape.addLine(to: CGPoint(x: 16.92, y: 14))
                shape.addCurve(to: CGPoint(x: 13.14, y: 17.36), controlPoint1: CGPoint(x: 16.05, y: 15.49), controlPoint2: CGPoint(x: 14.73, y: 16.68))
                shape.addLine(to: CGPoint(x: 13.14, y: 17.36))
                shape.close()
                shape.move(to: CGPoint(x: 17.74, y: 12))
                shape.addLine(to: CGPoint(x: 13.92, y: 12))
                shape.addCurve(to: CGPoint(x: 14, y: 10), controlPoint1: CGPoint(x: 13.97, y: 11.33), controlPoint2: CGPoint(x: 14, y: 10.66))
                shape.addCurve(to: CGPoint(x: 13.91, y: 8), controlPoint1: CGPoint(x: 14, y: 9.34), controlPoint2: CGPoint(x: 13.97, y: 8.67))
                shape.addLine(to: CGPoint(x: 17.74, y: 8))
                shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 17.9, y: 8.64), controlPoint2: CGPoint(x: 18, y: 9.31))
                shape.addCurve(to: CGPoint(x: 17.74, y: 12), controlPoint1: CGPoint(x: 18, y: 10.69), controlPoint2: CGPoint(x: 17.9, y: 11.36))
                shape.addLine(to: CGPoint(x: 17.74, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 17.74, y: 12))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscustomize(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1005, y: -301)
        
        /// gridicons-customize
        do {
            context.saveGState()
            context.translateBy(x: 1005, y: 301)
            
            /// customize
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 0, y: 4))
                shape.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 2.5), controlPoint2: CGPoint(x: 0.78, y: 0.92))
                shape.addCurve(to: CGPoint(x: 4, y: 2), controlPoint1: CGPoint(x: 2, y: 0.85), controlPoint2: CGPoint(x: 2.69, y: 2))
                shape.addCurve(to: CGPoint(x: 7, y: 5), controlPoint1: CGPoint(x: 5.66, y: 2), controlPoint2: CGPoint(x: 7, y: 3.34))
                shape.addCurve(to: CGPoint(x: 6.79, y: 6.09), controlPoint1: CGPoint(x: 7, y: 5.39), controlPoint2: CGPoint(x: 6.92, y: 5.75))
                shape.addCurve(to: CGPoint(x: 8.98, y: 7.9), controlPoint1: CGPoint(x: 7.53, y: 6.68), controlPoint2: CGPoint(x: 8.26, y: 7.28))
                shape.addLine(to: CGPoint(x: 6.9, y: 9.98))
                shape.addCurve(to: CGPoint(x: 5.09, y: 7.79), controlPoint1: CGPoint(x: 6.28, y: 9.26), controlPoint2: CGPoint(x: 5.68, y: 8.53))
                shape.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 4.75, y: 7.92), controlPoint2: CGPoint(x: 4.39, y: 8))
                shape.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 8), controlPoint2: CGPoint(x: 0, y: 6.21))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 12.15, y: 10.85))
                shape.addLine(to: CGPoint(x: 13.49, y: 9.51))
                shape.addCurve(to: CGPoint(x: 15.5, y: 10), controlPoint1: CGPoint(x: 14.1, y: 9.81), controlPoint2: CGPoint(x: 14.78, y: 10))
                shape.addCurve(to: CGPoint(x: 20, y: 5.5), controlPoint1: CGPoint(x: 17.99, y: 10), controlPoint2: CGPoint(x: 20, y: 7.98))
                shape.addCurve(to: CGPoint(x: 19.51, y: 3.49), controlPoint1: CGPoint(x: 20, y: 4.77), controlPoint2: CGPoint(x: 19.81, y: 4.1))
                shape.addLine(to: CGPoint(x: 16, y: 7))
                shape.addLine(to: CGPoint(x: 14, y: 5))
                shape.addLine(to: CGPoint(x: 17.51, y: 1.49))
                shape.addCurve(to: CGPoint(x: 15.5, y: 1), controlPoint1: CGPoint(x: 16.9, y: 1.19), controlPoint2: CGPoint(x: 16.23, y: 1))
                shape.addCurve(to: CGPoint(x: 11, y: 5.5), controlPoint1: CGPoint(x: 13.02, y: 1), controlPoint2: CGPoint(x: 11, y: 3.02))
                shape.addCurve(to: CGPoint(x: 11.49, y: 7.51), controlPoint1: CGPoint(x: 11, y: 6.23), controlPoint2: CGPoint(x: 11.19, y: 6.9))
                shape.addLine(to: CGPoint(x: 1, y: 18))
                shape.addLine(to: CGPoint(x: 3, y: 20))
                shape.addLine(to: CGPoint(x: 9.85, y: 13.15))
                shape.addCurve(to: CGPoint(x: 15.83, y: 18.6), controlPoint1: CGPoint(x: 11.73, y: 15.08), controlPoint2: CGPoint(x: 13.72, y: 16.91))
                shape.addLine(to: CGPoint(x: 17.25, y: 19.75))
                shape.addLine(to: CGPoint(x: 18.75, y: 18.25))
                shape.addLine(to: CGPoint(x: 17.6, y: 16.83))
                shape.addCurve(to: CGPoint(x: 12.15, y: 10.85), controlPoint1: CGPoint(x: 15.91, y: 14.72), controlPoint2: CGPoint(x: 14.08, y: 12.73))
                shape.addLine(to: CGPoint(x: 12.15, y: 10.85))
                shape.close()
                shape.move(to: CGPoint(x: 12.15, y: 10.85))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscustomposttype(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -977, y: -301)
        
        /// gridicons-custom-post-type
        do {
            context.saveGState()
            context.translateBy(x: 977, y: 301)
            
            /// custom-post-type
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 16))
                shape.addCurve(to: CGPoint(x: 2, y: 18), controlPoint1: CGPoint(x: 0, y: 17.11), controlPoint2: CGPoint(x: 0.9, y: 18))
                shape.addLine(to: CGPoint(x: 16, y: 18))
                shape.addCurve(to: CGPoint(x: 18, y: 16), controlPoint1: CGPoint(x: 17.11, y: 18), controlPoint2: CGPoint(x: 18, y: 17.11))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 18, y: 0.9), controlPoint2: CGPoint(x: 17.11, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 3, y: 3))
                shape.addLine(to: CGPoint(x: 8, y: 3))
                shape.addLine(to: CGPoint(x: 8, y: 8))
                shape.addLine(to: CGPoint(x: 3, y: 8))
                shape.addLine(to: CGPoint(x: 3, y: 3))
                shape.addLine(to: CGPoint(x: 3, y: 3))
                shape.close()
                shape.move(to: CGPoint(x: 7.5, y: 16))
                shape.addCurve(to: CGPoint(x: 5, y: 13.5), controlPoint1: CGPoint(x: 6.12, y: 16), controlPoint2: CGPoint(x: 5, y: 14.88))
                shape.addCurve(to: CGPoint(x: 7.5, y: 11), controlPoint1: CGPoint(x: 5, y: 12.12), controlPoint2: CGPoint(x: 6.12, y: 11))
                shape.addCurve(to: CGPoint(x: 10, y: 13.5), controlPoint1: CGPoint(x: 8.88, y: 11), controlPoint2: CGPoint(x: 10, y: 12.12))
                shape.addCurve(to: CGPoint(x: 7.5, y: 16), controlPoint1: CGPoint(x: 10, y: 14.88), controlPoint2: CGPoint(x: 8.88, y: 16))
                shape.addLine(to: CGPoint(x: 7.5, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 10.5, y: 10))
                shape.addLine(to: CGPoint(x: 13.5, y: 5))
                shape.addLine(to: CGPoint(x: 16.5, y: 10))
                shape.addLine(to: CGPoint(x: 10.5, y: 10))
                shape.addLine(to: CGPoint(x: 10.5, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 10.5, y: 10))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscross(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -951, y: -301)
        
        /// gridicons-cross
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 301)
            
            /// Artwork
            do {
                context.saveGState()
                
                /// plus
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 14.14, y: 15.56))
                    shape.addLine(to: CGPoint(x: 7.78, y: 9.19))
                    shape.addLine(to: CGPoint(x: 1.42, y: 15.56))
                    shape.addLine(to: CGPoint(x: 0, y: 14.14))
                    shape.addLine(to: CGPoint(x: 6.37, y: 7.78))
                    shape.addLine(to: CGPoint(x: 0, y: 1.42))
                    shape.addLine(to: CGPoint(x: 1.42, y: 0))
                    shape.addLine(to: CGPoint(x: 7.78, y: 6.37))
                    shape.addLine(to: CGPoint(x: 14.14, y: 0.01))
                    shape.addLine(to: CGPoint(x: 15.55, y: 1.42))
                    shape.addLine(to: CGPoint(x: 9.19, y: 7.78))
                    shape.addLine(to: CGPoint(x: 15.55, y: 14.14))
                    shape.addLine(to: CGPoint(x: 14.14, y: 15.56))
                    shape.close()
                    shape.move(to: CGPoint(x: 14.14, y: 15.56))
                    context.saveGState()
                    context.translateBy(x: 0.22, y: 0.22)
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscrosssmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)
        context.translateBy(x: -1315, y: -269)
        
        /// gridicons-cross-small
        do {
            context.saveGState()
            context.translateBy(x: 1315, y: 269)
            
            /// cross-small
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11.41, y: 1.41))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 5.71, y: 4.3))
                shape.addLine(to: CGPoint(x: 1.41, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 1.41))
                shape.addLine(to: CGPoint(x: 4.3, y: 5.71))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 1.41, y: 11.41))
                shape.addLine(to: CGPoint(x: 5.71, y: 7.12))
                shape.addLine(to: CGPoint(x: 10, y: 11.41))
                shape.addLine(to: CGPoint(x: 11.41, y: 10))
                shape.addLine(to: CGPoint(x: 7.12, y: 5.71))
                shape.addLine(to: CGPoint(x: 11.41, y: 1.41))
                shape.addLine(to: CGPoint(x: 11.41, y: 1.41))
                shape.close()
                shape.move(to: CGPoint(x: 11.41, y: 1.41))
                context.saveGState()
                context.translateBy(x: 0.29, y: 0.29)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscrosscircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 21)
        context.translateBy(x: -1285, y: -270)
        
        /// gridicons-cross-circle
        do {
            context.saveGState()
            context.translateBy(x: 1284, y: 269)
            
            /// cross-circle
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 17.13, y: 2.93))
                shape.addCurve(to: CGPoint(x: 2.93, y: 2.93), controlPoint1: CGPoint(x: 13.23, y: -0.98), controlPoint2: CGPoint(x: 6.83, y: -0.98))
                shape.addCurve(to: CGPoint(x: 2.93, y: 17.13), controlPoint1: CGPoint(x: -0.98, y: 6.83), controlPoint2: CGPoint(x: -0.98, y: 13.23))
                shape.addCurve(to: CGPoint(x: 17.02, y: 17.13), controlPoint1: CGPoint(x: 6.83, y: 21.03), controlPoint2: CGPoint(x: 13.13, y: 21.03))
                shape.addCurve(to: CGPoint(x: 17.13, y: 2.93), controlPoint1: CGPoint(x: 20.93, y: 13.23), controlPoint2: CGPoint(x: 21.03, y: 6.83))
                shape.addLine(to: CGPoint(x: 17.13, y: 2.93))
                shape.close()
                shape.move(to: CGPoint(x: 12.83, y: 14.23))
                shape.addLine(to: CGPoint(x: 10.03, y: 11.42))
                shape.addLine(to: CGPoint(x: 7.23, y: 14.23))
                shape.addLine(to: CGPoint(x: 5.83, y: 12.83))
                shape.addLine(to: CGPoint(x: 8.63, y: 10.03))
                shape.addLine(to: CGPoint(x: 5.83, y: 7.23))
                shape.addLine(to: CGPoint(x: 7.23, y: 5.83))
                shape.addLine(to: CGPoint(x: 10.03, y: 8.63))
                shape.addLine(to: CGPoint(x: 12.83, y: 5.83))
                shape.addLine(to: CGPoint(x: 14.23, y: 7.23))
                shape.addLine(to: CGPoint(x: 11.42, y: 10.03))
                shape.addLine(to: CGPoint(x: 14.23, y: 12.83))
                shape.addLine(to: CGPoint(x: 12.83, y: 14.23))
                shape.addLine(to: CGPoint(x: 12.83, y: 14.23))
                shape.close()
                shape.move(to: CGPoint(x: 12.83, y: 14.23))
                context.saveGState()
                context.translateBy(x: 0.98, y: 0.98)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscrop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1254, y: -269)
        
        /// gridicons-crop
        do {
            context.saveGState()
            context.translateBy(x: 1254, y: 269)
            
            /// crop
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 20, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.addCurve(to: CGPoint(x: 14, y: 4), controlPoint1: CGPoint(x: 16, y: 4.89), controlPoint2: CGPoint(x: 15.11, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 4, y: 6))
                shape.addLine(to: CGPoint(x: 4, y: 14))
                shape.addCurve(to: CGPoint(x: 6, y: 16), controlPoint1: CGPoint(x: 4, y: 15.11), controlPoint2: CGPoint(x: 4.89, y: 16))
                shape.addLine(to: CGPoint(x: 14, y: 16))
                shape.addLine(to: CGPoint(x: 14, y: 20))
                shape.addLine(to: CGPoint(x: 16, y: 20))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 20, y: 16))
                shape.addLine(to: CGPoint(x: 20, y: 14))
                shape.addLine(to: CGPoint(x: 20, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 14))
                shape.addLine(to: CGPoint(x: 6, y: 6))
                shape.addLine(to: CGPoint(x: 14, y: 6))
                shape.addLine(to: CGPoint(x: 14, y: 14))
                shape.addLine(to: CGPoint(x: 6, y: 14))
                shape.addLine(to: CGPoint(x: 6, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 14))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscreditcard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 16)
        context.translateBy(x: -1224, y: -269)
        
        /// gridicons-credit-card
        do {
            context.saveGState()
            context.translateBy(x: 1224, y: 269)
            
            /// credit-card
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addCurve(to: CGPoint(x: 2, y: 16), controlPoint1: CGPoint(x: 0, y: 15.11), controlPoint2: CGPoint(x: 0.9, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 19.11, y: 16), controlPoint2: CGPoint(x: 20, y: 15.11))
                shape.addLine(to: CGPoint(x: 20, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 20, y: 0.9), controlPoint2: CGPoint(x: 19.11, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 14))
                shape.addLine(to: CGPoint(x: 2, y: 8))
                shape.addLine(to: CGPoint(x: 18, y: 8))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 2, y: 14))
                shape.addLine(to: CGPoint(x: 2, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 4, y: 10))
                shape.addLine(to: CGPoint(x: 11, y: 10))
                shape.addLine(to: CGPoint(x: 11, y: 12))
                shape.addLine(to: CGPoint(x: 4, y: 12))
                shape.addLine(to: CGPoint(x: 4, y: 10))
                shape.addLine(to: CGPoint(x: 4, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 13, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 12))
                shape.addLine(to: CGPoint(x: 13, y: 12))
                shape.addLine(to: CGPoint(x: 13, y: 10))
                shape.addLine(to: CGPoint(x: 13, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 13, y: 10))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscreate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -1196, y: -269)
        
        /// gridicons-create
        do {
            context.saveGState()
            context.translateBy(x: 1196, y: 269)
            
            /// create
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 8))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addCurve(to: CGPoint(x: 16, y: 18), controlPoint1: CGPoint(x: 18, y: 17.11), controlPoint2: CGPoint(x: 17.11, y: 18))
                shape.addLine(to: CGPoint(x: 2, y: 18))
                shape.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 0.9, y: 18), controlPoint2: CGPoint(x: 0, y: 17.11))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.addLine(to: CGPoint(x: 18, y: 8))
                shape.addLine(to: CGPoint(x: 18, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 4, y: 14))
                shape.addLine(to: CGPoint(x: 7, y: 14))
                shape.addLine(to: CGPoint(x: 14.5, y: 6.5))
                shape.addLine(to: CGPoint(x: 11.5, y: 3.5))
                shape.addLine(to: CGPoint(x: 4, y: 11))
                shape.addLine(to: CGPoint(x: 4, y: 14))
                shape.addLine(to: CGPoint(x: 4, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 13.94, y: 1.06))
                shape.addLine(to: CGPoint(x: 12.5, y: 2.5))
                shape.addLine(to: CGPoint(x: 15.5, y: 5.5))
                shape.addLine(to: CGPoint(x: 16.94, y: 4.06))
                shape.addCurve(to: CGPoint(x: 16.94, y: 1.94), controlPoint1: CGPoint(x: 17.52, y: 3.48), controlPoint2: CGPoint(x: 17.52, y: 2.53))
                shape.addLine(to: CGPoint(x: 16.06, y: 1.06))
                shape.addCurve(to: CGPoint(x: 13.94, y: 1.06), controlPoint1: CGPoint(x: 15.48, y: 0.48), controlPoint2: CGPoint(x: 14.53, y: 0.48))
                shape.addLine(to: CGPoint(x: 13.94, y: 1.06))
                shape.close()
                shape.move(to: CGPoint(x: 13.94, y: 1.06))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscoupon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        context.translateBy(x: -1165, y: -269)
        
        /// gridicons-coupon
        do {
            context.saveGState()
            context.translateBy(x: 1165, y: 269)
            
            /// coupon
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 11, y: 14))
                shape.addLine(to: CGPoint(x: 11, y: 16))
                shape.addLine(to: CGPoint(x: 9, y: 16))
                shape.addLine(to: CGPoint(x: 9, y: 14))
                shape.addLine(to: CGPoint(x: 11, y: 14))
                shape.addLine(to: CGPoint(x: 11, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 11))
                shape.addLine(to: CGPoint(x: 16, y: 11))
                shape.addLine(to: CGPoint(x: 16, y: 9))
                shape.addLine(to: CGPoint(x: 14, y: 9))
                shape.addLine(to: CGPoint(x: 14, y: 11))
                shape.addLine(to: CGPoint(x: 14, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 19))
                shape.addLine(to: CGPoint(x: 14, y: 19))
                shape.addLine(to: CGPoint(x: 14, y: 21))
                shape.addLine(to: CGPoint(x: 16, y: 21))
                shape.addLine(to: CGPoint(x: 16, y: 19))
                shape.addLine(to: CGPoint(x: 16, y: 19))
                shape.close()
                shape.move(to: CGPoint(x: 19, y: 14))
                shape.addLine(to: CGPoint(x: 19, y: 16))
                shape.addLine(to: CGPoint(x: 21, y: 16))
                shape.addLine(to: CGPoint(x: 21, y: 14))
                shape.addLine(to: CGPoint(x: 19, y: 14))
                shape.addLine(to: CGPoint(x: 19, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 11))
                shape.addCurve(to: CGPoint(x: 19, y: 12), controlPoint1: CGPoint(x: 18.55, y: 11), controlPoint2: CGPoint(x: 19, y: 11.45))
                shape.addLine(to: CGPoint(x: 21, y: 12))
                shape.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 21, y: 10.34), controlPoint2: CGPoint(x: 19.66, y: 9))
                shape.addLine(to: CGPoint(x: 18, y: 11))
                shape.addLine(to: CGPoint(x: 18, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 19, y: 18))
                shape.addCurve(to: CGPoint(x: 18, y: 19), controlPoint1: CGPoint(x: 19, y: 18.55), controlPoint2: CGPoint(x: 18.55, y: 19))
                shape.addLine(to: CGPoint(x: 18, y: 21))
                shape.addCurve(to: CGPoint(x: 21, y: 18), controlPoint1: CGPoint(x: 19.66, y: 21), controlPoint2: CGPoint(x: 21, y: 19.66))
                shape.addLine(to: CGPoint(x: 19, y: 18))
                shape.addLine(to: CGPoint(x: 19, y: 18))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 19))
                shape.addCurve(to: CGPoint(x: 11, y: 18), controlPoint1: CGPoint(x: 11.45, y: 19), controlPoint2: CGPoint(x: 11, y: 18.55))
                shape.addLine(to: CGPoint(x: 9, y: 18))
                shape.addCurve(to: CGPoint(x: 12, y: 21), controlPoint1: CGPoint(x: 9, y: 19.66), controlPoint2: CGPoint(x: 10.34, y: 21))
                shape.addLine(to: CGPoint(x: 12, y: 19))
                shape.addLine(to: CGPoint(x: 12, y: 19))
                shape.close()
                shape.move(to: CGPoint(x: 15.21, y: 13.79))
                shape.addCurve(to: CGPoint(x: 12.38, y: 13.79), controlPoint1: CGPoint(x: 14.43, y: 14.57), controlPoint2: CGPoint(x: 13.16, y: 14.57))
                shape.addLine(to: CGPoint(x: 12.38, y: 13.79))
                shape.addLine(to: CGPoint(x: 8, y: 9.41))
                shape.addLine(to: CGPoint(x: 6.57, y: 10.85))
                shape.addCurve(to: CGPoint(x: 7, y: 12.5), controlPoint1: CGPoint(x: 6.85, y: 11.36), controlPoint2: CGPoint(x: 7, y: 11.92))
                shape.addCurve(to: CGPoint(x: 3.5, y: 16), controlPoint1: CGPoint(x: 7, y: 14.43), controlPoint2: CGPoint(x: 5.43, y: 16))
                shape.addCurve(to: CGPoint(x: 0, y: 12.5), controlPoint1: CGPoint(x: 1.57, y: 16), controlPoint2: CGPoint(x: 0, y: 14.43))
                shape.addCurve(to: CGPoint(x: 3.5, y: 9), controlPoint1: CGPoint(x: 0, y: 10.57), controlPoint2: CGPoint(x: 1.57, y: 9))
                shape.addCurve(to: CGPoint(x: 5.15, y: 9.43), controlPoint1: CGPoint(x: 4.08, y: 9), controlPoint2: CGPoint(x: 4.64, y: 9.15))
                shape.addLine(to: CGPoint(x: 6.59, y: 8))
                shape.addLine(to: CGPoint(x: 5.15, y: 6.57))
                shape.addCurve(to: CGPoint(x: 3.5, y: 7), controlPoint1: CGPoint(x: 4.64, y: 6.85), controlPoint2: CGPoint(x: 4.08, y: 7))
                shape.addCurve(to: CGPoint(x: 0, y: 3.5), controlPoint1: CGPoint(x: 1.57, y: 7), controlPoint2: CGPoint(x: 0, y: 5.43))
                shape.addCurve(to: CGPoint(x: 3.5, y: 0), controlPoint1: CGPoint(x: 0, y: 1.57), controlPoint2: CGPoint(x: 1.57, y: 0))
                shape.addCurve(to: CGPoint(x: 7, y: 3.5), controlPoint1: CGPoint(x: 5.43, y: 0), controlPoint2: CGPoint(x: 7, y: 1.57))
                shape.addCurve(to: CGPoint(x: 6.57, y: 5.15), controlPoint1: CGPoint(x: 7, y: 4.08), controlPoint2: CGPoint(x: 6.85, y: 4.64))
                shape.addLine(to: CGPoint(x: 8, y: 6.59))
                shape.addLine(to: CGPoint(x: 11.88, y: 2.71))
                shape.addCurve(to: CGPoint(x: 14.71, y: 2.71), controlPoint1: CGPoint(x: 12.66, y: 1.93), controlPoint2: CGPoint(x: 13.93, y: 1.93))
                shape.addCurve(to: CGPoint(x: 14.71, y: 2.71), controlPoint1: CGPoint(x: 14.71, y: 2.71), controlPoint2: CGPoint(x: 14.71, y: 2.71))
                shape.addLine(to: CGPoint(x: 9.41, y: 8))
                shape.addLine(to: CGPoint(x: 15.21, y: 13.79))
                shape.addLine(to: CGPoint(x: 15.21, y: 13.79))
                shape.close()
                shape.move(to: CGPoint(x: 3.5, y: 5))
                shape.addCurve(to: CGPoint(x: 5, y: 3.5), controlPoint1: CGPoint(x: 4.33, y: 5), controlPoint2: CGPoint(x: 5, y: 4.33))
                shape.addCurve(to: CGPoint(x: 3.5, y: 2), controlPoint1: CGPoint(x: 5, y: 2.67), controlPoint2: CGPoint(x: 4.33, y: 2))
                shape.addCurve(to: CGPoint(x: 2, y: 3.5), controlPoint1: CGPoint(x: 2.67, y: 2), controlPoint2: CGPoint(x: 2, y: 2.67))
                shape.addCurve(to: CGPoint(x: 3.5, y: 5), controlPoint1: CGPoint(x: 2, y: 4.33), controlPoint2: CGPoint(x: 2.67, y: 5))
                shape.addLine(to: CGPoint(x: 3.5, y: 5))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 12.5))
                shape.addCurve(to: CGPoint(x: 3.5, y: 11), controlPoint1: CGPoint(x: 5, y: 11.67), controlPoint2: CGPoint(x: 4.33, y: 11))
                shape.addCurve(to: CGPoint(x: 2, y: 12.5), controlPoint1: CGPoint(x: 2.67, y: 11), controlPoint2: CGPoint(x: 2, y: 11.67))
                shape.addCurve(to: CGPoint(x: 3.5, y: 14), controlPoint1: CGPoint(x: 2, y: 13.33), controlPoint2: CGPoint(x: 2.67, y: 14))
                shape.addCurve(to: CGPoint(x: 5, y: 12.5), controlPoint1: CGPoint(x: 4.33, y: 14), controlPoint2: CGPoint(x: 5, y: 13.33))
                shape.addLine(to: CGPoint(x: 5, y: 12.5))
                shape.addLine(to: CGPoint(x: 5, y: 12.5))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 12.5))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscomputer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1135, y: -269)
        
        /// gridicons-computer
        do {
            context.saveGState()
            context.translateBy(x: 1135, y: 269)
            
            /// computer
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addCurve(to: CGPoint(x: 2, y: 16), controlPoint1: CGPoint(x: 0, y: 15.1), controlPoint2: CGPoint(x: 0.9, y: 16))
                shape.addLine(to: CGPoint(x: 8, y: 16))
                shape.addLine(to: CGPoint(x: 8, y: 18))
                shape.addLine(to: CGPoint(x: 5, y: 18))
                shape.addLine(to: CGPoint(x: 5, y: 20))
                shape.addLine(to: CGPoint(x: 15, y: 20))
                shape.addLine(to: CGPoint(x: 15, y: 18))
                shape.addLine(to: CGPoint(x: 12, y: 18))
                shape.addLine(to: CGPoint(x: 12, y: 16))
                shape.addLine(to: CGPoint(x: 18, y: 16))
                shape.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 19.1, y: 16), controlPoint2: CGPoint(x: 20, y: 15.1))
                shape.addLine(to: CGPoint(x: 20, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 20, y: 0.9), controlPoint2: CGPoint(x: 19.1, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 2, y: 14))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 14))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscomment(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -1107, y: -269)
        
        /// gridicons-comment
        do {
            context.saveGState()
            context.translateBy(x: 1107, y: 269)
            
            /// comment
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 0, y: 2))
                shape.addLine(to: CGPoint(x: 0, y: 11))
                shape.addCurve(to: CGPoint(x: 2, y: 13), controlPoint1: CGPoint(x: 0, y: 12.11), controlPoint2: CGPoint(x: 0.9, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 18))
                shape.addLine(to: CGPoint(x: 16.33, y: 14.2))
                shape.addCurve(to: CGPoint(x: 18, y: 10.94), controlPoint1: CGPoint(x: 17.38, y: 13.45), controlPoint2: CGPoint(x: 18, y: 12.23))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 18, y: 0.9), controlPoint2: CGPoint(x: 17.11, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 2))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscog(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1077, y: -269)
        
        /// gridicons-cog
        do {
            context.saveGState()
            context.translateBy(x: 1077, y: 269)
            
            /// cog
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 17.66, y: 10))
                shape.addCurve(to: CGPoint(x: 17.49, y: 8.34), controlPoint1: CGPoint(x: 17.66, y: 9.43), controlPoint2: CGPoint(x: 17.6, y: 8.88))
                shape.addLine(to: CGPoint(x: 19.32, y: 6.73))
                shape.addLine(to: CGPoint(x: 17.32, y: 3.27))
                shape.addLine(to: CGPoint(x: 15, y: 4.05))
                shape.addCurve(to: CGPoint(x: 12.14, y: 2.4), controlPoint1: CGPoint(x: 14.18, y: 3.32), controlPoint2: CGPoint(x: 13.21, y: 2.75))
                shape.addLine(to: CGPoint(x: 11.66, y: 0))
                shape.addLine(to: CGPoint(x: 7.66, y: 0))
                shape.addLine(to: CGPoint(x: 7.18, y: 2.4))
                shape.addCurve(to: CGPoint(x: 4.32, y: 4.05), controlPoint1: CGPoint(x: 6.11, y: 2.75), controlPoint2: CGPoint(x: 5.14, y: 3.32))
                shape.addLine(to: CGPoint(x: 2, y: 3.27))
                shape.addLine(to: CGPoint(x: 0, y: 6.73))
                shape.addLine(to: CGPoint(x: 1.83, y: 8.34))
                shape.addCurve(to: CGPoint(x: 1.66, y: 10), controlPoint1: CGPoint(x: 1.72, y: 8.88), controlPoint2: CGPoint(x: 1.66, y: 9.43))
                shape.addCurve(to: CGPoint(x: 1.83, y: 11.66), controlPoint1: CGPoint(x: 1.66, y: 10.57), controlPoint2: CGPoint(x: 1.72, y: 11.12))
                shape.addLine(to: CGPoint(x: 0, y: 13.27))
                shape.addLine(to: CGPoint(x: 2, y: 16.73))
                shape.addLine(to: CGPoint(x: 4.32, y: 15.95))
                shape.addCurve(to: CGPoint(x: 7.18, y: 17.6), controlPoint1: CGPoint(x: 5.14, y: 16.68), controlPoint2: CGPoint(x: 6.11, y: 17.25))
                shape.addLine(to: CGPoint(x: 7.66, y: 20))
                shape.addLine(to: CGPoint(x: 11.66, y: 20))
                shape.addLine(to: CGPoint(x: 12.14, y: 17.6))
                shape.addCurve(to: CGPoint(x: 15, y: 15.95), controlPoint1: CGPoint(x: 13.21, y: 17.25), controlPoint2: CGPoint(x: 14.18, y: 16.68))
                shape.addLine(to: CGPoint(x: 17.32, y: 16.73))
                shape.addLine(to: CGPoint(x: 19.32, y: 13.27))
                shape.addLine(to: CGPoint(x: 17.49, y: 11.66))
                shape.addCurve(to: CGPoint(x: 17.66, y: 10), controlPoint1: CGPoint(x: 17.6, y: 11.12), controlPoint2: CGPoint(x: 17.66, y: 10.57))
                shape.addLine(to: CGPoint(x: 17.66, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 9.66, y: 14))
                shape.addCurve(to: CGPoint(x: 5.66, y: 10), controlPoint1: CGPoint(x: 7.45, y: 14), controlPoint2: CGPoint(x: 5.66, y: 12.21))
                shape.addCurve(to: CGPoint(x: 9.66, y: 6), controlPoint1: CGPoint(x: 5.66, y: 7.79), controlPoint2: CGPoint(x: 7.45, y: 6))
                shape.addCurve(to: CGPoint(x: 13.66, y: 10), controlPoint1: CGPoint(x: 11.87, y: 6), controlPoint2: CGPoint(x: 13.66, y: 7.79))
                shape.addCurve(to: CGPoint(x: 9.66, y: 14), controlPoint1: CGPoint(x: 13.66, y: 12.21), controlPoint2: CGPoint(x: 11.87, y: 14))
                shape.addLine(to: CGPoint(x: 9.66, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 9.66, y: 14))
                context.saveGState()
                context.translateBy(x: 0.34, y: 0)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscode(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 20)
        context.translateBy(x: -1, y: -2)

        /// gridicons-code
        do {
            context.saveGState()

            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 22, y: 9.92))
            shape.addLine(to: CGPoint(x: 16.55, y: 16.42))
            shape.addLine(to: CGPoint(x: 15, y: 15.13))
            shape.addLine(to: CGPoint(x: 19.39, y: 9.92))
            shape.addLine(to: CGPoint(x: 15, y: 4.71))
            shape.addLine(to: CGPoint(x: 16.55, y: 3.42))
            shape.addLine(to: CGPoint(x: 22, y: 9.92))
            shape.close()
            shape.move(to: CGPoint(x: 7, y: 4.71))
            shape.addLine(to: CGPoint(x: 5.45, y: 3.42))
            shape.addLine(to: CGPoint(x: 0, y: 9.92))
            shape.addLine(to: CGPoint(x: 5.45, y: 16.42))
            shape.addLine(to: CGPoint(x: 7, y: 15.13))
            shape.addLine(to: CGPoint(x: 2.61, y: 9.92))
            shape.addLine(to: CGPoint(x: 7, y: 4.71))
            shape.close()
            shape.move(to: CGPoint(x: 7.45, y: 19.32))
            shape.addLine(to: CGPoint(x: 9.38, y: 19.84))
            shape.addLine(to: CGPoint(x: 14.55, y: 0.52))
            shape.addLine(to: CGPoint(x: 12.62, y: 0))
            shape.addLine(to: CGPoint(x: 7.45, y: 19.32))
            shape.close()
            shape.move(to: CGPoint(x: 7.45, y: 19.32))
            context.saveGState()
            context.translateBy(x: 1, y: 2.08)
            UIColor.black.setFill()
            shape.fill()
            context.restoreGState()

            context.restoreGState()
        }

        context.restoreGState()
    }
    
    class func drawGridiconscloud(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 15)
        context.translateBy(x: -1015, y: -269)
        
        /// gridicons-cloud
        do {
            context.saveGState()
            context.translateBy(x: 1015, y: 269)
            
            /// cloud
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 17, y: 6))
                shape.addCurve(to: CGPoint(x: 16.98, y: 6), controlPoint1: CGPoint(x: 16.99, y: 6), controlPoint2: CGPoint(x: 16.98, y: 6))
                shape.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 16.72, y: 2.65), controlPoint2: CGPoint(x: 13.92, y: 0))
                shape.addCurve(to: CGPoint(x: 4, y: 6.5), controlPoint1: CGPoint(x: 6.91, y: 0), controlPoint2: CGPoint(x: 4, y: 2.91))
                shape.addCurve(to: CGPoint(x: 4.19, y: 8.02), controlPoint1: CGPoint(x: 4, y: 7.02), controlPoint2: CGPoint(x: 4.07, y: 7.53))
                shape.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 4.12, y: 8.02), controlPoint2: CGPoint(x: 4.06, y: 8))
                shape.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 1.79, y: 8), controlPoint2: CGPoint(x: 0, y: 9.79))
                shape.addCurve(to: CGPoint(x: 1.38, y: 15), controlPoint1: CGPoint(x: 0, y: 13.2), controlPoint2: CGPoint(x: 0.54, y: 14.27))
                shape.addLine(to: CGPoint(x: 19.97, y: 15))
                shape.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 21.2, y: 14.09), controlPoint2: CGPoint(x: 22, y: 12.64))
                shape.addCurve(to: CGPoint(x: 17, y: 6), controlPoint1: CGPoint(x: 22, y: 8.24), controlPoint2: CGPoint(x: 19.76, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 17, y: 6))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscloudupload(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 15)
        context.translateBy(x: -983, y: -269)
        
        /// gridicons-cloud-upload
        do {
            context.saveGState()
            context.translateBy(x: 983, y: 269)
            
            /// cloud-upload
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 17, y: 6))
                shape.addCurve(to: CGPoint(x: 16.98, y: 6), controlPoint1: CGPoint(x: 16.99, y: 6), controlPoint2: CGPoint(x: 16.98, y: 6))
                shape.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 16.72, y: 2.65), controlPoint2: CGPoint(x: 13.92, y: 0))
                shape.addCurve(to: CGPoint(x: 4, y: 6.5), controlPoint1: CGPoint(x: 6.91, y: 0), controlPoint2: CGPoint(x: 4, y: 2.91))
                shape.addCurve(to: CGPoint(x: 4.19, y: 8.02), controlPoint1: CGPoint(x: 4, y: 7.02), controlPoint2: CGPoint(x: 4.07, y: 7.53))
                shape.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 4.12, y: 8.02), controlPoint2: CGPoint(x: 4.06, y: 8))
                shape.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 1.79, y: 8), controlPoint2: CGPoint(x: 0, y: 9.79))
                shape.addCurve(to: CGPoint(x: 1.38, y: 15), controlPoint1: CGPoint(x: 0, y: 13.2), controlPoint2: CGPoint(x: 0.54, y: 14.27))
                shape.addLine(to: CGPoint(x: 19.97, y: 15))
                shape.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 21.2, y: 14.09), controlPoint2: CGPoint(x: 22, y: 12.64))
                shape.addCurve(to: CGPoint(x: 17, y: 6), controlPoint1: CGPoint(x: 22, y: 8.24), controlPoint2: CGPoint(x: 19.76, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 10))
                shape.addLine(to: CGPoint(x: 12, y: 13))
                shape.addLine(to: CGPoint(x: 10, y: 13))
                shape.addLine(to: CGPoint(x: 10, y: 10))
                shape.addLine(to: CGPoint(x: 7, y: 10))
                shape.addLine(to: CGPoint(x: 11, y: 5))
                shape.addLine(to: CGPoint(x: 15, y: 10))
                shape.addLine(to: CGPoint(x: 12, y: 10))
                shape.addLine(to: CGPoint(x: 12, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 10))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscloudoutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 15)
        context.translateBy(x: -951, y: -269)
        
        /// gridicons-cloud-outline
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 269)
            
            /// cloud-outline
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10.5, y: 2))
                shape.addCurve(to: CGPoint(x: 14.98, y: 6.15), controlPoint1: CGPoint(x: 12.84, y: 2), controlPoint2: CGPoint(x: 14.8, y: 3.82))
                shape.addLine(to: CGPoint(x: 15.12, y: 8.02))
                shape.addLine(to: CGPoint(x: 16.99, y: 8))
                shape.addLine(to: CGPoint(x: 17.08, y: 8))
                shape.addCurve(to: CGPoint(x: 20, y: 11), controlPoint1: CGPoint(x: 18.7, y: 8.04), controlPoint2: CGPoint(x: 20, y: 9.37))
                shape.addCurve(to: CGPoint(x: 19.22, y: 13), controlPoint1: CGPoint(x: 20, y: 11.75), controlPoint2: CGPoint(x: 19.72, y: 12.45))
                shape.addLine(to: CGPoint(x: 2.28, y: 13))
                shape.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 2.12, y: 12.74), controlPoint2: CGPoint(x: 2, y: 12.41))
                shape.addCurve(to: CGPoint(x: 3.92, y: 10), controlPoint1: CGPoint(x: 2, y: 10.93), controlPoint2: CGPoint(x: 2.85, y: 10.05))
                shape.addCurve(to: CGPoint(x: 4.09, y: 10.02), controlPoint1: CGPoint(x: 3.97, y: 10.01), controlPoint2: CGPoint(x: 4.03, y: 10.01))
                shape.addLine(to: CGPoint(x: 6.75, y: 10.14))
                shape.addLine(to: CGPoint(x: 6.13, y: 7.55))
                shape.addCurve(to: CGPoint(x: 6, y: 6.5), controlPoint1: CGPoint(x: 6.04, y: 7.19), controlPoint2: CGPoint(x: 6, y: 6.84))
                shape.addCurve(to: CGPoint(x: 10.5, y: 2), controlPoint1: CGPoint(x: 6, y: 4.02), controlPoint2: CGPoint(x: 8.02, y: 2))
                shape.addLine(to: CGPoint(x: 10.5, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 10.5, y: 0))
                shape.addCurve(to: CGPoint(x: 4, y: 6.5), controlPoint1: CGPoint(x: 6.91, y: 0), controlPoint2: CGPoint(x: 4, y: 2.91))
                shape.addCurve(to: CGPoint(x: 4.19, y: 8.02), controlPoint1: CGPoint(x: 4, y: 7.02), controlPoint2: CGPoint(x: 4.07, y: 7.53))
                shape.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 4.12, y: 8.02), controlPoint2: CGPoint(x: 4.06, y: 8))
                shape.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 1.79, y: 8), controlPoint2: CGPoint(x: 0, y: 9.79))
                shape.addCurve(to: CGPoint(x: 1.38, y: 15), controlPoint1: CGPoint(x: 0, y: 13.2), controlPoint2: CGPoint(x: 0.54, y: 14.27))
                shape.addLine(to: CGPoint(x: 19.97, y: 15))
                shape.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 21.2, y: 14.09), controlPoint2: CGPoint(x: 22, y: 12.64))
                shape.addCurve(to: CGPoint(x: 17, y: 6), controlPoint1: CGPoint(x: 22, y: 8.24), controlPoint2: CGPoint(x: 19.76, y: 6))
                shape.addCurve(to: CGPoint(x: 16.98, y: 6), controlPoint1: CGPoint(x: 16.99, y: 6), controlPoint2: CGPoint(x: 16.98, y: 6))
                shape.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 16.72, y: 2.65), controlPoint2: CGPoint(x: 13.92, y: 0))
                shape.addLine(to: CGPoint(x: 10.5, y: 0))
                shape.addLine(to: CGPoint(x: 10.5, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 10.5, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsclouddownload(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 15)
        context.translateBy(x: -1277, y: -239)
        
        /// gridicons-cloud-download
        do {
            context.saveGState()
            context.translateBy(x: 1277, y: 239)
            
            /// cloud-download
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 17, y: 6))
                shape.addCurve(to: CGPoint(x: 16.98, y: 6), controlPoint1: CGPoint(x: 16.99, y: 6), controlPoint2: CGPoint(x: 16.98, y: 6))
                shape.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 16.72, y: 2.65), controlPoint2: CGPoint(x: 13.92, y: 0))
                shape.addCurve(to: CGPoint(x: 4, y: 6.5), controlPoint1: CGPoint(x: 6.91, y: 0), controlPoint2: CGPoint(x: 4, y: 2.91))
                shape.addCurve(to: CGPoint(x: 4.19, y: 8.02), controlPoint1: CGPoint(x: 4, y: 7.02), controlPoint2: CGPoint(x: 4.07, y: 7.53))
                shape.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 4.12, y: 8.02), controlPoint2: CGPoint(x: 4.06, y: 8))
                shape.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 1.79, y: 8), controlPoint2: CGPoint(x: 0, y: 9.79))
                shape.addCurve(to: CGPoint(x: 1.38, y: 15), controlPoint1: CGPoint(x: 0, y: 13.2), controlPoint2: CGPoint(x: 0.54, y: 14.27))
                shape.addLine(to: CGPoint(x: 19.97, y: 15))
                shape.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 21.2, y: 14.09), controlPoint2: CGPoint(x: 22, y: 12.64))
                shape.addCurve(to: CGPoint(x: 17, y: 6), controlPoint1: CGPoint(x: 22, y: 8.24), controlPoint2: CGPoint(x: 19.76, y: 6))
                shape.addLine(to: CGPoint(x: 17, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 13))
                shape.addLine(to: CGPoint(x: 7, y: 8))
                shape.addLine(to: CGPoint(x: 10, y: 8))
                shape.addLine(to: CGPoint(x: 10, y: 5))
                shape.addLine(to: CGPoint(x: 12, y: 5))
                shape.addLine(to: CGPoint(x: 12, y: 8))
                shape.addLine(to: CGPoint(x: 15, y: 8))
                shape.addLine(to: CGPoint(x: 11, y: 13))
                shape.addLine(to: CGPoint(x: 11, y: 13))
                shape.close()
                shape.move(to: CGPoint(x: 11, y: 13))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsclipboard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 20)
        context.translateBy(x: -1251, y: -239)
        
        /// gridicons-clipboard
        do {
            context.saveGState()
            context.translateBy(x: 1251, y: 239)
            
            /// clipboard
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 12, y: 16))
                shape.addLine(to: CGPoint(x: 4, y: 16))
                shape.addLine(to: CGPoint(x: 4, y: 14))
                shape.addLine(to: CGPoint(x: 12, y: 14))
                shape.addLine(to: CGPoint(x: 12, y: 16))
                shape.addLine(to: CGPoint(x: 12, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 10))
                shape.addLine(to: CGPoint(x: 4, y: 10))
                shape.addLine(to: CGPoint(x: 4, y: 12))
                shape.addLine(to: CGPoint(x: 12, y: 12))
                shape.addLine(to: CGPoint(x: 12, y: 10))
                shape.addLine(to: CGPoint(x: 12, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 1))
                shape.addLine(to: CGPoint(x: 12, y: 1))
                shape.addLine(to: CGPoint(x: 12, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 18))
                shape.addLine(to: CGPoint(x: 2, y: 18))
                shape.addLine(to: CGPoint(x: 2, y: 3))
                shape.addLine(to: CGPoint(x: 4, y: 3))
                shape.addLine(to: CGPoint(x: 4, y: 1))
                shape.addLine(to: CGPoint(x: 2, y: 1))
                shape.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: 0.9, y: 1), controlPoint2: CGPoint(x: 0, y: 1.9))
                shape.addLine(to: CGPoint(x: 0, y: 18))
                shape.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.11), controlPoint2: CGPoint(x: 0.9, y: 20))
                shape.addLine(to: CGPoint(x: 14, y: 20))
                shape.addCurve(to: CGPoint(x: 16, y: 18), controlPoint1: CGPoint(x: 15.11, y: 20), controlPoint2: CGPoint(x: 16, y: 19.11))
                shape.addLine(to: CGPoint(x: 16, y: 3))
                shape.addCurve(to: CGPoint(x: 14, y: 1), controlPoint1: CGPoint(x: 16, y: 1.9), controlPoint2: CGPoint(x: 15.11, y: 1))
                shape.addLine(to: CGPoint(x: 14, y: 1))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 3))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 10, y: 0.9), controlPoint2: CGPoint(x: 9.11, y: 0))
                shape.addCurve(to: CGPoint(x: 6, y: 2), controlPoint1: CGPoint(x: 6.89, y: 0), controlPoint2: CGPoint(x: 6, y: 0.9))
                shape.addLine(to: CGPoint(x: 6, y: 3))
                shape.addCurve(to: CGPoint(x: 4, y: 5), controlPoint1: CGPoint(x: 4.89, y: 3), controlPoint2: CGPoint(x: 4, y: 3.9))
                shape.addLine(to: CGPoint(x: 4, y: 6))
                shape.addLine(to: CGPoint(x: 12, y: 6))
                shape.addLine(to: CGPoint(x: 12, y: 5))
                shape.addCurve(to: CGPoint(x: 10, y: 3), controlPoint1: CGPoint(x: 12, y: 3.9), controlPoint2: CGPoint(x: 11.11, y: 3))
                shape.addLine(to: CGPoint(x: 10, y: 3))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 3))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsclearformatting(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 19)
        context.translateBy(x: -1222, y: -239)
        
        /// gridicons-clear-formatting
        do {
            context.saveGState()
            context.translateBy(x: 1222, y: 239)
            
            /// clear-formatting
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 7.34, y: 6.66))
                shape.addLine(to: CGPoint(x: 2.74, y: 11.26))
                shape.addLine(to: CGPoint(x: 6.5, y: 0.5))
                shape.addLine(to: CGPoint(x: 10.5, y: 0.5))
                shape.addLine(to: CGPoint(x: 11.28, y: 2.72))
                shape.addLine(to: CGPoint(x: 9.13, y: 4.87))
                shape.addLine(to: CGPoint(x: 8.51, y: 2.78))
                shape.addLine(to: CGPoint(x: 7.34, y: 6.66))
                shape.addLine(to: CGPoint(x: 7.34, y: 6.66))
                shape.close()
                shape.move(to: CGPoint(x: 12.83, y: 7.17))
                shape.addLine(to: CGPoint(x: 15.74, y: 15.5))
                shape.addLine(to: CGPoint(x: 12.32, y: 15.5))
                shape.addLine(to: CGPoint(x: 11.27, y: 12))
                shape.addLine(to: CGPoint(x: 8, y: 12))
                shape.addLine(to: CGPoint(x: 1.5, y: 18.5))
                shape.addLine(to: CGPoint(x: 0, y: 17))
                shape.addLine(to: CGPoint(x: 17, y: 0))
                shape.addLine(to: CGPoint(x: 18.5, y: 1.5))
                shape.addLine(to: CGPoint(x: 12.83, y: 7.17))
                shape.addLine(to: CGPoint(x: 12.83, y: 7.17))
                shape.close()
                shape.move(to: CGPoint(x: 10.52, y: 9.48))
                shape.addLine(to: CGPoint(x: 10.49, y: 9.51))
                shape.addLine(to: CGPoint(x: 10.52, y: 9.5))
                shape.addLine(to: CGPoint(x: 10.52, y: 9.48))
                shape.addLine(to: CGPoint(x: 10.52, y: 9.48))
                shape.close()
                shape.move(to: CGPoint(x: 10.52, y: 9.48))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.5)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconschevronup(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 10)
        context.translateBy(x: -1196, y: -239)
        
        /// gridicons-chevron-up
        do {
            context.saveGState()
            context.translateBy(x: 1196, y: 239)
            
            /// chevron-up
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addLine(to: CGPoint(x: 14.59, y: 9.41))
                shape.addLine(to: CGPoint(x: 8, y: 2.83))
                shape.addLine(to: CGPoint(x: 1.41, y: 9.41))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 8))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconschevronright(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 10, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 10, y: resizedFrame.height / 16)
        context.translateBy(x: -1176, y: -239)
        
        /// gridicons-chevron-right
        do {
            context.saveGState()
            context.translateBy(x: 1176, y: 239)
            
            /// chevron-right
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 1.41, y: 16))
                shape.addLine(to: CGPoint(x: 9.41, y: 8))
                shape.addLine(to: CGPoint(x: 1.41, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 1.41))
                shape.addLine(to: CGPoint(x: 6.59, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 14.59))
                shape.addLine(to: CGPoint(x: 1.41, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 1.41, y: 16))
                context.saveGState()
                context.translateBy(x: 0.59, y: 0)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconschevronleft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 10, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 10, y: resizedFrame.height / 16)
        context.translateBy(x: -1156, y: -239)
        
        /// gridicons-chevron-left
        do {
            context.saveGState()
            context.translateBy(x: 1156, y: 239)
            
            /// chevron-left
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 8, y: 16))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 9.41, y: 1.41))
                shape.addLine(to: CGPoint(x: 2.83, y: 8))
                shape.addLine(to: CGPoint(x: 9.41, y: 14.59))
                shape.addLine(to: CGPoint(x: 8, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 16))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconschevrondown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 10)
        context.translateBy(x: -1130, y: -239)
        
        /// gridicons-chevron-down
        do {
            context.saveGState()
            context.translateBy(x: 1130, y: 239)
            
            /// chevron-down
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 16, y: 1.41))
                shape.addLine(to: CGPoint(x: 8, y: 9.41))
                shape.addLine(to: CGPoint(x: 0, y: 1.41))
                shape.addLine(to: CGPoint(x: 1.41, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 6.59))
                shape.addLine(to: CGPoint(x: 14.59, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 1.41))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 1.41))
                context.saveGState()
                context.translateBy(x: 0, y: 0.59)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscheckmark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 15)
        context.translateBy(x: -1100, y: -239)
        
        /// gridicons-checkmark
        do {
            context.saveGState()
            context.translateBy(x: 1100, y: 239)
            
            /// checkmark
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 6.71, y: 14.12))
                shape.addLine(to: CGPoint(x: 0, y: 7.41))
                shape.addLine(to: CGPoint(x: 1.41, y: 6))
                shape.addLine(to: CGPoint(x: 6.71, y: 11.29))
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 19.41, y: 1.41))
                shape.addLine(to: CGPoint(x: 6.71, y: 14.12))
                shape.close()
                shape.move(to: CGPoint(x: 6.71, y: 14.12))
                context.saveGState()
                context.translateBy(x: 0.29, y: 0.29)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscheckmarkcircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1070, y: -239)
        
        /// gridicons-checkmark-circle
        do {
            context.saveGState()
            context.translateBy(x: 1070, y: 239)
            
            /// checkmark-circle
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 9, y: 15.77))
                shape.addLine(to: CGPoint(x: 4.12, y: 10.88))
                shape.addLine(to: CGPoint(x: 5.88, y: 9.12))
                shape.addLine(to: CGPoint(x: 9, y: 12.23))
                shape.addLine(to: CGPoint(x: 17.66, y: 3.57))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 15.82, y: 1.39), controlPoint2: CGPoint(x: 13.08, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 19.03, y: 5.73), controlPoint1: CGPoint(x: 20, y: 8.47), controlPoint2: CGPoint(x: 19.65, y: 7.03))
                shape.addLine(to: CGPoint(x: 9, y: 15.77))
                shape.addLine(to: CGPoint(x: 9, y: 15.77))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 15.77))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconschat(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 18)
        context.translateBy(x: -1040, y: -239)
        
        /// gridicons-chat
        do {
            context.saveGState()
            context.translateBy(x: 1040, y: 239)
            
            /// Layer_1
            do {
                context.saveGState()
                
                /// Group
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 10, y: 0))
                    shape.addLine(to: CGPoint(x: 2, y: 0))
                    shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                    shape.addLine(to: CGPoint(x: 0, y: 4))
                    shape.addLine(to: CGPoint(x: 2, y: 4))
                    shape.addCurve(to: CGPoint(x: 5, y: 7), controlPoint1: CGPoint(x: 3.7, y: 4), controlPoint2: CGPoint(x: 5, y: 5.3))
                    shape.addLine(to: CGPoint(x: 5, y: 9))
                    shape.addLine(to: CGPoint(x: 7, y: 9))
                    shape.addLine(to: CGPoint(x: 7, y: 12.5))
                    shape.addLine(to: CGPoint(x: 10.3, y: 10.2))
                    shape.addCurve(to: CGPoint(x: 12, y: 6.9), controlPoint1: CGPoint(x: 11.4, y: 9.4), controlPoint2: CGPoint(x: 12, y: 8.2))
                    shape.addLine(to: CGPoint(x: 12, y: 2))
                    shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 12, y: 0.9), controlPoint2: CGPoint(x: 11.1, y: 0))
                    shape.addLine(to: CGPoint(x: 10, y: 0))
                    shape.close()
                    shape.move(to: CGPoint(x: 10, y: 0))
                    context.saveGState()
                    context.translateBy(x: 8, y: 0)
                    shape.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    /// Shape
                    let shape2 = UIBezierPath()
                    shape2.move(to: CGPoint(x: 12, y: 2))
                    shape2.addLine(to: CGPoint(x: 12, y: 7))
                    shape2.addCurve(to: CGPoint(x: 10, y: 9), controlPoint1: CGPoint(x: 12, y: 8.1), controlPoint2: CGPoint(x: 11.1, y: 9))
                    shape2.addLine(to: CGPoint(x: 5, y: 9))
                    shape2.addLine(to: CGPoint(x: 5, y: 12.5))
                    shape2.addLine(to: CGPoint(x: 1.7, y: 10.2))
                    shape2.addCurve(to: CGPoint(x: 0, y: 6.9), controlPoint1: CGPoint(x: 0.6, y: 9.4), controlPoint2: CGPoint(x: 0, y: 8.2))
                    shape2.addLine(to: CGPoint(x: 0, y: 2))
                    shape2.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                    shape2.addLine(to: CGPoint(x: 10, y: 0))
                    shape2.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 11.1, y: 0), controlPoint2: CGPoint(x: 12, y: 0.9))
                    shape2.addLine(to: CGPoint(x: 12, y: 2))
                    shape2.close()
                    shape2.move(to: CGPoint(x: 12, y: 2))
                    context.saveGState()
                    context.translateBy(x: 0, y: 5)
                    shape2.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    shape2.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 20)
        context.translateBy(x: -1012, y: -239)
        
        /// gridicons-cart
        do {
            context.saveGState()
            context.translateBy(x: 1012, y: 239)
            
            /// cart
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 6, y: 18))
                shape.addCurve(to: CGPoint(x: 4, y: 20), controlPoint1: CGPoint(x: 6, y: 19.1), controlPoint2: CGPoint(x: 5.1, y: 20))
                shape.addCurve(to: CGPoint(x: 2.01, y: 18), controlPoint1: CGPoint(x: 2.9, y: 20), controlPoint2: CGPoint(x: 2.01, y: 19.1))
                shape.addCurve(to: CGPoint(x: 4, y: 16), controlPoint1: CGPoint(x: 2.01, y: 16.9), controlPoint2: CGPoint(x: 2.9, y: 16))
                shape.addCurve(to: CGPoint(x: 6, y: 18), controlPoint1: CGPoint(x: 5.1, y: 16), controlPoint2: CGPoint(x: 6, y: 16.9))
                shape.addLine(to: CGPoint(x: 6, y: 18))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 16))
                shape.addCurve(to: CGPoint(x: 12.01, y: 18), controlPoint1: CGPoint(x: 12.9, y: 16), controlPoint2: CGPoint(x: 12.01, y: 16.9))
                shape.addCurve(to: CGPoint(x: 14, y: 20), controlPoint1: CGPoint(x: 12.01, y: 19.1), controlPoint2: CGPoint(x: 12.9, y: 20))
                shape.addCurve(to: CGPoint(x: 16, y: 18), controlPoint1: CGPoint(x: 15.1, y: 20), controlPoint2: CGPoint(x: 16, y: 19.1))
                shape.addCurve(to: CGPoint(x: 14, y: 16), controlPoint1: CGPoint(x: 16, y: 16.9), controlPoint2: CGPoint(x: 15.1, y: 16))
                shape.addLine(to: CGPoint(x: 14, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 14.4, y: 11))
                shape.addCurve(to: CGPoint(x: 16.35, y: 9.43), controlPoint1: CGPoint(x: 15.33, y: 11), controlPoint2: CGPoint(x: 16.15, y: 10.35))
                shape.addLine(to: CGPoint(x: 18, y: 3))
                shape.addLine(to: CGPoint(x: 4, y: 3))
                shape.addLine(to: CGPoint(x: 4, y: 2))
                shape.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 4, y: 0.9), controlPoint2: CGPoint(x: 3.11, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 3))
                shape.addLine(to: CGPoint(x: 2, y: 11))
                shape.addLine(to: CGPoint(x: 2, y: 13))
                shape.addCurve(to: CGPoint(x: 4, y: 15), controlPoint1: CGPoint(x: 2, y: 14.11), controlPoint2: CGPoint(x: 2.9, y: 15))
                shape.addLine(to: CGPoint(x: 16, y: 15))
                shape.addCurve(to: CGPoint(x: 14, y: 13), controlPoint1: CGPoint(x: 16, y: 13.9), controlPoint2: CGPoint(x: 15.11, y: 13))
                shape.addLine(to: CGPoint(x: 4, y: 13))
                shape.addLine(to: CGPoint(x: 4, y: 11))
                shape.addLine(to: CGPoint(x: 14.4, y: 11))
                shape.addLine(to: CGPoint(x: 14.4, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 14.4, y: 11))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscaption(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 16)
        context.translateBy(x: -981, y: -239)
        
        /// gridicons-caption
        do {
            context.saveGState()
            context.translateBy(x: 981, y: 239)
            
            /// caption
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 11))
                shape.addLine(to: CGPoint(x: 20, y: 9))
                shape.addLine(to: CGPoint(x: 20, y: 14))
                shape.addCurve(to: CGPoint(x: 18, y: 16), controlPoint1: CGPoint(x: 20, y: 15.11), controlPoint2: CGPoint(x: 19.11, y: 16))
                shape.addLine(to: CGPoint(x: 2, y: 16))
                shape.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 0.9, y: 16), controlPoint2: CGPoint(x: 0, y: 15.11))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                shape.addLine(to: CGPoint(x: 15, y: 0))
                shape.addLine(to: CGPoint(x: 13, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 11))
                shape.addLine(to: CGPoint(x: 18, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 20.44, y: 2.44))
                shape.addLine(to: CGPoint(x: 19.56, y: 1.56))
                shape.addCurve(to: CGPoint(x: 17.44, y: 1.56), controlPoint1: CGPoint(x: 18.97, y: 0.98), controlPoint2: CGPoint(x: 18.03, y: 0.98))
                shape.addLine(to: CGPoint(x: 10, y: 9))
                shape.addLine(to: CGPoint(x: 10, y: 11))
                shape.addLine(to: CGPoint(x: 4, y: 11))
                shape.addLine(to: CGPoint(x: 4, y: 13))
                shape.addLine(to: CGPoint(x: 13, y: 13))
                shape.addLine(to: CGPoint(x: 13, y: 12))
                shape.addLine(to: CGPoint(x: 20.44, y: 4.56))
                shape.addCurve(to: CGPoint(x: 20.44, y: 2.44), controlPoint1: CGPoint(x: 21.03, y: 3.97), controlPoint2: CGPoint(x: 21.03, y: 3.03))
                shape.addLine(to: CGPoint(x: 20.44, y: 2.44))
                shape.close()
                shape.move(to: CGPoint(x: 20.44, y: 2.44))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscamera(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 17), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 17)
        context.translateBy(x: -951, y: -239)
        
        /// gridicons-camera
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 239)
            
            /// camera
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 15, y: 9))
                shape.addCurve(to: CGPoint(x: 12, y: 12), controlPoint1: CGPoint(x: 15, y: 10.7), controlPoint2: CGPoint(x: 13.7, y: 12))
                shape.addCurve(to: CGPoint(x: 9, y: 9), controlPoint1: CGPoint(x: 10.3, y: 12), controlPoint2: CGPoint(x: 9, y: 10.7))
                shape.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9, y: 7.3), controlPoint2: CGPoint(x: 10.3, y: 6))
                shape.addCurve(to: CGPoint(x: 15, y: 9), controlPoint1: CGPoint(x: 13.7, y: 6), controlPoint2: CGPoint(x: 15, y: 7.3))
                shape.addLine(to: CGPoint(x: 15, y: 9))
                shape.close()
                shape.move(to: CGPoint(x: 20, y: 4))
                shape.addLine(to: CGPoint(x: 20, y: 15))
                shape.addCurve(to: CGPoint(x: 18, y: 17), controlPoint1: CGPoint(x: 20, y: 16.1), controlPoint2: CGPoint(x: 19.1, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 17))
                shape.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 0.9, y: 17), controlPoint2: CGPoint(x: 0, y: 16.1))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addCurve(to: CGPoint(x: 2, y: 2), controlPoint1: CGPoint(x: 0, y: 2.9), controlPoint2: CGPoint(x: 0.9, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 1))
                shape.addLine(to: CGPoint(x: 6, y: 1))
                shape.addLine(to: CGPoint(x: 6, y: 2))
                shape.addLine(to: CGPoint(x: 8, y: 2))
                shape.addLine(to: CGPoint(x: 9, y: 0))
                shape.addLine(to: CGPoint(x: 15, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addCurve(to: CGPoint(x: 20, y: 4), controlPoint1: CGPoint(x: 19.1, y: 2), controlPoint2: CGPoint(x: 20, y: 2.9))
                shape.addLine(to: CGPoint(x: 20, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 5.5, y: 6))
                shape.addCurve(to: CGPoint(x: 4, y: 4.5), controlPoint1: CGPoint(x: 5.5, y: 5.2), controlPoint2: CGPoint(x: 4.8, y: 4.5))
                shape.addCurve(to: CGPoint(x: 2.5, y: 6), controlPoint1: CGPoint(x: 3.2, y: 4.5), controlPoint2: CGPoint(x: 2.5, y: 5.2))
                shape.addCurve(to: CGPoint(x: 4, y: 7.5), controlPoint1: CGPoint(x: 2.5, y: 6.8), controlPoint2: CGPoint(x: 3.2, y: 7.5))
                shape.addCurve(to: CGPoint(x: 5.5, y: 6), controlPoint1: CGPoint(x: 4.8, y: 7.5), controlPoint2: CGPoint(x: 5.5, y: 6.8))
                shape.addLine(to: CGPoint(x: 5.5, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 17, y: 9))
                shape.addCurve(to: CGPoint(x: 12, y: 4), controlPoint1: CGPoint(x: 17, y: 6.2), controlPoint2: CGPoint(x: 14.8, y: 4))
                shape.addCurve(to: CGPoint(x: 7, y: 9), controlPoint1: CGPoint(x: 9.2, y: 4), controlPoint2: CGPoint(x: 7, y: 6.2))
                shape.addCurve(to: CGPoint(x: 12, y: 14), controlPoint1: CGPoint(x: 7, y: 11.8), controlPoint2: CGPoint(x: 9.2, y: 14))
                shape.addCurve(to: CGPoint(x: 17, y: 9), controlPoint1: CGPoint(x: 14.8, y: 14), controlPoint2: CGPoint(x: 17, y: 11.8))
                shape.addLine(to: CGPoint(x: 17, y: 9))
                shape.close()
                shape.move(to: CGPoint(x: 17, y: 9))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconscalendar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 19)
        context.translateBy(x: -1261, y: -207)
        
        /// gridicons-calendar
        do {
            context.saveGState()
            context.translateBy(x: 1261, y: 207)
            
            /// calendar
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 15, y: 2))
                shape.addLine(to: CGPoint(x: 15, y: 0))
                shape.addLine(to: CGPoint(x: 13, y: 0))
                shape.addLine(to: CGPoint(x: 13, y: 2))
                shape.addLine(to: CGPoint(x: 5, y: 2))
                shape.addLine(to: CGPoint(x: 5, y: 0))
                shape.addLine(to: CGPoint(x: 3, y: 0))
                shape.addLine(to: CGPoint(x: 3, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.9, y: 2), controlPoint2: CGPoint(x: 0, y: 2.9))
                shape.addLine(to: CGPoint(x: 0, y: 17))
                shape.addCurve(to: CGPoint(x: 2, y: 19), controlPoint1: CGPoint(x: 0, y: 18.1), controlPoint2: CGPoint(x: 0.9, y: 19))
                shape.addLine(to: CGPoint(x: 16, y: 19))
                shape.addCurve(to: CGPoint(x: 18, y: 17), controlPoint1: CGPoint(x: 17.1, y: 19), controlPoint2: CGPoint(x: 18, y: 18.1))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 18, y: 2.9), controlPoint2: CGPoint(x: 17.1, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 17))
                shape.addLine(to: CGPoint(x: 2, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 17))
                shape.addLine(to: CGPoint(x: 16, y: 17))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 17))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsbriefcase(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)
        context.translateBy(x: -1231, y: -207)
        
        /// gridicons-briefcase
        do {
            context.saveGState()
            context.translateBy(x: 1231, y: 207)
            
            /// briefcase
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 12, y: 13))
                shape.addLine(to: CGPoint(x: 8, y: 13))
                shape.addLine(to: CGPoint(x: 8, y: 11))
                shape.addLine(to: CGPoint(x: 0, y: 11))
                shape.addLine(to: CGPoint(x: 0, y: 17))
                shape.addCurve(to: CGPoint(x: 2, y: 19), controlPoint1: CGPoint(x: 0, y: 18.11), controlPoint2: CGPoint(x: 0.9, y: 19))
                shape.addLine(to: CGPoint(x: 18, y: 19))
                shape.addCurve(to: CGPoint(x: 20, y: 17), controlPoint1: CGPoint(x: 19.11, y: 19), controlPoint2: CGPoint(x: 20, y: 18.11))
                shape.addLine(to: CGPoint(x: 20, y: 11))
                shape.addLine(to: CGPoint(x: 12, y: 11))
                shape.addLine(to: CGPoint(x: 12, y: 13))
                shape.addLine(to: CGPoint(x: 12, y: 13))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 16, y: 0.9), controlPoint2: CGPoint(x: 15.11, y: 0))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addCurve(to: CGPoint(x: 4, y: 2), controlPoint1: CGPoint(x: 4.89, y: 0), controlPoint2: CGPoint(x: 4, y: 0.9))
                shape.addLine(to: CGPoint(x: 4, y: 4))
                shape.addLine(to: CGPoint(x: 2, y: 4))
                shape.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 4.89))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 20, y: 10))
                shape.addLine(to: CGPoint(x: 20, y: 6))
                shape.addCurve(to: CGPoint(x: 18, y: 4), controlPoint1: CGPoint(x: 20, y: 4.89), controlPoint2: CGPoint(x: 19.11, y: 4))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 4))
                shape.addLine(to: CGPoint(x: 6, y: 2))
                shape.addLine(to: CGPoint(x: 14, y: 2))
                shape.addLine(to: CGPoint(x: 14, y: 4))
                shape.addLine(to: CGPoint(x: 14, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 4))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsbookmark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 18)
        context.translateBy(x: -1207, y: -207)
        
        /// gridicons-bookmark
        do {
            context.saveGState()
            context.translateBy(x: 1207, y: 207)
            
            /// bookmark
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 12, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 18))
                shape.addLine(to: CGPoint(x: 7, y: 14))
                shape.addLine(to: CGPoint(x: 14, y: 18))
                shape.addLine(to: CGPoint(x: 14, y: 2))
                shape.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 14, y: 0.9), controlPoint2: CGPoint(x: 13.1, y: 0))
                shape.addLine(to: CGPoint(x: 12, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsbookmarkoutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 18)
        context.translateBy(x: -1183, y: -207)
        
        /// gridicons-bookmark-outline
        do {
            context.saveGState()
            context.translateBy(x: 1183, y: 207)
            
            /// bookmark-outline
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 12, y: 2))
                shape.addLine(to: CGPoint(x: 12, y: 14.55))
                shape.addLine(to: CGPoint(x: 7, y: 11.7))
                shape.addLine(to: CGPoint(x: 2, y: 14.55))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 12, y: 2))
                shape.addLine(to: CGPoint(x: 12, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 18))
                shape.addLine(to: CGPoint(x: 7, y: 14))
                shape.addLine(to: CGPoint(x: 14, y: 18))
                shape.addLine(to: CGPoint(x: 14, y: 2))
                shape.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 14, y: 0.9), controlPoint2: CGPoint(x: 13.1, y: 0))
                shape.addLine(to: CGPoint(x: 12, y: 0))
                shape.addLine(to: CGPoint(x: 12, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsbook(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 18)
        context.translateBy(x: -1157, y: -207)
        
        /// gridicons-book
        do {
            context.saveGState()
            context.translateBy(x: 1157, y: 207)
            
            /// book
            do {
                context.saveGState()
                
                /// education-and-organizations
                do {
                    context.saveGState()
                    
                    /// Group
                    do {
                        context.saveGState()
                        
                        /// Rectangle-path
                        let rectanglepath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 18))
                        context.saveGState()
                        UIColor.black.setFill()
                        rectanglepath.fill()
                        context.restoreGState()
                        
                        /// Shape
                        let shape = UIBezierPath()
                        shape.move(to: CGPoint(x: 11, y: 0))
                        shape.addLine(to: CGPoint.zero)
                        shape.addLine(to: CGPoint(x: 0, y: 18))
                        shape.addLine(to: CGPoint(x: 11, y: 18))
                        shape.addCurve(to: CGPoint(x: 13, y: 16), controlPoint1: CGPoint(x: 12.1, y: 18), controlPoint2: CGPoint(x: 13, y: 17.1))
                        shape.addLine(to: CGPoint(x: 13, y: 2))
                        shape.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 13, y: 0.9), controlPoint2: CGPoint(x: 12.1, y: 0))
                        shape.addLine(to: CGPoint(x: 11, y: 0))
                        shape.close()
                        shape.move(to: CGPoint(x: 9, y: 6))
                        shape.addLine(to: CGPoint(x: 3, y: 6))
                        shape.addLine(to: CGPoint(x: 3, y: 5))
                        shape.addLine(to: CGPoint(x: 9, y: 5))
                        shape.addLine(to: CGPoint(x: 9, y: 6))
                        shape.addLine(to: CGPoint(x: 9, y: 6))
                        shape.close()
                        shape.move(to: CGPoint(x: 9, y: 4))
                        shape.addLine(to: CGPoint(x: 3, y: 4))
                        shape.addLine(to: CGPoint(x: 3, y: 3))
                        shape.addLine(to: CGPoint(x: 9, y: 3))
                        shape.addLine(to: CGPoint(x: 9, y: 4))
                        shape.addLine(to: CGPoint(x: 9, y: 4))
                        shape.close()
                        shape.move(to: CGPoint(x: 9, y: 4))
                        context.saveGState()
                        context.translateBy(x: 3, y: 0)
                        shape.usesEvenOddFillRule = true
                        UIColor.black.setFill()
                        shape.fill()
                        context.restoreGState()
                        
                        context.restoreGState()
                    }
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsbold(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 15)
        context.translateBy(x: -1136, y: -207)
        
        /// gridicons-bold
        do {
            context.saveGState()
            context.translateBy(x: 1136, y: 207)
            
            /// bold
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 4.55, y: 0))
                shape.addCurve(to: CGPoint(x: 9.18, y: 0.91), controlPoint1: CGPoint(x: 6.67, y: 0), controlPoint2: CGPoint(x: 8.22, y: 0.3))
                shape.addCurve(to: CGPoint(x: 10.62, y: 3.79), controlPoint1: CGPoint(x: 10.14, y: 1.51), controlPoint2: CGPoint(x: 10.62, y: 2.47))
                shape.addCurve(to: CGPoint(x: 9.99, y: 6), controlPoint1: CGPoint(x: 10.62, y: 4.69), controlPoint2: CGPoint(x: 10.41, y: 5.42))
                shape.addCurve(to: CGPoint(x: 8.31, y: 7.04), controlPoint1: CGPoint(x: 9.57, y: 6.57), controlPoint2: CGPoint(x: 9.01, y: 6.92))
                shape.addLine(to: CGPoint(x: 8.31, y: 7.14))
                shape.addCurve(to: CGPoint(x: 10.37, y: 8.33), controlPoint1: CGPoint(x: 9.26, y: 7.35), controlPoint2: CGPoint(x: 9.95, y: 7.75))
                shape.addCurve(to: CGPoint(x: 11, y: 10.64), controlPoint1: CGPoint(x: 10.79, y: 8.91), controlPoint2: CGPoint(x: 11, y: 9.68))
                shape.addCurve(to: CGPoint(x: 9.52, y: 13.84), controlPoint1: CGPoint(x: 11, y: 12.01), controlPoint2: CGPoint(x: 10.51, y: 13.08))
                shape.addCurve(to: CGPoint(x: 5.49, y: 14.99), controlPoint1: CGPoint(x: 8.53, y: 14.61), controlPoint2: CGPoint(x: 7.19, y: 14.99))
                shape.addLine(to: CGPoint(x: 0, y: 14.99))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint.zero)
                shape.close()
                shape.move(to: CGPoint(x: 3, y: 5.94))
                shape.addLine(to: CGPoint(x: 5.03, y: 5.94))
                shape.addCurve(to: CGPoint(x: 6.9, y: 5.54), controlPoint1: CGPoint(x: 5.89, y: 5.94), controlPoint2: CGPoint(x: 6.51, y: 5.8))
                shape.addCurve(to: CGPoint(x: 7.48, y: 4.21), controlPoint1: CGPoint(x: 7.29, y: 5.27), controlPoint2: CGPoint(x: 7.48, y: 4.83))
                shape.addCurve(to: CGPoint(x: 6.85, y: 2.98), controlPoint1: CGPoint(x: 7.48, y: 3.64), controlPoint2: CGPoint(x: 7.27, y: 3.23))
                shape.addCurve(to: CGPoint(x: 4.85, y: 2.6), controlPoint1: CGPoint(x: 6.43, y: 2.73), controlPoint2: CGPoint(x: 5.76, y: 2.6))
                shape.addLine(to: CGPoint(x: 3, y: 2.6))
                shape.addLine(to: CGPoint(x: 3, y: 5.94))
                shape.addLine(to: CGPoint(x: 3, y: 5.94))
                shape.close()
                shape.move(to: CGPoint(x: 3, y: 8.46))
                shape.addLine(to: CGPoint(x: 3, y: 12.37))
                shape.addLine(to: CGPoint(x: 5.25, y: 12.37))
                shape.addCurve(to: CGPoint(x: 7.19, y: 11.86), controlPoint1: CGPoint(x: 6.13, y: 12.37), controlPoint2: CGPoint(x: 6.77, y: 12.2))
                shape.addCurve(to: CGPoint(x: 7.82, y: 10.33), controlPoint1: CGPoint(x: 7.61, y: 11.53), controlPoint2: CGPoint(x: 7.82, y: 11.02))
                shape.addCurve(to: CGPoint(x: 5.15, y: 8.46), controlPoint1: CGPoint(x: 7.82, y: 9.08), controlPoint2: CGPoint(x: 6.93, y: 8.46))
                shape.addLine(to: CGPoint(x: 3, y: 8.46))
                shape.addLine(to: CGPoint(x: 3, y: 8.46))
                shape.close()
                shape.move(to: CGPoint(x: 3, y: 8.46))
                context.saveGState()
                context.translateBy(x: 0, y: 0.01)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsblock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1106, y: -207)
        
        /// gridicons-block
        do {
            context.saveGState()
            context.translateBy(x: 1106, y: 207)
            
            /// block
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 10))
                shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
                shape.addCurve(to: CGPoint(x: 14.9, y: 3.69), controlPoint1: CGPoint(x: 11.85, y: 2), controlPoint2: CGPoint(x: 13.55, y: 2.63))
                shape.addLine(to: CGPoint(x: 3.69, y: 14.9))
                shape.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 2.63, y: 13.55), controlPoint2: CGPoint(x: 2, y: 11.85))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 18))
                shape.addCurve(to: CGPoint(x: 5.1, y: 16.31), controlPoint1: CGPoint(x: 8.15, y: 18), controlPoint2: CGPoint(x: 6.45, y: 17.37))
                shape.addLine(to: CGPoint(x: 16.31, y: 5.1))
                shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 17.37, y: 6.46), controlPoint2: CGPoint(x: 18, y: 8.15))
                shape.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
                shape.addLine(to: CGPoint(x: 10, y: 18))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 18))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsbell(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        context.translateBy(x: -1078, y: -207)
        
        /// gridicons-bell
        do {
            context.saveGState()
            context.translateBy(x: 1078, y: 207)
            
            /// bell
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 3.14, y: 11.97))
                shape.addLine(to: CGPoint(x: 5.97, y: 14.8))
                shape.addCurve(to: CGPoint(x: 4.55, y: 15.38), controlPoint1: CGPoint(x: 5.61, y: 15.16), controlPoint2: CGPoint(x: 5.11, y: 15.38))
                shape.addCurve(to: CGPoint(x: 2.55, y: 13.38), controlPoint1: CGPoint(x: 3.45, y: 15.38), controlPoint2: CGPoint(x: 2.55, y: 14.49))
                shape.addCurve(to: CGPoint(x: 3.14, y: 11.97), controlPoint1: CGPoint(x: 2.56, y: 12.83), controlPoint2: CGPoint(x: 2.78, y: 12.33))
                shape.addLine(to: CGPoint(x: 3.14, y: 11.97))
                shape.close()
                shape.move(to: CGPoint(x: 12.01, y: 17.29))
                shape.addLine(to: CGPoint(x: 11.3, y: 18))
                shape.addLine(to: CGPoint(x: 0, y: 6.7))
                shape.addLine(to: CGPoint(x: 0.71, y: 5.99))
                shape.addLine(to: CGPoint(x: 1.81, y: 6.15))
                shape.addCurve(to: CGPoint(x: 3.88, y: 5.64), controlPoint1: CGPoint(x: 2.56, y: 6.26), controlPoint2: CGPoint(x: 3.5, y: 6.03))
                shape.addLine(to: CGPoint(x: 7.77, y: 1.75))
                shape.addCurve(to: CGPoint(x: 16.25, y: 1.75), controlPoint1: CGPoint(x: 10.11, y: -0.58), controlPoint2: CGPoint(x: 13.91, y: -0.58))
                shape.addCurve(to: CGPoint(x: 16.25, y: 10.23), controlPoint1: CGPoint(x: 18.59, y: 4.09), controlPoint2: CGPoint(x: 18.59, y: 7.89))
                shape.addLine(to: CGPoint(x: 12.36, y: 14.12))
                shape.addCurve(to: CGPoint(x: 11.85, y: 16.19), controlPoint1: CGPoint(x: 11.97, y: 14.5), controlPoint2: CGPoint(x: 11.74, y: 15.44))
                shape.addLine(to: CGPoint(x: 12.01, y: 17.29))
                shape.addLine(to: CGPoint(x: 12.01, y: 17.29))
                shape.close()
                shape.move(to: CGPoint(x: 12.01, y: 17.29))
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsaudio(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 16)
        context.translateBy(x: -1053, y: -207)
        
        /// gridicons-audio
        do {
            context.saveGState()
            context.translateBy(x: 1053, y: 207)
            
            /// audio
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 4, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 10.18))
                shape.addCurve(to: CGPoint(x: 3, y: 10), controlPoint1: CGPoint(x: 3.69, y: 10.07), controlPoint2: CGPoint(x: 3.35, y: 10))
                shape.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 1.34, y: 10), controlPoint2: CGPoint(x: 0, y: 11.34))
                shape.addCurve(to: CGPoint(x: 3, y: 16), controlPoint1: CGPoint(x: 0, y: 14.66), controlPoint2: CGPoint(x: 1.34, y: 16))
                shape.addCurve(to: CGPoint(x: 6, y: 13), controlPoint1: CGPoint(x: 4.66, y: 16), controlPoint2: CGPoint(x: 6, y: 14.66))
                shape.addLine(to: CGPoint(x: 6, y: 3))
                shape.addLine(to: CGPoint(x: 13, y: 3))
                shape.addLine(to: CGPoint(x: 13, y: 7.18))
                shape.addCurve(to: CGPoint(x: 12, y: 7), controlPoint1: CGPoint(x: 12.69, y: 7.07), controlPoint2: CGPoint(x: 12.35, y: 7))
                shape.addCurve(to: CGPoint(x: 9, y: 10), controlPoint1: CGPoint(x: 10.34, y: 7), controlPoint2: CGPoint(x: 9, y: 8.34))
                shape.addCurve(to: CGPoint(x: 12, y: 13), controlPoint1: CGPoint(x: 9, y: 11.66), controlPoint2: CGPoint(x: 10.34, y: 13))
                shape.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 13.66, y: 13), controlPoint2: CGPoint(x: 15, y: 11.66))
                shape.addLine(to: CGPoint(x: 15, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 0))
                shape.addLine(to: CGPoint(x: 4, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsattachment(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 22)
        context.translateBy(x: -1029, y: -207)
        
        /// gridicons-attachment
        do {
            context.saveGState()
            context.translateBy(x: 1029, y: 207)
            
            /// attachment
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 9, y: 0))
                shape.addCurve(to: CGPoint(x: 4, y: 5), controlPoint1: CGPoint(x: 6.24, y: 0), controlPoint2: CGPoint(x: 4, y: 2.24))
                shape.addLine(to: CGPoint(x: 4, y: 15))
                shape.addCurve(to: CGPoint(x: 7, y: 18), controlPoint1: CGPoint(x: 4, y: 16.66), controlPoint2: CGPoint(x: 5.34, y: 18))
                shape.addCurve(to: CGPoint(x: 9.99, y: 15), controlPoint1: CGPoint(x: 8.66, y: 18), controlPoint2: CGPoint(x: 9.99, y: 16.66))
                shape.addLine(to: CGPoint(x: 9.99, y: 5))
                shape.addLine(to: CGPoint(x: 8, y: 5))
                shape.addLine(to: CGPoint(x: 8, y: 15))
                shape.addCurve(to: CGPoint(x: 7, y: 16), controlPoint1: CGPoint(x: 8, y: 15.55), controlPoint2: CGPoint(x: 7.55, y: 16))
                shape.addCurve(to: CGPoint(x: 6, y: 15), controlPoint1: CGPoint(x: 6.45, y: 16), controlPoint2: CGPoint(x: 6, y: 15.55))
                shape.addLine(to: CGPoint(x: 6, y: 5))
                shape.addCurve(to: CGPoint(x: 9, y: 2), controlPoint1: CGPoint(x: 6, y: 3.34), controlPoint2: CGPoint(x: 7.34, y: 2))
                shape.addCurve(to: CGPoint(x: 12, y: 5), controlPoint1: CGPoint(x: 10.66, y: 2), controlPoint2: CGPoint(x: 12, y: 3.34))
                shape.addLine(to: CGPoint(x: 12, y: 15.13))
                shape.addCurve(to: CGPoint(x: 7, y: 20), controlPoint1: CGPoint(x: 12, y: 17.89), controlPoint2: CGPoint(x: 9.76, y: 20))
                shape.addCurve(to: CGPoint(x: 2, y: 15), controlPoint1: CGPoint(x: 4.24, y: 20), controlPoint2: CGPoint(x: 2, y: 17.76))
                shape.addLine(to: CGPoint(x: 2, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 15))
                shape.addCurve(to: CGPoint(x: 7, y: 22), controlPoint1: CGPoint(x: 0, y: 18.87), controlPoint2: CGPoint(x: 3.13, y: 22))
                shape.addCurve(to: CGPoint(x: 13.99, y: 15), controlPoint1: CGPoint(x: 10.87, y: 22), controlPoint2: CGPoint(x: 13.99, y: 18.87))
                shape.addLine(to: CGPoint(x: 13.99, y: 5))
                shape.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 13.99, y: 2.24), controlPoint2: CGPoint(x: 11.76, y: 0))
                shape.addLine(to: CGPoint(x: 9, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsaside(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -1003, y: -207)
        
        /// gridicons-aside
        do {
            context.saveGState()
            context.translateBy(x: 1003, y: 207)
            
            /// aside
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 16, y: 0.9), controlPoint2: CGPoint(x: 15.11, y: 0))
                shape.addLine(to: CGPoint(x: 2, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 0), controlPoint2: CGPoint(x: 0, y: 0.9))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addCurve(to: CGPoint(x: 2, y: 16), controlPoint1: CGPoint(x: 0, y: 15.11), controlPoint2: CGPoint(x: 0.9, y: 16))
                shape.addLine(to: CGPoint(x: 10, y: 16))
                shape.addLine(to: CGPoint(x: 10, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 14, y: 2))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.addLine(to: CGPoint(x: 10, y: 8))
                shape.addCurve(to: CGPoint(x: 8, y: 10), controlPoint1: CGPoint(x: 8.89, y: 8), controlPoint2: CGPoint(x: 8, y: 8.89))
                shape.addLine(to: CGPoint(x: 8, y: 14))
                shape.addLine(to: CGPoint(x: 2, y: 14))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.addLine(to: CGPoint(x: 2, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 6))
                shape.addLine(to: CGPoint(x: 4, y: 6))
                shape.addLine(to: CGPoint(x: 4, y: 4))
                shape.addLine(to: CGPoint(x: 12, y: 4))
                shape.addLine(to: CGPoint(x: 12, y: 6))
                shape.addLine(to: CGPoint(x: 12, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 12, y: 6))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsarrowup(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -977, y: -207)
        
        /// gridicons-arrow-up
        do {
            context.saveGState()
            context.translateBy(x: 977, y: 207)
            
            /// arrow-up
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 9, y: 16))
                shape.addLine(to: CGPoint(x: 9, y: 3.83))
                shape.addLine(to: CGPoint(x: 14.59, y: 9.42))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 1.41, y: 9.41))
                shape.addLine(to: CGPoint(x: 7, y: 3.83))
                shape.addLine(to: CGPoint(x: 7, y: 16))
                shape.addLine(to: CGPoint(x: 9, y: 16))
                shape.addLine(to: CGPoint(x: 9, y: 16))
                shape.close()
                shape.move(to: CGPoint(x: 9, y: 16))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsarrowright(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -951, y: -207)
        
        /// gridicons-arrow-right
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 207)
            
            /// arrow-right
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 6.59, y: 1.41))
                shape.addLine(to: CGPoint(x: 12.17, y: 7))
                shape.addLine(to: CGPoint(x: 0, y: 7))
                shape.addLine(to: CGPoint(x: 0, y: 9))
                shape.addLine(to: CGPoint(x: 12.17, y: 9))
                shape.addLine(to: CGPoint(x: 6.59, y: 14.59))
                shape.addLine(to: CGPoint(x: 8, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsarrowleft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -1282, y: -177)
        
        /// gridicons-arrow-left
        do {
            context.saveGState()
            context.translateBy(x: 1282, y: 177)
            
            /// arrow-left
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 16, y: 7))
                shape.addLine(to: CGPoint(x: 3.83, y: 7))
                shape.addLine(to: CGPoint(x: 9.42, y: 1.41))
                shape.addLine(to: CGPoint(x: 8, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 16))
                shape.addLine(to: CGPoint(x: 9.41, y: 14.59))
                shape.addLine(to: CGPoint(x: 3.83, y: 9))
                shape.addLine(to: CGPoint(x: 16, y: 9))
                shape.addLine(to: CGPoint(x: 16, y: 7))
                shape.addLine(to: CGPoint(x: 16, y: 7))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 7))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsarrowdown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        context.translateBy(x: -1256, y: -177)
        
        /// gridicons-arrow-down
        do {
            context.saveGState()
            context.translateBy(x: 1256, y: 177)
            
            /// arrow-down
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 7, y: 0))
                shape.addLine(to: CGPoint(x: 7, y: 12.17))
                shape.addLine(to: CGPoint(x: 1.41, y: 6.58))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 16))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addLine(to: CGPoint(x: 14.59, y: 6.59))
                shape.addLine(to: CGPoint(x: 9, y: 12.17))
                shape.addLine(to: CGPoint(x: 9, y: 0))
                shape.addLine(to: CGPoint(x: 7, y: 0))
                shape.addLine(to: CGPoint(x: 7, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 7, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsalignright(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 14)
        context.translateBy(x: -1230, y: -177)
        
        /// gridicons-align-right
        do {
            context.saveGState()
            context.translateBy(x: 1230, y: 177)
            
            /// align-right
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 16, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 12))
                shape.addLine(to: CGPoint(x: 16, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addLine(to: CGPoint(x: 6, y: 8))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.addLine(to: CGPoint(x: 6, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 6, y: 0))
                shape.addLine(to: CGPoint(x: 6, y: 2))
                shape.addLine(to: CGPoint(x: 6, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 6, y: 2))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsalignleft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 14)
        context.translateBy(x: -1204, y: -177)
        
        /// gridicons-align-left
        do {
            context.saveGState()
            context.translateBy(x: 1204, y: 177)
            
            /// align-left
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 10, y: 10))
                shape.addLine(to: CGPoint(x: 10, y: 8))
                shape.addLine(to: CGPoint(x: 10, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsalignjustify(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 14)
        context.translateBy(x: -1178, y: -177)
        
        /// gridicons-align-justify
        do {
            context.saveGState()
            context.translateBy(x: 1178, y: 177)
            
            /// align-justify
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 2))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 16, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsalignimageright(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 14)
        context.translateBy(x: -1150, y: -177)
        
        /// gridicons-align-image-right
        do {
            context.saveGState()
            context.translateBy(x: 1150, y: 177)
            
            /// align-image-right
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 12))
                shape.addLine(to: CGPoint(x: 18, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 10, y: 4))
                shape.addLine(to: CGPoint(x: 10, y: 10))
                shape.addLine(to: CGPoint(x: 18, y: 10))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 8))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 8, y: 10))
                shape.addLine(to: CGPoint(x: 8, y: 8))
                shape.addLine(to: CGPoint(x: 8, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 8, y: 6))
                shape.addLine(to: CGPoint(x: 8, y: 4))
                shape.addLine(to: CGPoint(x: 8, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 4))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsalignimagenone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 14)
        context.translateBy(x: -1122, y: -177)
        
        /// gridicons-align-image-none
        do {
            context.saveGState()
            context.translateBy(x: 1122, y: 177)
            
            /// align-image-none
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 18, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 12))
                shape.addLine(to: CGPoint(x: 18, y: 12))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 8, y: 10))
                shape.addLine(to: CGPoint(x: 8, y: 4))
                shape.addLine(to: CGPoint(x: 8, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 8, y: 4))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsalignimageleft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 14)
        context.translateBy(x: -1094, y: -177)
        
        /// gridicons-align-image-left
        do {
            context.saveGState()
            context.translateBy(x: 1094, y: 177)
            
            /// align-image-left
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint.zero)
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 8, y: 10))
                shape.addLine(to: CGPoint(x: 8, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.addLine(to: CGPoint(x: 0, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 10))
                shape.addLine(to: CGPoint(x: 18, y: 10))
                shape.addLine(to: CGPoint(x: 18, y: 8))
                shape.addLine(to: CGPoint(x: 10, y: 8))
                shape.addLine(to: CGPoint(x: 10, y: 10))
                shape.addLine(to: CGPoint(x: 10, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 6))
                shape.addLine(to: CGPoint(x: 18, y: 6))
                shape.addLine(to: CGPoint(x: 18, y: 4))
                shape.addLine(to: CGPoint(x: 10, y: 4))
                shape.addLine(to: CGPoint(x: 10, y: 6))
                shape.addLine(to: CGPoint(x: 10, y: 6))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 6))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsalignimagecenter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 14)
        context.translateBy(x: -1066, y: -177)
        
        /// gridicons-align-image-center
        do {
            context.saveGState()
            context.translateBy(x: 1066, y: 177)
            
            /// align-image-center
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint.zero)
                shape.addLine(to: CGPoint(x: 18, y: 0))
                shape.addLine(to: CGPoint(x: 18, y: 2))
                shape.addLine(to: CGPoint(x: 0, y: 2))
                shape.addLine(to: CGPoint.zero)
                shape.addLine(to: CGPoint.zero)
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 14))
                shape.addLine(to: CGPoint(x: 18, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 10))
                shape.addLine(to: CGPoint(x: 13, y: 10))
                shape.addLine(to: CGPoint(x: 13, y: 4))
                shape.addLine(to: CGPoint(x: 5, y: 4))
                shape.addLine(to: CGPoint(x: 5, y: 10))
                shape.addLine(to: CGPoint(x: 5, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 5, y: 10))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsaligncenter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 14)
        context.translateBy(x: -1040, y: -177)
        
        /// gridicons-align-center
        do {
            context.saveGState()
            context.translateBy(x: 1040, y: 177)
            
            /// align-center
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 14))
                shape.addLine(to: CGPoint(x: 16, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 12))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.addLine(to: CGPoint(x: 0, y: 14))
                shape.close()
                shape.move(to: CGPoint(x: 13, y: 8))
                shape.addLine(to: CGPoint(x: 3, y: 8))
                shape.addLine(to: CGPoint(x: 3, y: 10))
                shape.addLine(to: CGPoint(x: 13, y: 10))
                shape.addLine(to: CGPoint(x: 13, y: 8))
                shape.addLine(to: CGPoint(x: 13, y: 8))
                shape.close()
                shape.move(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 6))
                shape.addLine(to: CGPoint(x: 16, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.addLine(to: CGPoint(x: 0, y: 4))
                shape.close()
                shape.move(to: CGPoint(x: 13, y: 0))
                shape.addLine(to: CGPoint(x: 3, y: 0))
                shape.addLine(to: CGPoint(x: 3, y: 2))
                shape.addLine(to: CGPoint(x: 13, y: 2))
                shape.addLine(to: CGPoint(x: 13, y: 0))
                shape.addLine(to: CGPoint(x: 13, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 13, y: 0))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsadd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -1010, y: -177)
        
        /// gridicons-add
        do {
            context.saveGState()
            context.translateBy(x: 1010, y: 177)
            
            /// add
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 11))
                shape.addLine(to: CGPoint(x: 11, y: 11))
                shape.addLine(to: CGPoint(x: 11, y: 15))
                shape.addLine(to: CGPoint(x: 9, y: 15))
                shape.addLine(to: CGPoint(x: 9, y: 11))
                shape.addLine(to: CGPoint(x: 5, y: 11))
                shape.addLine(to: CGPoint(x: 5, y: 9))
                shape.addLine(to: CGPoint(x: 9, y: 9))
                shape.addLine(to: CGPoint(x: 9, y: 5))
                shape.addLine(to: CGPoint(x: 11, y: 5))
                shape.addLine(to: CGPoint(x: 11, y: 9))
                shape.addLine(to: CGPoint(x: 15, y: 9))
                shape.addLine(to: CGPoint(x: 15, y: 11))
                shape.addLine(to: CGPoint(x: 15, y: 11))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 11))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsaddoutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        context.translateBy(x: -980, y: -177)
        
        /// gridicons-add-outline
        do {
            context.saveGState()
            context.translateBy(x: 980, y: 177)
            
            /// add-outline
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 10, y: 2))
                shape.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.41, y: 2), controlPoint2: CGPoint(x: 18, y: 5.59))
                shape.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.41), controlPoint2: CGPoint(x: 14.41, y: 18))
                shape.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.59, y: 18), controlPoint2: CGPoint(x: 2, y: 14.41))
                shape.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.59), controlPoint2: CGPoint(x: 5.59, y: 2))
                shape.addLine(to: CGPoint(x: 10, y: 2))
                shape.close()
                shape.move(to: CGPoint(x: 10, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
                shape.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
                shape.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
                shape.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.addLine(to: CGPoint(x: 10, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 9))
                shape.addLine(to: CGPoint(x: 11, y: 9))
                shape.addLine(to: CGPoint(x: 11, y: 5))
                shape.addLine(to: CGPoint(x: 9, y: 5))
                shape.addLine(to: CGPoint(x: 9, y: 9))
                shape.addLine(to: CGPoint(x: 5, y: 9))
                shape.addLine(to: CGPoint(x: 5, y: 11))
                shape.addLine(to: CGPoint(x: 9, y: 11))
                shape.addLine(to: CGPoint(x: 9, y: 15))
                shape.addLine(to: CGPoint(x: 11, y: 15))
                shape.addLine(to: CGPoint(x: 11, y: 11))
                shape.addLine(to: CGPoint(x: 15, y: 11))
                shape.addLine(to: CGPoint(x: 15, y: 9))
                shape.addLine(to: CGPoint(x: 15, y: 9))
                shape.close()
                shape.move(to: CGPoint(x: 15, y: 9))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGridiconsaddimage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 19)
        context.translateBy(x: -951, y: -177)
        
        /// gridicons-add-image
        do {
            context.saveGState()
            context.translateBy(x: 951, y: 177)
            
            /// add-image
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 19, y: 3))
                shape.addLine(to: CGPoint(x: 19, y: 5))
                shape.addLine(to: CGPoint(x: 16, y: 5))
                shape.addLine(to: CGPoint(x: 16, y: 8))
                shape.addLine(to: CGPoint(x: 14, y: 8))
                shape.addLine(to: CGPoint(x: 14, y: 5))
                shape.addLine(to: CGPoint(x: 11, y: 5))
                shape.addLine(to: CGPoint(x: 11, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 3))
                shape.addLine(to: CGPoint(x: 14, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 0))
                shape.addLine(to: CGPoint(x: 16, y: 3))
                shape.addLine(to: CGPoint(x: 19, y: 3))
                shape.addLine(to: CGPoint(x: 19, y: 3))
                shape.close()
                shape.move(to: CGPoint(x: 10.5, y: 10))
                shape.addCurve(to: CGPoint(x: 12, y: 8.5), controlPoint1: CGPoint(x: 11.33, y: 10), controlPoint2: CGPoint(x: 12, y: 9.33))
                shape.addCurve(to: CGPoint(x: 10.5, y: 7), controlPoint1: CGPoint(x: 12, y: 7.67), controlPoint2: CGPoint(x: 11.33, y: 7))
                shape.addCurve(to: CGPoint(x: 9, y: 8.5), controlPoint1: CGPoint(x: 9.67, y: 7), controlPoint2: CGPoint(x: 9, y: 7.67))
                shape.addCurve(to: CGPoint(x: 10.5, y: 10), controlPoint1: CGPoint(x: 9, y: 9.33), controlPoint2: CGPoint(x: 9.67, y: 10))
                shape.addLine(to: CGPoint(x: 10.5, y: 10))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 13.23))
                shape.addLine(to: CGPoint(x: 13.49, y: 12.66))
                shape.addCurve(to: CGPoint(x: 10.51, y: 12.66), controlPoint1: CGPoint(x: 12.69, y: 11.78), controlPoint2: CGPoint(x: 11.31, y: 11.78))
                shape.addLine(to: CGPoint(x: 9.86, y: 13.4))
                shape.addLine(to: CGPoint(x: 5, y: 8))
                shape.addLine(to: CGPoint(x: 2, y: 11.33))
                shape.addLine(to: CGPoint(x: 2, y: 5))
                shape.addLine(to: CGPoint(x: 9, y: 5))
                shape.addLine(to: CGPoint(x: 9, y: 3))
                shape.addLine(to: CGPoint(x: 2, y: 3))
                shape.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 0.9, y: 3), controlPoint2: CGPoint(x: 0, y: 3.9))
                shape.addLine(to: CGPoint(x: 0, y: 17))
                shape.addCurve(to: CGPoint(x: 2, y: 19), controlPoint1: CGPoint(x: 0, y: 18.11), controlPoint2: CGPoint(x: 0.9, y: 19))
                shape.addLine(to: CGPoint(x: 14, y: 19))
                shape.addCurve(to: CGPoint(x: 16, y: 17), controlPoint1: CGPoint(x: 15.11, y: 19), controlPoint2: CGPoint(x: 16, y: 18.11))
                shape.addLine(to: CGPoint(x: 16, y: 10))
                shape.addLine(to: CGPoint(x: 14, y: 10))
                shape.addLine(to: CGPoint(x: 14, y: 13.23))
                shape.addLine(to: CGPoint(x: 14, y: 13.23))
                shape.close()
                shape.move(to: CGPoint(x: 14, y: 13.23))
                context.saveGState()
                shape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfGridiconsvisible(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsvisible(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsvideo(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsvideo(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsvideocamera(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsvideocamera(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsuser(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsuser(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsusercircle(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsusercircle(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsuseradd(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsuseradd(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsundo(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsundo(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsunderline(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsunderline(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconstypes(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconstypes(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconstrophy(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconstrophy(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconstrash(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconstrash(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconstime(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconstime(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsthumbsup(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsthumbsup(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsthemes(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsthemes(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconstextcolor(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconstextcolor(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconstag(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconstag(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconstablet(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconstablet(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconssync(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconssync(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsstrikethrough(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsstrikethrough(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsstatus(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsstatus(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsstats(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsstats(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsstatsalt(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsstatsalt(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsstar(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsstar(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsstaroutline(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsstaroutline(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsspecialcharacter(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsspecialcharacter(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsspeaker(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsspeaker(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsspam(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsspam(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconssignout(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconssignout(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsshipping(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsshipping(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsshare(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsshare(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsshareios(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsshareios(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconssearch(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconssearch(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsscheduled(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsscheduled(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsrotate(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsrotate(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsresize(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsresize(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsreply(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsreply(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsrefund(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsrefund(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsrefresh(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsrefresh(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsredo(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsredo(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsreblog(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsreblog(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsreader(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsreader(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsreaderfollowing(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsreaderfollowing(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsreaderfollow(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsreaderfollow(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsreadmore(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsreadmore(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsquote(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsquote(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsproduct(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsproduct(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsproductvirtual(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsproductvirtual(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsproductexternal(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsproductexternal(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsproductdownloadable(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsproductdownloadable(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsprint(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsprint(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsposts(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsposts(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconspopout(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconspopout(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsplus(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsplus(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsplussmall(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsplussmall(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsplugins(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsplugins(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsphone(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsphone(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconspencil(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconspencil(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconspause(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconspause(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconspages(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconspages(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsoffline(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsoffline(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsnotice(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsnotice(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsnoticeoutline(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsnoticeoutline(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsnotvisible(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsnotvisible(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }

    class func imageOfGridiconsnextpage(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsnextpage(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return image
    }

    class func imageOfGridiconsmysites(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsmysites(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsmysiteshorizon(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsmysiteshorizon(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsmoney(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsmoney(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsminus(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsminus(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsminussmall(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsminussmall(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsmicrophone(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsmicrophone(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsmenus(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsmenus(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsmenu(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsmenu(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsmention(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsmention(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsmail(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsmail(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconslock(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconslock(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconslocation(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconslocation(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconslistunordered(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconslistunordered(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconslistordered(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconslistordered(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconslistcheckmark(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconslistcheckmark(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconslink(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconslink(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconslinkbreak(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconslinkbreak(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconslayout(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconslayout(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconslayoutblocks(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconslayoutblocks(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsitalic(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsitalic(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsinstitution(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsinstitution(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsink(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsink(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsinfo(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsinfo(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsinfooutline(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsinfooutline(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsindentright(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsindentright(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsindentleft(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsindentleft(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsimage(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsimage(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsimagemultiple(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsimagemultiple(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconshouse(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconshouse(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconshistory(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconshistory(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconshelp(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconshelp(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconshelpoutline(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconshelpoutline(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsheart(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsheart(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsheartoutline(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsheartoutline(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }

    class func imageOfGridiconsheadingH6(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsheadingH6(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return image
    }

    class func imageOfGridiconsheadingH5(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsheadingH5(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return image
    }

    class func imageOfGridiconsheadingH4(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsheadingH4(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return image
    }

    class func imageOfGridiconsheadingH3(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsheadingH3(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return image
    }

    class func imageOfGridiconsheadingH2(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsheadingH2(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return image
    }

    class func imageOfGridiconsheadingH1(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsheadingH1(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return image
    }

    class func imageOfGridiconsheading(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsheading(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsgrid(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsgrid(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsglobe(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsglobe(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsfullscreen(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsfullscreen(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsfullscreenexit(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsfullscreenexit(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsfolder(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsfolder(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsfoldermultiple(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsfoldermultiple(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsflipvertical(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsflipvertical(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsfliphorizontal(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsfliphorizontal(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsflag(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsflag(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsfilter(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsfilter(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsexternal(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsexternal(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsellipsis(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsellipsis(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsellipsiscircle(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsellipsiscircle(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsdropdown(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsdropdown(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsdomains(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsdomains(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscustomize(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscustomize(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscustomposttype(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscustomposttype(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscross(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscross(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscrosssmall(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscrosssmall(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscrosscircle(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscrosscircle(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscrop(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscrop(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscreditcard(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscreditcard(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscreate(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscreate(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscoupon(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscoupon(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscomputer(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscomputer(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscomment(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscomment(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscog(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscog(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscode(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscode(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscloud(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscloud(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscloudupload(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscloudupload(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscloudoutline(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscloudoutline(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsclouddownload(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsclouddownload(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsclipboard(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsclipboard(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsclearformatting(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsclearformatting(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconschevronup(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconschevronup(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconschevronright(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconschevronright(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconschevronleft(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconschevronleft(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconschevrondown(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconschevrondown(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscheckmark(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscheckmark(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscheckmarkcircle(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscheckmarkcircle(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconschat(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconschat(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscart(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscart(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscaption(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscaption(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscamera(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscamera(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconscalendar(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconscalendar(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsbriefcase(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsbriefcase(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsbookmark(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsbookmark(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsbookmarkoutline(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsbookmarkoutline(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsbook(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsbook(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsbold(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsbold(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsblock(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsblock(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsbell(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsbell(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsaudio(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsaudio(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsattachment(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsattachment(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsaside(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsaside(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsarrowup(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsarrowup(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsarrowright(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsarrowright(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsarrowleft(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsarrowleft(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsarrowdown(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsarrowdown(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsalignright(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsalignright(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsalignleft(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsalignleft(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsalignjustify(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsalignjustify(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsalignimageright(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsalignimageright(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsalignimagenone(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsalignimagenone(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsalignimageleft(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsalignimageleft(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsalignimagecenter(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsalignimagecenter(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsaligncenter(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsaligncenter(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsadd(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsadd(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsaddoutline(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsaddoutline(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsaddimage(size: CGSize) -> UIImage {
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        GridiconsGenerated.drawGridiconsaddimage(frame: CGRect(origin: CGPoint.zero, size: size))
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            let defaultRect = CGRect(x: 0, y: 0, width: 24.0, height: 24.0)
            
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            // To work correctly with Sketch's slices, this next calculation has been
            // changed to use the defaultRect's size instead of the passed in rect's size.
            var scales = CGSize.zero
            scales.width = abs(target.width / defaultRect.width)
            scales.height = abs(target.height / defaultRect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
